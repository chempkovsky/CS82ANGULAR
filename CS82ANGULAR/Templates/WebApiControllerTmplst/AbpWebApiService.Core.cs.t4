<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\CommonScripts\AbpRepoLevel.t4" #>

#nullable disable
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;

<#

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string GetOneByMethodNamePrefix     = "getoneby";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";
    string DownloadOneMethodName        = "downloadone";
    string GetManyByRepPrimMethodNamePrefix = "getmanybyrepprim";
    string GetManyByRepUnqMethodNamePrefix  = "getmanybyrepunq";

    string OperatorSufix = "Oprtr";
//    string repoInterfaceNameSpace = GetRepoInterfaceNameSpace(Model);
    string webApiNameSpace = GetDestinationNameSpace(Model);
    string rootEntityNameSpace = GetRootEntityNameSpace(Model);
    string appServiceInterfaceNameSpace = GetAppServiceInterfaceNameSpace(Model);
//    string dbContextNameSpace = GetDbContextNameSpace(Context);
//    string domainViewModelNameSpace = GetDomainViewModelNameSpace(Model);
    string viewModelNameSpace = GetViewModelNameSpace(Model);
    string webApiServicePrefix = GetWebApiServicePrefix(Model);
    string webApiRoutePrefix =  GetWebApiRoutePrefix(Model);
    bool EntHasId = AbpIsEntityWithId(Model);
    bool EntHasTenantId = AbpHasMultiTenant(Model);
    string IdDataType = "";
    string EntityKey = "";
    if(EntHasId) {
        IdDataType = GetAbpIdDataType(Model);
        EntityKey = ", " + IdDataType;
    }

    List<String> locNavigationPaths = GetNavigationPaths(Model);

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        
        GetModelUniqueKeys(Model, uniqueKeys);
    }

    string moduleName = AbpLastItemOfNameSpace(Model.WebApiServiceDefaultProjectNameSpace);


#>
<# if (!string.IsNullOrEmpty(viewModelNameSpace)) {
 if (!string.Equals(viewModelNameSpace, webApiNameSpace)) {#>
using <#= viewModelNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(rootEntityNameSpace)) {
 if (!string.Equals(rootEntityNameSpace, webApiNameSpace)) {#>
using <#= rootEntityNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(appServiceInterfaceNameSpace)) {
 if (!string.Equals(appServiceInterfaceNameSpace, webApiNameSpace)) {#>
using <#= appServiceInterfaceNameSpace #>;
<# }} #>

/*
  // == 1 ==
  // modify "<#= moduleName #>Permissions"-class like seen

  public class <#= moduleName #>Permissions
  {

    ...

    public static class <#= Model.ViewName #>
    {
        
        public const string Default = GroupName + ".<#= Model.ViewName #>";
        public const string FullScan = Default + ".f";
        public const string Create = Default + ".a";
        public const string Edit = Default + ".u";
        public const string Delete = Default + ".d";
    }

    ...

  }

  // == 2 ==
  // modify "<#= moduleName #>PermissionDefinitionProvider"-class like seen

    public class <#= moduleName #>PermissionDefinitionProvider : PermissionDefinitionProvider
    {
        ...
        public override void Define(IPermissionDefinitionContext context)
        {
            var mdlGrp = context.AddGroup(<#= moduleName #>Permissions.GroupName, L("Permission:<#= moduleName #>"));

            var perm = mdlGrp.AddPermission(<#= moduleName #>Permissions.<#= Model.ViewName #>.Default, L("Psn:<#= Model.ViewName #>"));
            perm.AddChild(<#= moduleName #>Permissions.<#= Model.ViewName #>.FullScan, L("Psn:<#= Model.ViewName #>.f"));
            perm.AddChild(<#= moduleName #>Permissions.<#= Model.ViewName #>.Create, L("Psn:<#= Model.ViewName #>.a"));
            perm.AddChild(<#= moduleName #>Permissions.<#= Model.ViewName #>.Edit, L("Psn:<#= Model.ViewName #>.u"));
            perm.AddChild(<#= moduleName #>Permissions.<#= Model.ViewName #>.Delete, L("Psn:<#= Model.ViewName #>.d"));
        }

        ...
    }

    
<#
    if (HasFileUpload(Model)) {
#>
  // == 3 ==
  // read this: https://docs.abp.io/en/abp/latest/Blob-Storing
  // 3.1. add "Volo.Abp.BlobStoring" package to the ".csproj"-file
  // 3.2. add [DependsOn(typeof(AbpBlobStoringModule))] to the ABP module class inside your project.
  // create a class  "<#= Model.ViewName #>BlobContainer" like seen
  //
    [BlobContainerName("<#= GetDashedName(Model.ViewName) #>")]
    public class <#= Model.ViewName #>BlobContainer {}
<#
    }
#>    


  // 3.3.create this class in the same folder as for the "<#= AbpServiceName(Model) #>"-class
  // 3.3.in the project XXX.HttpApi.Host.csproj
  //        in the module class 
  //           in the "ConfigureServices"-method write something like seen below:

    public override void ConfigureServices(ServiceConfigurationContext context)
    {
...
        Configure<AbpBlobStoringOptions>(options =>
        {
            options.Containers.Configure("<#= GetDashedName(Model.ViewName) #>", container =>
            {
                container.IsMultiTenant = false; // or true
                container.UseFileSystem(fileSystem =>
                {
                    fileSystem.BasePath = "C:\\temp\\<#= GetDashedName(Model.ViewName) #>"; // or any folder you like or use something like this configuration["AbpBlobStoringOptions:<#= Model.ViewName #>"]
                });
            });
        });

...
    }  




*/

namespace <#= webApiNameSpace #> {

//
// Please replace ApplicationService with a name of the ApplicationService of your project
//

    [Area(<#= moduleName #>RemoteServiceConsts.ModuleName)]
    [RemoteService(Name = <#= moduleName #>RemoteServiceConsts.RemoteServiceName)]
    [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Default)]
    [Route("<#= webApiRoutePrefix #>")]
    public class <#= AbpWebApiControllerName(Model) #>: <#= moduleName #>Controller, <#= AbpServiceInterfaceName(Model)  #>
    {

        private readonly <#= AbpServiceInterfaceName(Model)  #> appService;
<#
    if (HasFileUpload(Model)) {
#>
        IBlobContainer<<#= Model.ViewName #>BlobContainer> blobContainer;


        public <#= AbpWebApiControllerName(Model) #>(<#= AbpServiceInterfaceName(Model)  #> _appService, IBlobContainer<<#= Model.ViewName #>BlobContainer> _blobContainer)
        {
            blobContainer = _blobContainer;

<#
    } else {
#>
        public <#= AbpWebApiControllerName(Model) #>(<#= AbpServiceInterfaceName(Model)  #> _appService)
        {
<#
    }
#>
            appService = _appService;
        }

<# 
    if (Model.IsWebApiSelectAll) { 
#>
        [HttpGet]
        [Route("[controller]/<#= GetAllMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.FullScan)]
        public async Task<IEnumerable<<#= Model.ViewName #>>> <#= GetAllMethodName #>()
        {
            return await appService.<#= GetAllMethodName #>();
        } 
<#
    }
#>


<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        [HttpGet]
        [Route("[controller]/<#= GetWithFilterMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.FullScan)]
        public async Task<<#= Model.PageViewName #>> <#= GetWithFilterMethodName #>(<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (prop.IsUsedByfilter) { 
#>                
             [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>, 
             [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
            }
        } 
#>                 
            [FromQuery] string[] orderby = null, 
            [FromQuery] int? page =null, 
            [FromQuery] int? pagesize = null)
        {
            return await appService.<#= GetWithFilterMethodName #>(<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (prop.IsUsedByfilter) { 
#>                
                <#= GetFilterPropertyName(prop, Model) #>, 
                <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
            }
        } 
#>                 
                orderby, 
                page, 
                pagesize);
        } // the end of GetWithFilter()-method
<#
    }
#>

<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
                localRouteManyName = GetManyByRepUnqMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {
#>
//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//
<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>
        [HttpGet]
        [Route("[controller]/<#= localRouteName #>")]
        public async Task<<#= Model.ViewName #>> <#= localRouteName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
            } else { 
#>                
             [FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
                counter++;
            }
        } #>                
             )
        {
            return await appService.<#= localRouteName #>(<#
        int counter01 = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter01 > 0) { 
#>                
              , <#= GetFilterPropertyName(prop, Model) #>
<#
            } else { 
#>                
                <#= GetFilterPropertyName(prop, Model) #>
<#
                counter01++;
            }
        } #>                
             );
        } // the end of public GetOne()-method


        [HttpGet]
        [Route("[controller]/<#= localRouteManyName #>")]
        public async Task<<#= Model.PageViewName #>> <#= localRouteManyName #>(
<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
             [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
             [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        } 
      {
        bool hasForeign = false;
        bool hasForeignUnderPrim = false;
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            if (primKeys.Any(p => p == prop)) {
                if(IsUsedByForeignKey(prop, Model)) hasForeignUnderPrim = true;
                continue;
            }
            if(!IsUsedByForeignKey(prop, Model)) continue;
            hasForeign = true;
#>                
             [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
             [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        }
      }
#>            
            [FromQuery] string[] orderby = null, 
            [FromQuery] int? page =null, 
            [FromQuery] int? pagesize = null)
        {
            return await appService.<#= localRouteManyName #>(
<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
                <#= GetFilterPropertyName(prop, Model) #>,
                <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        } 
      {
        bool hasForeign = false;
        bool hasForeignUnderPrim = false;
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            if (primKeys.Any(p => p == prop)) {
                if(IsUsedByForeignKey(prop, Model)) hasForeignUnderPrim = true;
                continue;
            }
            if(!IsUsedByForeignKey(prop, Model)) continue;
            hasForeign = true;
#>                
                <#= GetFilterPropertyName(prop, Model) #>,
                <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        }
      }
#>            
                orderby, 
                page, 
                pagesize);

        }
<#
            } // the end of: if (!indIsCorrect) {...} else {}
        } // the end of: foreach(ModelViewUniqueKeyOfVwSerializable pk uniqueKeys) {}
    } // the end of: if (Model.IsWebApiSelectOneByPrimarykey)
#>

<# 
    if (Model.IsWebApiUpdate) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= UpdateOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties; 

#>
        [HttpPut]
        [Route("[controller]/<#= UpdateOneMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Edit)]
        public async Task<<#= Model.ViewName #>?> <#= UpdateOneMethodName #>([FromBody] <#= Model.ViewName#> viewToUpdate)
        {
            return await appService.<#= UpdateOneMethodName #>(viewToUpdate);
        }
<#
        } // the end of: if(indIsCorrect) {} else {}
    } // the end of: if (Model.IsWebApiAdd)

#>

<# 
    if (Model.IsWebApiAdd) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= AddOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;
            bool hasFU = HasFileUpload(Model);
            if (hasFU) {
                string fileNameProp = GetFileUploadViewPropertyName(Model);
#>

        [HttpPost]
        [Route("[controller]/<#= AddOneMethodName #>NotImplemented")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Create)]
        public Task<<#= Model.ViewName #>> <#= AddOneMethodName #>(<#= Model.ViewName#> viewToAdd) {
            throw new System.Exception("Not implemented. Never call this method.");
        }

        [HttpPost]
        [Route("[controller]/<#= AddOneMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Create)]
        public async Task<<#= Model.ViewName #>> <#= AddOneMethodName #>()
        {
            <#= Model.ViewName #> viewToAdd = new <#= Model.ViewName #>();

            var request = HttpContext.Request;
            // validation of Content-Type
            // 1. first, it must be a form-data request
            // 2. a boundary should be found in the Content-Type
            if (!request.HasFormContentType ||
                !Microsoft.Net.Http.Headers.MediaTypeHeaderValue.TryParse(request.ContentType, out var mediaTypeHeader) ||
                string.IsNullOrEmpty(mediaTypeHeader.Boundary.Value))
            {
                throw new System.Exception("Unsupported Media Type");
            }
            var boundary = Microsoft.Net.Http.Headers.HeaderUtilities.RemoveQuotes(mediaTypeHeader.Boundary.Value).Value;
            var reader = new Microsoft.AspNetCore.WebUtilities.MultipartReader(boundary, request.Body);
            var section = await reader.ReadNextSectionAsync();


            while (section != null)
            {
                var hasContentDispositionHeader = 
                    Microsoft.Net.Http.Headers.ContentDispositionHeaderValue.TryParse(section.ContentDisposition, out var contentDisposition);
                if (hasContentDispositionHeader)
                {
                    if (hasContentDispositionHeader && 
                        contentDisposition.DispositionType.Equals("form-data") &&
                        !string.IsNullOrEmpty(contentDisposition.FileName.Value))
                    {
                        viewToAdd.<#= fileNameProp #> = contentDisposition.FileName.Value;
                        viewToAdd = await appService.<#= AddOneMethodName #>(viewToAdd);

                        string blbNm = "<#= Model.ViewName #>";
<#
            for(int pkId= 0; pkId < primKeys.Count; pkId++) {
                ModelViewEntityPropertySerializable entityProp = GetRootEntityProperty(primKeys[pkId], Model);
#>
                        if(viewToAdd.<#= entityProp.OriginalPropertyName #> != null) {
<#
                if (IsStringPropertyTypeNameEx(entityProp)) {
#>
                            blbNm += "/" + viewToAdd.<#= entityProp.OriginalPropertyName #>.Replace('?', 'q').Replace('%', 'p').Replace('\\', 's').Replace('/', 'b').Replace('{', 'm').Replace('}', 'n');
<#
                } else {
#>
                            blbNm += "/" + viewToAdd.<#= entityProp.OriginalPropertyName #>.ToString().Replace('?', 'q').Replace('%', 'p').Replace('\\', 's').Replace('/', 'b').Replace('{', 'm').Replace('}', 'n');
<#
                }
#>
                        } else {
                            blbNm += "/NULL";
                        }
<#
            }
#>
                        await blobContainer.SaveAsync(blbNm, section.Body, true);
                    } 
                    else
                    {
<#
                {
                    bool isNotFrst = false;
                    foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
                        if(Model.UseOnlyRootPropsForSelect) {
                            if(!string.IsNullOrEmpty(prop.ForeignKeyName)) continue;
                            if(!string.IsNullOrEmpty(prop.ForeignKeyNameChain)) continue;
                        }
                        if(IsFileUpload(prop, Model)) continue;
                        if(isNotFrst) {
#>
                        else if (contentDisposition.Name == "<#= prop.ViewPropertyName #>") {
<#                      
                        } else { 
#>
                        if (contentDisposition.Name == "<#= prop.ViewPropertyName #>") {
<#                      
                            isNotFrst = true;
                        } // the end of if(isNotFrst) {} else {}
                        if (IsStringPropertyTypeName(prop)) {
#>
                            viewToAdd.<#= GetTypeScriptPropertyName(prop, Model) #> = await section.ReadAsStringAsync(); // using Microsoft.AspNetCore.WebUtilities;
<#
                        } else {
#>
                            string sv = await section.ReadAsStringAsync(); // using Microsoft.AspNetCore.WebUtilities;
                            if(!string.IsNullOrEmpty(sv)) {
                                <#= prop.UnderlyingTypeName #> v;
                                if (<#= prop.UnderlyingTypeName #>.TryParse(sv, out v)) {
                                    viewToAdd.<#= GetTypeScriptPropertyName(prop, Model) #> = v;
                                }
                            }
<#
                        } // if (IsStringPropertyTypeName(prop)) {} else {}
#>
                        }
<#                      
                    } // the end of foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {}
                } // the end of { bool isNotFrst = false;
#>
                    }
                }
                section = await reader.ReadNextSectionAsync();
            }
            return viewToAdd;
        }
<#
            } else { // the end of if (hasFU) {}
#>
        [HttpPost]
        [Route("[controller]/<#= AddOneMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Create)]
        public async Task<<#= Model.ViewName #>> <#= AddOneMethodName #>([FromBody] <#= Model.ViewName#> viewToAdd)
        {
            return await appService.<#= AddOneMethodName #>(viewToAdd);
        }
<#
            } // the end of: if (hasFU) {} else {}
        } // the end of: if(indIsCorrect) {}
    } // the end of if (Model.IsWebApiAdd)
#>


<# 
    if (Model.IsWebApiDelete) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;

#>
        [HttpDelete]
        [Route("[controller]/<#= DeleteOneMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Delete)]
        public async Task<<#= Model.ViewName #>> <#= DeleteOneMethodName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
            } else { 
#>                
             [FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
                counter++;
            } 
        } #>                
           )
        {
            <#= Model.ViewName #> entityToDelete = await appService.<#= DeleteOneMethodName #>(<#
        int counter09 = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter09 > 0) { 
#>                
                ,<#= GetFilterPropertyName(prop, Model)#>
<#
            } else { 
#>                
                 <#= GetFilterPropertyName(prop, Model)#>
<#
                counter09++;
            } 
        } #>                
            );

<#
        if (HasFileUpload(Model)) {
#>
                string blbNm = "<#= Model.ViewName #>";
<#
            for(int pkId= 0; pkId < primKeys.Count; pkId++) {
                ModelViewEntityPropertySerializable entityProp = GetRootEntityProperty(primKeys[pkId], Model);
#>
                if(entityToDelete.<#= entityProp.OriginalPropertyName #> != null) {
<#
                if (IsStringPropertyTypeNameEx(entityProp)) {
#>
                    blbNm += "/" + entityToDelete.<#= entityProp.OriginalPropertyName #>.Replace('?', 'q').Replace('%', 'p').Replace('\\', 's').Replace('/', 'b').Replace('{', 'm').Replace('}', 'n');
<#
                } else {
#>
                    blbNm += "/" + entityToDelete.<#= entityProp.OriginalPropertyName #>.ToString().Replace('?', 'q').Replace('%', 'p').Replace('\\', 's').Replace('/', 'b').Replace('{', 'm').Replace('}', 'n');
<#
                }
#>
                } else {
                    blbNm += "/NULL";
                }
<#
            }
#>
                await blobContainer.DeleteAsync(blbNm);
<#
        } 
#>
            return entityToDelete;
        }
<#
        } // the end of: if(!indIsCorrect) {} else {}
    } // the end of if: (Model.IsWebApiDelete)
#>

<#
    if (HasFileUpload(Model)) {
        string fileNameProp = GetFileUploadViewPropertyName(Model);
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;
#>



        [HttpGet]
        [Route("[controller]/<#= DownloadOneMethodName #>")]
        [Authorize(<#= moduleName #>Permissions.<#= Model.ViewName #>.Default)]
        public async Task<IActionResult> <#= DownloadOneMethodName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
            } else { 
#>                
             [FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
                counter++;
            } 
        } #>                
           )
        {

            <#= Model.ViewName #> entityToDownload = await appService.<#= GetOneMethodName #>(<#
        int counter09 = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter09 > 0) { 
#>                
                ,<#= GetFilterPropertyName(prop, Model)#>
<#
            } else { 
#>                
                 <#= GetFilterPropertyName(prop, Model)#>
<#
                counter09++;
            } 
        } #>                
            );
                string blbNm = "<#= Model.ViewName #>";
<#
            for(int pkId= 0; pkId < primKeys.Count; pkId++) {
                ModelViewEntityPropertySerializable entityProp = GetRootEntityProperty(primKeys[pkId], Model);
#>
                if(entityToDownload.<#= entityProp.OriginalPropertyName #> != null) {
<#
                if (IsStringPropertyTypeNameEx(entityProp)) {
#>
                    blbNm += "/" + entityToDownload.<#= entityProp.OriginalPropertyName #>.Replace('?', 'q').Replace('%', 'p').Replace('\\', 's').Replace('/', 'b').Replace('{', 'm').Replace('}', 'n');
<#
                } else {
#>
                    blbNm += "/" + entityToDownload.<#= entityProp.OriginalPropertyName #>.ToString().Replace('?', 'q').Replace('%', 'p').Replace('\\', 's').Replace('/', 'b').Replace('{', 'm').Replace('}', 'n');
<#
                }
#>
                } else {
                    blbNm += "/NULL";
                }
<#
            }
#>
                var data =  await blobContainer.GetAsync(blbNm);
                return File(data,  "application/octet-stream", entityToDownload.<#= fileNameProp #> );
        }
<#
        } //  the end of if(!indIsCorrect) {} else {}
    } // the end of if (HasFileUpload(Model)) {}
#>


    }
  
}

