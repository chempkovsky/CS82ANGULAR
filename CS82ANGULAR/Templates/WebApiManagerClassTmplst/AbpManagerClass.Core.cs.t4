<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\CommonScripts\AbpRepoLevel.t4" #>
/*
#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LinqKit;

<#

string GetAbpGetAsyncMethodName                = "GetAsync";
string GetAbpFindAsyncMethodName               = "FindAsync";
string GetAbpInsertAsyncMethodName             = "InsertAsync";
string GetAbpUpdateAsyncMethodName             = "UpdateAsync";
string GetAbpDeleteAsyncMethodName             = "DeleteAsync";
string GetAbpGetListAsyncMethodName            = "GetListAsync";
string GetAbpGetPagedListAsyncMethodName       = "GetPagedListAsync";
string GetAbpGetCountAsyncMethodName           = "GetCountAsync";



    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string GetOneByMethodNamePrefix     = "getoneby";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";
    string GetManyByRepPrimMethodNamePrefix = "getmanybyrepprim";
    string GetManyByRepUnqMethodNamePrefix  = "getmanybyrepunq";

    string OperatorSufix = "Oprtr";
    string domainManagerNameSpace = GetDestinationNameSpace(Model);
    string repoInterfaceNameSpace = GetRepoInterfaceNameSpace(Model);

    string rootEntityNameSpace = GetRootEntityNameSpace(Model);
    string dbContextNameSpace = GetDbContextNameSpace(Context);
    string viewModelNameSpace = GetViewModelNameSpace(Model);
    string domainViewModelNameSpace = GetDomainViewModelNameSpace(Model);

    string webApiServicePrefix = GetWebApiServicePrefix(Model);
    string webApiRoutePrefix =  GetWebApiRoutePrefix(Model);

    List<String> locNavigationPaths = GetNavigationPaths(Model);

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        
        GetModelUniqueKeys(Model, uniqueKeys);
    }

#>
<# if (!string.IsNullOrEmpty(dbContextNameSpace)) {
 if (!string.Equals(dbContextNameSpace, domainManagerNameSpace)) { #>
using <#= dbContextNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(viewModelNameSpace)) {
 if (!string.Equals(viewModelNameSpace, domainManagerNameSpace)) {#>
using <#= viewModelNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(domainViewModelNameSpace)) {
 if (!string.Equals(domainViewModelNameSpace, domainManagerNameSpace)) {#>
using <#= domainViewModelNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(rootEntityNameSpace)) {
 if (!string.Equals(rootEntityNameSpace, domainManagerNameSpace)) {#>
using <#= rootEntityNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(repoInterfaceNameSpace)) {
 if (!string.Equals(repoInterfaceNameSpace, domainManagerNameSpace)) {#>
using <#= repoInterfaceNameSpace #>;
<# }} #>




namespace <#= domainManagerNameSpace #> {

    public class <#= AbpManagerName(Model) #>: DomainService
    {

        protected <#= AbpManagerName(Model) #> repo { get; }

        public <#= Model.WebApiServiceName #>(<#= AbpRepositoryInterfaceName(Model) #> _repo)
        {
            repo = _repo;
        }


<# 
    if (Model.IsWebApiSelectAll) { 
#>
        public async Task<IEnumerable<<#= Model.DomainViewName #>>> <#= GetAllMethodName #>()
        {
        }
<#
    }
#>


<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        public async Task<<#= Model.DomainPageViewName #>> <#= GetWithFilterMethodName #>(<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (prop.IsUsedByfilter) { 
#>                
             <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>, 
             string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
            }
        } 
#>                 
            string[] orderby = null, 
            int? page =null, 
            int? pagesize = null) 
        {
        }
<#
    }
#>


<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        public async Task<<#= Model.DomainPageViewName #>> <#= GetWithFilterMethodName #>(<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (prop.IsUsedByfilter) { 
#>                
             <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>, 
             string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
            }
        } 
#>                 
            string[] orderby = null, 
            int? page =null, 
            int? pagesize = null)
        {
        }
<#
    }
#>

<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
                localRouteManyName = GetManyByRepUnqMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {

#>
//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//
<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>
        public async Task<<#= Model.DomainViewName #>> <#= localRouteName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,<#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
            } else { 
#>                
             <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
                counter++;
            }
        } #>                
             ) 
        {
        }

        public async Task<<#= Model.DomainPageViewName #>> <#= localRouteManyName #>(
<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
             <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
             string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        } 
        bool hasForeign = false;
        bool hasForeignUnderPrim = false;
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            if (primKeys.Any(p => p == prop)) {
                if(IsUsedByForeignKey(prop, Model)) hasForeignUnderPrim = true;
                continue;
            }
            if(!IsUsedByForeignKey(prop, Model)) continue;
            hasForeign = true;
#>                
             <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
             string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
        }
#>            
            string[] orderby = null, 
            int? page =null, 
            int? pagesize = null);
        {
        }

<#
            } // the end of: if (!indIsCorrect) {...} else {}
        } // the end of: foreach(ModelViewUniqueKeyOfVwSerializable pk uniqueKeys) {}
    } // the end of: if (Model.IsWebApiSelectOneByPrimarykey)
#>

<# 
    if (Model.IsWebApiUpdate) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= UpdateOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties; 

#>
        public async Task<<#= Model.DomainViewName #>> <#= UpdateOneMethodName #>(<#= Model.ViewName#> viewToUpdate)
        {
        }
<#
        } // the end of: if(indIsCorrect) {} else {}
    } // the end of: if (Model.IsWebApiAdd)

#>

<# 
    if (Model.IsWebApiAdd) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= AddOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;
#>
        public async Task<<#= Model.DomainViewName #>> <#= AddOneMethodName #>(<#= Model.ViewName#> viewToAdd)
        {
        }
<#
        } // the end of: if(indIsCorrect) {}
    } // the end of if (Model.IsWebApiAdd)
#>


<# 
    if (Model.IsWebApiDelete) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;

#>
        public async Task<<#= Model.DomainViewName #>> <#= DeleteOneMethodName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,<#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
            } else { 
#>                
             <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
                counter++;
            } 
        } #>                
           )
        {
        }
<#
        } // the end of: if(!indIsCorrect) {} else {}
    } // the end of if: (Model.IsWebApiDelete)
#>



    }
}

*/