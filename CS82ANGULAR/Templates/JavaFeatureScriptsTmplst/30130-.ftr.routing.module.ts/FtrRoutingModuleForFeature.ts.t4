<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.AllowedFileTypesSerializable" name="AllowedFileTypes" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.FeatureContextSerializable" name="FeatureContext" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.FeatureSerializable" name="Feature" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>

<#
    string ActionParamName              = "mode";  // there exists one copy per url for Add/Update/Delete. it should be the last item
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";
    string ActionParamCancelMode        = "cancel";

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";


    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";

    string ShowErrorMethodName          = "showError";
    string OnAfterSubmitMethodName      = "onAfterSubmit";
    string ShowFilterPropName           = "showFilter";
    string TitlePropName                = "title";
    
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string ftrFeatureRoutingModuleFolder    = "30130-.ftr.routing.module.ts";
    string featureRoutingModuleClassName    = GetFeatureModuleClassName(Feature, ftrFeatureRoutingModuleFolder);

    string ftrFeatureComponentFolder        = "30100-.ftr.component.ts";
    string featureClassName                 = GetFeatureComponentClassNameWithAnglr(AngularJsonFile, Feature, ftrFeatureComponentFolder, ftrFeatureRoutingModuleFolder);

    string appSettingServiceFolder          = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName       = GetCommonServiceClassNameForFeatureWithAnglr(AngularJsonFile, Feature, Context, appSettingServiceFolder, ftrFeatureRoutingModuleFolder);


    string rlistComponentFolder             = "01920-Rlist.component.ts";
    string rdlistComponentFolder            = "02020-Rdlist.component.ts";
    string rdlLazyModuleFolder              = "02050-Rdl-lazy.routing.module.ts";


    string HiddenFilterPrefix           = "hf";
    string VPrefix                      = "View";
    string APrefix                      = "Add";
    string UPrefix                      = "Upd";
    string DPrefix                      = "Del";
    string uidParamName                 = "uid"; 
    string OutletNamePrefix             = "loltnm";
    string OutletParent                 = "oltParent";
    string IsDetailPropName             = "isdtl";
    string IdPrefix                     = "id";
    string routeDataViewNamePropName        = "vn";
    string routeDataViewActionPropName      = "va";
    string routeDataShowMultiSelectPropName = "ms";
    string NavPrefix                        = "np";
    string RDLPrefix                        = "RDL";
    string routeShowFilterPropName          = "sf";
    string routeDepthParamName              = "dp"; 
    string DepthParamName                   = "depth"; 
    string routeMaxHeightPropName           = "mh";
    string routeFilterMaxHeightPropName     = "fh";
    string routeOutletParent                = "oltp";

    bool isRist = false;
    bool isRDlist = false;
    ModelViewSerializable Model = null;
    if(Feature.FeatureItems!=null) {
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            if(isRoutedItem(AllowedFileTypes, featureItemSerializable.FileType)) {
                Model = GetViewByName(Context, featureItemSerializable.ViewName);
                isRist = featureItemSerializable.FileType == rlistComponentFolder;
                isRDlist = featureItemSerializable.FileType == rdlistComponentFolder;
                break;
            }
        }
    }

    string rvLazyModuleFolder           = "01970-Rv-lazy.routing.module.ts";
    string raLazyModuleFolder           = "01972-Ra-lazy.routing.module.ts";
    string ruLazyModuleFolder           = "01974-Ru-lazy.routing.module.ts";
    string rdLazyModuleFolder           = "01976-Rd-lazy.routing.module.ts";
    string rlLazyModuleFolder           = "01978-Rl-lazy.routing.module.ts";

    List<Tuple<ModelViewSerializable, string, int>> nodes = new List<Tuple<ModelViewSerializable, string, int>>();
    if(isRist)
    {
        nodes = GetRouteNodes(Model, nodes, null, HiddenFilterPrefix);
    } else if(isRDlist) {
        nodes = GetRouteNodes(Model, nodes, RDLPrefix, HiddenFilterPrefix);
    }

#>

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { <#= appSettingServiceClassName #> } from '<#=  GetFeatureCommonFolderNameWithAnglr(AngularJsonFile, Feature, Context, appSettingServiceFolder, ftrFeatureRoutingModuleFolder) #>';
import { <#= appSettingServiceClassName + "Activator" #> } from '<#=  GetFeatureCommonFolderNameWithAnglr(AngularJsonFile, Feature, Context, appSettingServiceFolder, ftrFeatureRoutingModuleFolder) #>';
import { <#= featureClassName #> } from '<#= GetFeatureComponentFolderNameWithAnglr(AngularJsonFile, Feature, ftrFeatureComponentFolder, ftrFeatureRoutingModuleFolder) #>';


const routes: Routes = [
<#
    if ((Model != null) && (nodes.Count > 0)) {
#>
    { path: '',   redirectTo: '<#= nodes[0].Item2 #>', pathMatch: 'full' },
<#
    }
#>
    {
        path: '',
        component: <#= featureClassName #>,
        canActivate: [<#= appSettingServiceClassName + "Activator" #>],
<#
    if (Model != null) {
#>
        canActivateChild: [<#= appSettingServiceClassName #>],
        children: [
// r-routing
<#
if(isRist) {
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;
        List<ModelViewPropertyOfVwSerializable> aModelPrincipals = GetModelPrimaryKeyProps(aModel);
        string fileNm_rl  = null;
        string rlLazyModuleImport =  null;
        if(aModel.CommonStaffs.Any(c => c.FileType == rlLazyModuleFolder)) {
            fileNm_rl  = GetFeatureCrossComponentFolderNameWithAnglr(AngularJsonFile, Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rlLazyModuleFolder);
            rlLazyModuleImport = GenerateFeatureLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rlLazyModuleFolder, Feature, ftrFeatureRoutingModuleFolder);
        }

        string fileNm_rv  = null;
        string rvLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == rvLazyModuleFolder)) {
            fileNm_rv  = GetFeatureCrossComponentFolderNameWithAnglr(AngularJsonFile, Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rvLazyModuleFolder);
            rvLazyModuleImport = GenerateFeatureLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rvLazyModuleFolder, Feature, ftrFeatureRoutingModuleFolder);
        }

        string fileNm_ra  = null;
        string raLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == raLazyModuleFolder)) {
            fileNm_ra  = GetFeatureCrossComponentFolderNameWithAnglr(AngularJsonFile, Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, raLazyModuleFolder);
            raLazyModuleImport = GenerateFeatureLoadChildrenImportWithAnglr(AngularJsonFile, aModel, raLazyModuleFolder, Feature, ftrFeatureRoutingModuleFolder);
        }

        string fileNm_ru  = null;
        string ruLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == ruLazyModuleFolder)) {
            fileNm_ru  = GetFeatureCrossComponentFolderNameWithAnglr(AngularJsonFile, Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, ruLazyModuleFolder);
            ruLazyModuleImport = GenerateFeatureLoadChildrenImportWithAnglr(AngularJsonFile, aModel, ruLazyModuleFolder, Feature, ftrFeatureRoutingModuleFolder);
        }

        string fileNm_rd  = null;
        string rdLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == rdLazyModuleFolder)) {
            fileNm_rd  = GetFeatureCrossComponentFolderNameWithAnglr(AngularJsonFile, Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rdLazyModuleFolder);
            rdLazyModuleImport = GenerateFeatureLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rdLazyModuleFolder, Feature, ftrFeatureRoutingModuleFolder);
        }

#>

//
// Info: Root Master View  [<#= Model.ViewName #>] 
// Info: Detail View  [<#= aModel.ViewName #>] 
//
<#

        if(aModel.IsWebApiSelectManyWithPagination) {
            if(!string.IsNullOrEmpty(fileNm_rl)  && (!string.IsNullOrEmpty(rlLazyModuleImport))) {



                if(aModel.IsWebApiSelectOneByPrimarykey) {
                    if(!string.IsNullOrEmpty(fileNm_rv) && (!string.IsNullOrEmpty(rvLazyModuleImport))) {
#>
    { path: '<#= node.Item2 + "/" + VPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() + "/:" + IdPrefix + CurrDepth.ToString() #>', 
        <#= rvLazyModuleImport #>,
        data: { <#= routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'v', /* <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: 'View <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + CurrDepth.ToString() #>', <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rvLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectOneByPrimarykey is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }




                if(aModel.IsWebApiAdd) {
                    if(!string.IsNullOrEmpty(fileNm_ra)  && (!string.IsNullOrEmpty(raLazyModuleImport))) {
#>
    { path: '<#= node.Item2 + "/" + APrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() #>', 
        <#= raLazyModuleImport #>,
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'a', /* <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: 'Add <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= raLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiAdd) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiAdd is set to false
//
<#
                } // if(aModel.IsWebApiAdd) { ... } else { ... }




                if(aModel.IsWebApiUpdate) {
                    if(!string.IsNullOrEmpty(fileNm_ru)  && (!string.IsNullOrEmpty(ruLazyModuleImport))) {
#>
    { path: '<#= node.Item2 + "/" + UPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() + "/:" + IdPrefix + CurrDepth.ToString() #>', 
        <#= ruLazyModuleImport #>,
        data: { <#= routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'u', /* <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: 'Update <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + CurrDepth.ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= ruLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiUpdate) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiUpdate is set to false
//
<#
                } // if(aModel.IsWebApiUpdate) { ... } else { ... }




                if(aModel.IsWebApiDelete) {
                    if(!string.IsNullOrEmpty(fileNm_rd)  && (!string.IsNullOrEmpty(rdLazyModuleImport))) {
#>
    { path: '<#= node.Item2 + "/" + DPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() + "/:" + IdPrefix + CurrDepth.ToString() #>', 
        <#= rdLazyModuleImport #>,
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'd', /* <#= routeShowFilterPropName #>: true, <#= TitlePropName #>: 'Delete <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + CurrDepth.ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rdLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiDelete) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiDelete is set to false
//
<#
                } // if(aModel.IsWebApiDelete) { ... } else { ... }


                if(node.Item3 > 1) {

#>
    { path: '<#= node.Item2 #>', 
        <#= rlLazyModuleImport #>,
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true,  <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /*  <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + node.Item3.ToString() #>',  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#

                } else {
#>
    { path: '<#= node.Item2 #>', 
        <#= rlLazyModuleImport #>,
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true,  <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /* <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#
                } // if(node.Item3 > 1) { ... } else { ... }



            } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rlLazyModuleFolder #>] has not been generated yet
//
<#
            }
        } else { // if(aModel.IsWebApiSelectManyWithPagination) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectManyWithPagination is set to false
//
<#
        } // if(aModel.IsWebApiSelectManyWithPagination) { } else { ... }
    }
} ///// if(!isRist) { ... }
#>

// rd-routing
<#
if(isRDlist) {
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;
        List<ModelViewPropertyOfVwSerializable> aModelPrincipals = GetModelPrimaryKeyProps(aModel);
        // string fileNm_rdl = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rdlLazyModuleFolder);
        string rdlLazyModuleImport = null;
        if (aModel.CommonStaffs.Any(c => c.FileType == rdlLazyModuleFolder)) {
            rdlLazyModuleImport = GenerateFeatureLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rdlLazyModuleFolder, Feature, ftrFeatureRoutingModuleFolder);
        }
        
#>

//
// Info: Root Master View  [<#= Model.ViewName #>] 
// Info: Detail View  [<#= aModel.ViewName #>] 
//
<#

        if(aModel.IsWebApiSelectManyWithPagination) {
            if(!string.IsNullOrEmpty(rdlLazyModuleImport)  && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rdlLazyModuleFolder)))) {




                if(node.Item3 > 1) {
#>
    { path: '<#= node.Item2 #>', 
        <#= rdlLazyModuleImport #>,
        data: { <#= routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true, <#= NavPrefix #>: '<#= RDLPrefix #>', <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /* <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + node.Item3.ToString() #>',  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#

                } else {
#>
    { path: '<#= node.Item2 #>', 
        <#= rdlLazyModuleImport #>,
        data: { <#= routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true, <#= NavPrefix #>: '<#= RDLPrefix #>', <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /* <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#
                } // if(node.Item3 > 1) { ... } else { ... }



            } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rdlLazyModuleFolder #>] has not been generated yet
//
<#
            }
        } else { // if(aModel.IsWebApiSelectManyWithPagination) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectManyWithPagination is set to false
//
<#
        } // if(aModel.IsWebApiSelectManyWithPagination) { } else { ... }
    }
} ///// if(isRDlist) {...}
#>
        ] // children: [...]
<#
    }
#>

    },
]; // const routes: Routes = [...]

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class <#= featureRoutingModuleClassName #> { }


<#+

    List<Tuple<ModelViewSerializable, string, int>> GetRouteNodes(ModelViewSerializable model, List<Tuple<ModelViewSerializable, string, int>> aNodes, string aRDLPrefix, string aHiddenFilterPrefix) 
    {
        if(aNodes == null) aNodes = new List<Tuple<ModelViewSerializable, string, int>>();
        if(String.IsNullOrEmpty(aRDLPrefix)) aRDLPrefix = "";
        if(String.IsNullOrEmpty(aHiddenFilterPrefix)) aHiddenFilterPrefix = "";
        aNodes.Clear();
        if(model == null) return aNodes;
        Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> tmpSearchSchema = null;
        List<string> detailViewNames = new List<string>();
        // Model, url, depth
        aNodes.Add(new Tuple<ModelViewSerializable, string, int>( model, aRDLPrefix + model.ViewName, 1));

        int currId= 0;
        while(currId < aNodes.Count) {
            Tuple<ModelViewSerializable, string, int> masterNode = aNodes[currId];
            ModelViewSerializable masterView = masterNode.Item1;
            List<ModelViewPropertyOfVwSerializable> masterPrincipals = GetModelPrimaryKeyProps(masterView);
            string CurrPath = masterNode.Item2;
            int CurrDepth = masterNode.Item3 + 1;
            List<string> viewNames = GetDetailViews(masterView, Context, null);
            foreach(string viewName in viewNames) {
                ModelViewSerializable detailView = GetViewByName(Context, viewName);
                if(aNodes.Count(p => p.Item1 == detailView) > 2) {
                    continue;
                }
                string newPath = CurrPath + "/" + aRDLPrefix + viewName;
                if (CurrDepth > 1) {
                    newPath = newPath +"/:" + aHiddenFilterPrefix + CurrDepth.ToString();
                }
                List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(masterView, detailView, null);
                detailViewNames.Clear();
                bool isM2m = false;
                if(IsTableMatchesIndex(detailView)) {
                    if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                        if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                            isM2m = true;
                        }
                    }
                }
                foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                    if(isM2m) {
                        // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                        tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                        if (tmpSearchSchema != null) {
                            int  cnt = 0;
                            if(tmpSearchSchema.Item5 == null) continue;
                            if(tmpSearchSchema.Item5.Count != 1) continue;
                            if(tmpSearchSchema.Item4 != null) continue;
                            if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                            ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                            string newPathEx = CurrPath + "/" + aRDLPrefix + viewToNavigate.ViewName;
                            if (CurrDepth > 1) {
                                newPathEx = newPathEx +"/:" + aHiddenFilterPrefix + CurrDepth.ToString();
                            }
                            if (!detailViewNames.Any(v => v == viewToNavigate.ViewName)) {
                                aNodes.Add(new Tuple<ModelViewSerializable, string, int>(viewToNavigate, newPathEx, CurrDepth));
                                detailViewNames.Add(viewToNavigate.ViewName);
                            }
                            continue;
                        }
                    }
                    if (!detailViewNames.Any(v => v == detailView.ViewName)) {
                        aNodes.Add(new Tuple<ModelViewSerializable, string, int>(detailView, newPath, CurrDepth));
                        detailViewNames.Add(detailView.ViewName);
                    }
                }
            }
            currId++;
        }
        return aNodes;
    }

#>