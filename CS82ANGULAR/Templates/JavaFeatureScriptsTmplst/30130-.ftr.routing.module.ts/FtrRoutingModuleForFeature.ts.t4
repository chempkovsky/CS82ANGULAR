<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.AllowedFileTypesSerializable" name="AllowedFileTypes" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.FeatureContextSerializable" name="FeatureContext" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.FeatureSerializable" name="Feature" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string ActionParamName              = "mode";  // there exists one copy per url for Add/Update/Delete. it should be the last item
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";
    string ActionParamCancelMode        = "cancel";

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";


    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";

    string ShowErrorMethodName          = "showError";
    string OnAfterSubmitMethodName      = "onAfterSubmit";
    string ShowFilterPropName           = "showFilter";
    string TitlePropName                = "title";
    
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";


    string appSettingServiceFolder          = "00015-app-glbl-settings.service.ts";


    string rlistComponentFolder             = "01920-Rlist.component.ts";
    string rdlistComponentFolder            = "02020-Rdlist.component.ts";
    string rdlLazyModuleFolder              = "02050-Rdl-lazy.routing.module.ts";

    string ftrFeatureComponentFolder        = "30100-.ftr.component.ts";
    string ftrFeatureRoutingModuleFolder    = "30130-.ftr.routing.module.ts";

    string featureClassName                 = GetFeatureComponentClassName(Feature, ftrFeatureComponentFolder);
    string featureRoutingModuleClassName    = GetFeatureModuleClassName(Feature, ftrFeatureRoutingModuleFolder);
    string appSettingServiceClassName       = GetCommonServiceClassName(Context, appSettingServiceFolder);

    string HiddenFilterPrefix           = "hf";
    string VPrefix                      = "View";
    string APrefix                      = "Add";
    string UPrefix                      = "Upd";
    string DPrefix                      = "Del";
    string uidParamName                 = "uid"; 
    string OutletNamePrefix             = "loltnm";
    string OutletParent                 = "oltParent";
    string IsDetailPropName             = "isdtl";
    string IdPrefix                     = "id";
    string routeDataViewNamePropName        = "vn";
    string routeDataViewActionPropName      = "va";
    string routeDataShowMultiSelectPropName = "ms";
    string NavPrefix                        = "np";
    string RDLPrefix                        = "RDL";
    string routeShowFilterPropName          = "sf";
    string routeDepthParamName              = "dp"; 
    string DepthParamName                   = "depth"; 
    string routeMaxHeightPropName           = "mh";
    string routeFilterMaxHeightPropName     = "fh";

    bool isRist = false;
    bool isRDlist = false;
    ModelViewSerializable Model = null;
    if(Feature.FeatureItems!=null) {
        foreach(FeatureItemSerializable featureItemSerializable in Feature.FeatureItems) {
            if(isRoutedItem(AllowedFileTypes, featureItemSerializable.FileType)) {
                Model = GetViewByName(Context, featureItemSerializable.ViewName);
                isRist = featureItemSerializable.FileType == rlistComponentFolder;
                isRDlist = featureItemSerializable.FileType == rdlistComponentFolder;
                break;
            }
        }
    }

    string rvLazyModuleFolder           = "01970-Rv-lazy.routing.module.ts";
    string raLazyModuleFolder           = "01972-Ra-lazy.routing.module.ts";
    string ruLazyModuleFolder           = "01974-Ru-lazy.routing.module.ts";
    string rdLazyModuleFolder           = "01976-Rd-lazy.routing.module.ts";
    string rlLazyModuleFolder           = "01978-Rl-lazy.routing.module.ts";

    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> tmpSearchSchema = null;
    List<Tuple<ModelViewSerializable, string, int>> nodes = new List<Tuple<ModelViewSerializable, string, int>>();
    List<string> detailViewNames = new List<string>();
    List<string> allViewNames= new List<string>();

    if(isRist || isRDlist)
    {
        // Model, url, depth
        nodes.Add(new Tuple<ModelViewSerializable, string, int>( Model, Model.ViewName, 1));
        allViewNames.Add(Model.ViewName);

        int currId= 0;
        while(currId < nodes.Count) {
            Tuple<ModelViewSerializable, string, int> masterNode = nodes[currId];
            ModelViewSerializable masterView = masterNode.Item1;
            List<ModelViewPropertyOfVwSerializable> masterPrincipals = GetModelPrimaryKeyProps(masterView);
            string CurrPath = masterNode.Item2;
            int CurrDepth = masterNode.Item3 + 1;
            List<string> viewNames = GetDetailViews(masterView, Context, null);
            foreach(string viewName in viewNames) {
                ModelViewSerializable detailView = GetViewByName(Context, viewName);
                if(nodes.Count(p => p.Item1 == detailView) > 2) {
                    continue;
                }
                string newPath = CurrPath + "/" + viewName;
                if (CurrDepth > 1) {
                    newPath = newPath +"/:" + HiddenFilterPrefix + CurrDepth.ToString();
                }
                List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(masterView, detailView, null);
                detailViewNames.Clear();
                bool isM2m = false;
                if(IsTableMatchesIndex(detailView)) {
                    if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                        if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                            isM2m = true;
                        }
                    }
                }
                foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                    if(isM2m) {
                        // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                        tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                        if (tmpSearchSchema != null) {
                            int  cnt = 0;
                            if(tmpSearchSchema.Item5 == null) continue;
                            if(tmpSearchSchema.Item5.Count != 1) continue;
                            if(tmpSearchSchema.Item4 != null) continue;
                            if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                            ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                            string newPathEx = CurrPath + "/" + viewToNavigate.ViewName;
                            if (CurrDepth > 1) {
                                newPathEx = newPathEx +"/:" + HiddenFilterPrefix + CurrDepth.ToString();
                            }
                            if (!detailViewNames.Any(v => v == viewToNavigate.ViewName)) {
                                nodes.Add(new Tuple<ModelViewSerializable, string, int>(viewToNavigate, newPathEx, CurrDepth));
                                detailViewNames.Add(viewToNavigate.ViewName);
                            }
                            continue;
                        }
                    }
                    if (!detailViewNames.Any(v => v == detailView.ViewName)) {
                        nodes.Add(new Tuple<ModelViewSerializable, string, int>(detailView, newPath, CurrDepth));
                        detailViewNames.Add(detailView.ViewName);
                    }
                }
            }
            currId++;
        }
    }

#>

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { <#= appSettingServiceClassName #> } from '<#=  GetFeatureCommonFolderName(Feature, Context,  appSettingServiceFolder, ftrFeatureRoutingModuleFolder) #>';
import { <#= featureClassName #> } from '<#= GetFeatureComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, ftrFeatureComponentFolder) #>';

const routes: Routes = [
<#
    if ((Model != null) && (nodes.Count > 0)) {
#>
    { path: '',   redirectTo: '<#= nodes[0].Item2 #>', pathMatch: 'full' },
<#
    }
#>
    {
        path: '',
        component: <#= featureClassName #>,
        canActivate: [<#= appSettingServiceClassName #>],
<#
    if (Model != null) {
#>
        canActivateChild: [<#= appSettingServiceClassName #>],
        children: [
// r-routing
<#
if(isRist) {
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;
        List<ModelViewPropertyOfVwSerializable> aModelPrincipals = GetModelPrimaryKeyProps(aModel);
        string fileNm_rl  = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rlLazyModuleFolder);
        string fileNm_rv  = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rvLazyModuleFolder);
        string fileNm_ra  = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, raLazyModuleFolder);
        string fileNm_ru  = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, ruLazyModuleFolder);
        string fileNm_rd  = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rdLazyModuleFolder);
#>

//
// Info: Root Master View  [<#= Model.ViewName #>] 
// Info: Detail View  [<#= aModel.ViewName #>] 
//
<#

        if(aModel.IsWebApiSelectManyWithPagination) {
            if(!string.IsNullOrEmpty(fileNm_rl)  && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rlLazyModuleFolder)))) {



                if(aModel.IsWebApiSelectOneByPrimarykey) {
                    if(!string.IsNullOrEmpty(fileNm_rv) && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rvLazyModuleFolder)))) {
#>
    { path: '<#= node.Item2 + "/" + VPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() + "/:" + IdPrefix + CurrDepth.ToString() #>', 
        loadChildren: () => import('<#= fileNm_rv #>').then(m => m.<#= GetModuleClassName(aModel, rvLazyModuleFolder) #>),
        data: { <#= routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'v', /* <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: 'View <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + CurrDepth.ToString() #>', <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rvLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectOneByPrimarykey is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }




                if(aModel.IsWebApiAdd) {
                    if(!string.IsNullOrEmpty(fileNm_ra)  && (!string.IsNullOrEmpty( GetModuleClassName(aModel, raLazyModuleFolder)))) {
#>
    { path: '<#= node.Item2 + "/" + APrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() #>', 
        loadChildren: () => import('<#= fileNm_ra #>').then(m => m.<#= GetModuleClassName(aModel, raLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'a', /* <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: 'Add <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= raLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiAdd) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiAdd is set to false
//
<#
                } // if(aModel.IsWebApiAdd) { ... } else { ... }




                if(aModel.IsWebApiUpdate) {
                    if(!string.IsNullOrEmpty(fileNm_ru)  && (!string.IsNullOrEmpty( GetModuleClassName(aModel, ruLazyModuleFolder)))) {
#>
    { path: '<#= node.Item2 + "/" + UPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() + "/:" + IdPrefix + CurrDepth.ToString() #>', 
        loadChildren: () => import('<#= fileNm_ru #>').then(m => m.<#= GetModuleClassName(aModel, ruLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'u', /* <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: 'Update <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + CurrDepth.ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= ruLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiUpdate) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiUpdate is set to false
//
<#
                } // if(aModel.IsWebApiUpdate) { ... } else { ... }




                if(aModel.IsWebApiDelete) {
                    if(!string.IsNullOrEmpty(fileNm_rd)  && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rdLazyModuleFolder)))) {
#>
    { path: '<#= node.Item2 + "/" + DPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + CurrDepth.ToString() + "/:" + IdPrefix + CurrDepth.ToString() #>', 
        loadChildren: () => import('<#= fileNm_rd #>').then(m => m.<#= GetModuleClassName(aModel, rdLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'd', /* <#= routeShowFilterPropName #>: true, <#= TitlePropName #>: 'Delete <#= aModel.Title #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + CurrDepth.ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + CurrDepth.ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>}},

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rdLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiDelete) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiDelete is set to false
//
<#
                } // if(aModel.IsWebApiDelete) { ... } else { ... }


                if(node.Item3 > 1) {
#>
    { path: '<#= node.Item2 #>', 
        loadChildren: () => import('<#= fileNm_rl #>').then(m => m.<#= GetModuleClassName(aModel, rlLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true,  <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /*  <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + node.Item3.ToString() #>',  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#

                } else {
#>
    { path: '<#= node.Item2 #>', 
        loadChildren: () => import('<#= fileNm_rl #>').then(m => m.<#= GetModuleClassName(aModel, rlLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true,  <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /* <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#
                } // if(node.Item3 > 1) { ... } else { ... }



            } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rlLazyModuleFolder #>] has not been generated yet
//
<#
            }
        } else { // if(aModel.IsWebApiSelectManyWithPagination) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectManyWithPagination is set to false
//
<#
        } // if(aModel.IsWebApiSelectManyWithPagination) { } else { ... }
    }
} ///// if(!isRist) { ... }
#>

// rd-routing
<#
if(isRDlist) {
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;
        List<ModelViewPropertyOfVwSerializable> aModelPrincipals = GetModelPrimaryKeyProps(aModel);
        string fileNm_rdl = GetFeatureCrossComponentFolderName(Feature, ftrFeatureRoutingModuleFolder, Context, aModel.ViewName, rdlLazyModuleFolder);
        
#>

//
// Info: Root Master View  [<#= Model.ViewName #>] 
// Info: Detail View  [<#= aModel.ViewName #>] 
//
<#

        if(aModel.IsWebApiSelectManyWithPagination) {
            if(!string.IsNullOrEmpty(fileNm_rdl)  && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rdlLazyModuleFolder)))) {




                if(node.Item3 > 1) {
#>
    { path: '<#= node.Item2 #>', 
        loadChildren: () => import('<#= fileNm_rdl #>').then(m => m.<#= GetModuleClassName(aModel, rdlLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true, <#= NavPrefix #>: '<#= RDLPrefix #>', <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /* <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */ <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + node.Item3.ToString() #>',  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#

                } else {
#>
    { path: '<#= node.Item2 #>', 
        loadChildren: () => import('<#= fileNm_rdl #>').then(m => m.<#= GetModuleClassName(aModel, rdlLazyModuleFolder) #>),
        data: { <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true, <#= NavPrefix #>: '<#= RDLPrefix #>', <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true, /* <#= TitlePropName #>: '<#= aModel.PluralTitle #>', */  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' }  },

<#
                } // if(node.Item3 > 1) { ... } else { ... }



            } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rdlLazyModuleFolder #>] has not been generated yet
//
<#
            }
        } else { // if(aModel.IsWebApiSelectManyWithPagination) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectManyWithPagination is set to false
//
<#
        } // if(aModel.IsWebApiSelectManyWithPagination) { } else { ... }
    }
} ///// if(isRDlist) {...}
#>
        ] // children: [...]
<#
    }
#>

    },
]; // const routes: Routes = [...]

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class <#= featureRoutingModuleClassName #> { }


<#+
    string GetFeatureModuleClassName(FeatureSerializable feature, string fileType) {
        string result="";
        if ((feature == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }  
        string fn = refItem.FileName.Replace(".module","Module").Replace(".routing","Routing").Replace(".","-");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetFeatureComponentClassName(FeatureSerializable feature, string fileType) {
        string result="";
        if ((feature == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component").Replace(".","-");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    bool isRoutedItem(AllowedFileTypesSerializable allowedFileTypes, string fileType) {
        if( (allowedFileTypes == null) || string.IsNullOrEmpty(fileType)) {
            return false;
        }
        if(allowedFileTypes.Items == null) {
            return false;
        }
        AllowedFileTypeSerializable rslt= allowedFileTypes.Items.Where(i => i.FileType == fileType).FirstOrDefault();
        if(rslt == null) {
            return false;
        }
        return rslt.IsRouted;
    }
    string GetFeatureCommonFolderName(FeatureSerializable  feature, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((feature == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((feature.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            feature.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetFeatureComponentFolderName(FeatureSerializable feature, string currFolder, string refFolder) {
        string result="./";
        if ((feature == null) || string.IsNullOrEmpty(currFolder) || string.IsNullOrEmpty(refFolder) ) {
            return result;
        }
        if (feature.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            feature.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            feature.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetFeatureCrossComponentFolderName(FeatureSerializable feature, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((feature == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((feature.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            feature.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }


////////////////////////////////////////////////////////

    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) { 
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => 
                (p.OriginalPropertyName == origPropName) && 
                string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if ((fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1)) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => 
                        (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && 
                        (p.ForeignKeyName == fk.NavigationName) && 
                        (p.ForeignKeyName == p.ForeignKeyNameChain)
                    ).FirstOrDefault();
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }
    bool IsTableMatchesIndex(ModelViewSerializable model) {
        if (model == null)  return false;
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null)) return false;
        if ((model.ScalarProperties.Count != model.PrimaryKeyProperties.Count) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable pkp in model.PrimaryKeyProperties) {
             if(GetScalarPropByOriginaPropName(pkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToTailOfPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
            if (fk.ForeignKeyProps[fk.ForeignKeyProps.Count - (1 + i)].OriginalPropertyName != model.PrimaryKeyProperties[model.PrimaryKeyProperties.Count - (1 + i)].OriginalPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalars(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.ScalarProperties == null) || (fk.ForeignKeyProps == null)) return false;
        if (fk.ForeignKeyProps.Count < 1) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
             if(GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsEx(ModelViewForeignKeySerializable detailFk, ModelViewSerializable detailModel, ModelViewSerializable model) {
        if ((detailModel == null) || (detailFk == null) || (model == null)) return false;
        if ((detailModel.ScalarProperties == null) || (detailFk.ForeignKeyProps == null) || (model.ScalarProperties == null) || (detailFk.PrincipalKeyProps == null) || (model.PrimaryKeyProperties == null)) return false;
        if ((detailFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1) || (model.PrimaryKeyProperties.Count != detailFk.ForeignKeyProps.Count) || (detailFk.PrincipalKeyProps.Count != detailFk.ForeignKeyProps.Count) || (model.PrimaryKeyProperties.Count != detailFk.ForeignKeyProps.Count)) return false;
        for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
             ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
             if(detailsprp == null) return false;
             ModelViewPropertyOfVwSerializable modelsprp = GetScalarPropByOriginaPropName(detailFk.PrincipalKeyProps[i].OriginalPropertyName, model);
             if(modelsprp == null) return false;
             if(modelsprp.ViewPropertyName != detailsprp.ViewPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsExEx(ModelViewForeignKeySerializable detailFk, ModelViewSerializable detailModel, ModelViewSerializable model) {
        if ((detailModel == null) || (detailFk == null) || (model == null)) return false;
        if ((detailModel.ScalarProperties == null) || (detailFk.ForeignKeyProps == null) || (model.ScalarProperties == null) || (detailFk.PrincipalKeyProps == null) || (model.ForeignKeys == null)) return false;
        if ((detailFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1) || (detailFk.PrincipalKeyProps.Count != detailFk.ForeignKeyProps.Count)) return false;
        List<ModelViewForeignKeySerializable> modelFks =  model.ForeignKeys.Where(f => f.ViewName == detailFk.ViewName).ToList();
        if(modelFks.Count < 1) return false;
        for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
             ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
             if(detailsprp == null) return false;
        }
        foreach(ModelViewForeignKeySerializable modelFk in modelFks) {
            if(modelFk.ForeignKeyProps == null) continue;
            if(modelFk.ForeignKeyProps.Count != detailFk.ForeignKeyProps.Count) continue;
            bool passed = false;
            for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
                 ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
                 ModelViewPropertyOfVwSerializable modelsprp = GetScalarPropByOriginaPropName(modelFk.ForeignKeyProps[i].OriginalPropertyName, model);
                 passed = modelsprp != null;
                 if(!passed) break;
                 passed = modelsprp.ViewPropertyName == detailsprp.ViewPropertyName;
                 if(!passed) break;
            }
            if (passed) return true;
        }
        return false;
    }
    bool IsOnePropForeigKey(ModelViewForeignKeySerializable searchFk) {
        if(searchFk == null) return false;
        if((searchFk.PrincipalKeyProps == null) || (searchFk.ForeignKeyProps == null )) return false;
        if((searchFk.PrincipalKeyProps.Count == searchFk.ForeignKeyProps.Count) && (searchFk.ForeignKeyProps.Count == 1)) return true;
        return false;
    }
    bool IsLookUpTable(ModelViewSerializable searchMdl) {
        if (searchMdl == null) return false;
        if ((searchMdl.ScalarProperties == null) || (searchMdl.PrimaryKeyProperties == null) || (searchMdl.UniqueKeys == null)) return false;
        if ((searchMdl.ScalarProperties.Count != 2) || (searchMdl.PrimaryKeyProperties.Count != 1) || (searchMdl.UniqueKeys.Count != 1)) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties == null) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties.Count != 1) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName == searchMdl.PrimaryKeyProperties[0].OriginalPropertyName) return false;
        if ((GetScalarPropByOriginaPropName(searchMdl.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, searchMdl) == null) ||
            (GetScalarPropByOriginaPropName(searchMdl.PrimaryKeyProperties[0].OriginalPropertyName, searchMdl) == null)) return false;
        return true;
    }
    bool IsUniqKeyMapedToScalarsEx(ModelViewUniqueKeySerializable searchUk, ModelViewSerializable searchModel, ModelViewSerializable model) {
        if ((searchModel == null) || (searchUk == null) || (model == null)) return false;
        if ((searchModel.ScalarProperties == null) || (searchUk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) return false;
        if ((searchUk.UniqueKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable ukp in searchUk.UniqueKeyProperties) {
             ModelViewPropertyOfVwSerializable sprp = GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, searchModel);
             if(sprp == null) return false;
             if(!model.ScalarProperties.Any(p => p.ViewPropertyName == sprp.ViewPropertyName)) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
            if( !model.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName) ) return false;
        }
        return true;
    }
    bool IsForeigKeyWithCorrectPropsOrder(ModelViewForeignKeySerializable otherFk, ModelViewSerializable m2mMdl) {
        if ((m2mMdl == null) || (otherFk == null)) return false;
        if ((m2mMdl.PrimaryKeyProperties == null) || (otherFk.ForeignKeyProps == null)) return false;
        if ((m2mMdl.PrimaryKeyProperties.Count < 1) || (otherFk.ForeignKeyProps.Count < 1)) return false;
        List<int> positions = new List<int>();
        foreach(ModelViewKeyPropertySerializable fkp in otherFk.ForeignKeyProps) {
            int index = m2mMdl.PrimaryKeyProperties.FindIndex(delegate(ModelViewKeyPropertySerializable pkp) { return pkp.OriginalPropertyName == fkp.OriginalPropertyName; });
            if(index < 0) return false;
            positions.Add(index);
        }
        positions.Sort();
        for(int i = 0; i < positions.Count-1; i++) {
            if(positions[i] + 1 != positions[i+1]) return false;
        }
        return true;
    }
    int GetForeigKeyMaxPropsPosition(ModelViewForeignKeySerializable otherFk, ModelViewSerializable m2mMdl) {
        if ((m2mMdl == null) || (otherFk == null)) return -1;
        if ((m2mMdl.PrimaryKeyProperties == null) || (otherFk.ForeignKeyProps == null)) return -1;
        if ((m2mMdl.PrimaryKeyProperties.Count < 1) || (otherFk.ForeignKeyProps.Count < 1)) return -1;
        int rslt = 0;
        foreach(ModelViewKeyPropertySerializable fkp in otherFk.ForeignKeyProps) {
            int index = m2mMdl.PrimaryKeyProperties.FindIndex(delegate(ModelViewKeyPropertySerializable pkp) { return pkp.OriginalPropertyName == fkp.OriginalPropertyName; });
            if(index < 0) return -1;
            if(rslt < index) rslt = index;
        }
        return rslt;
    }
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> GetSearchResources(ModelViewSerializable model, DbContextSerializable context) {
        if ((context == null) || (model == null)) return null;
        if ((context.ModelViews == null) || (model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) ) return null;
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return null;
        List<ModelViewSerializable> m2mMdls = context.ModelViews.Where(p => (p.ForeignKeys.Any(f => f.ViewName == model.ViewName) && (p.ForeignKeys.Count > 1))).ToList();
        if(m2mMdls.Count < 1) {
            return null;
        }
        // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk, ukpropsMpt, ukpropsToFrgn
        List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> result = null;
        foreach(ModelViewSerializable m2mMdl in m2mMdls) {
            if (!IsTableMatchesIndex(m2mMdl)) {
                continue;
            }
            List<ModelViewForeignKeySerializable> m2mFks = m2mMdl.ForeignKeys.Where(f => f.ViewName == model.ViewName).ToList();
            foreach(ModelViewForeignKeySerializable m2mFk in m2mFks) {
                if(!IsForeigKeyMapedToTailOfPrimKey(m2mFk, m2mMdl)) continue;
                if(!IsForeigKeyMapedToScalarsEx(m2mFk, m2mMdl, model)) continue;
                // m2mMdl - m2mModel, m2mFk - m2mForeignKey,
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFks = null;
                List<int> searchFkPosition = null;
                foreach(ModelViewForeignKeySerializable searchFk in m2mMdl.ForeignKeys) {
                    if (m2mFk == searchFk) continue;
                    if (!IsOnePropForeigKey(searchFk)) continue;
                    ModelViewSerializable searchMdl = context.ModelViews.Where(mv => (mv.ViewName == searchFk.ViewName)).FirstOrDefault();
                    if (searchMdl == null) continue;
                    if (!IsLookUpTable(searchMdl)) continue;
                    if (!IsUniqKeyMapedToScalarsEx(searchMdl.UniqueKeys[0], searchMdl, model)) continue;
                    if (searchFks == null) searchFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    searchFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>( searchFk, GetForeigKeyMaxPropsPosition(searchFk, m2mMdl) ));
                }
                if(searchFks == null) {
                    continue;
                }
                int lastValidPosition = m2mMdl.PrimaryKeyProperties.Count - model.PrimaryKeyProperties.Count - 1;
                if(searchFks != null) {
                    if(searchFks.Any(p => p.Value < 0)) continue;
                    searchFks = searchFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < searchFks.Count-1; i++) {
                        IsCorrect = searchFks[i].Value == searchFks[i+1].Value - 1;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) {
                        continue;
                    }
                    if(searchFks[searchFks.Count-1].Value != lastValidPosition) { 
                        continue;
                    }
                    lastValidPosition = searchFks[0].Value - 1;
                }
                

                List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = null;
                foreach(ModelViewForeignKeySerializable otherFk in m2mMdl.ForeignKeys) {
                    if (m2mFk == otherFk) continue;
                    if (searchFks != null) {
                        if(searchFks.Any(p => p.Key == otherFk)) continue;
                    }
                    if(!IsForeigKeyMapedToPrimKey(otherFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalarsExEx(otherFk, m2mMdl, model)) continue;
                    if(!IsForeigKeyWithCorrectPropsOrder(otherFk, m2mMdl)) continue;
                    int mxPs = GetForeigKeyMaxPropsPosition(otherFk, m2mMdl);
                    if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
                    if(otherFks == null) otherFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    otherFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(otherFk, mxPs));
                }
                if(otherFks != null) {
                    otherFks = otherFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < otherFks.Count-1; i++) {
                        IsCorrect = otherFks[i].Value == otherFks[i+1].Value - otherFks[i].Key.ForeignKeyProps.Count;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) continue;
                    if(otherFks[otherFks.Count-1].Value != lastValidPosition) 
                        continue;
                    lastValidPosition = otherFks[0].Value - otherFks[0].Key.ForeignKeyProps.Count;
                }
                

                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = null;
                foreach(ModelViewForeignKeySerializable externalFk in m2mMdl.ForeignKeys) {
                    if (externalFk == m2mFk) continue;
                    if (searchFks != null) {
                        if(searchFks.Any(p => p.Key == externalFk)) continue;
                    }
                    if (otherFks != null) {
                        if(otherFks.Any(p => p.Key == externalFk)) continue;
                    }
                    if(!IsForeigKeyMapedToPrimKey(externalFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalars(externalFk, m2mMdl)) continue;
                    if(!IsForeigKeyWithCorrectPropsOrder(externalFk, m2mMdl)) continue;
                    int mxPs = GetForeigKeyMaxPropsPosition(externalFk, m2mMdl);
                    if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
                    if(externalFks == null) externalFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    externalFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(externalFk, mxPs));
                }
                if(externalFks != null) {
                    externalFks = externalFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < externalFks.Count-1; i++) {
                        IsCorrect = externalFks[i].Value == externalFks[i+1].Value - externalFks[i].Key.ForeignKeyProps.Count;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) continue;
                    if(externalFks[externalFks.Count-1].Value != lastValidPosition) continue;
                    lastValidPosition = externalFks[0].Value - externalFks[0].Key.ForeignKeyProps.Count;
                }
                if(lastValidPosition != -1) continue;
                int AllFkCount = (searchFks == null ? 0 : searchFks.Count) +
                                (otherFks == null ? 0 : otherFks.Count) +
                                (externalFks == null ? 0 : externalFks.Count);
                if (AllFkCount != (m2mMdl.ForeignKeys.Count - 1)) continue;
                if(result == null) {
                    result = new List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>>();
                }
                result.Add(new Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>(
                    m2mMdl, m2mFk, searchFks, otherFks, externalFks
                ));
            }
        }
        return result;
    }
    bool AllPrimKeyPropsAreForeignKeysProps(ModelViewSerializable m2mMdl) {
        if(m2mMdl == null) return false;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mMdl.ForeignKeys == null)) return false;
        int cnt = 0;
        foreach(ModelViewForeignKeySerializable fk in m2mMdl.ForeignKeys) {
            if (fk.ForeignKeyProps == null) return false;
            cnt += fk.ForeignKeyProps.Count;
        }
        if(cnt != m2mMdl.PrimaryKeyProperties.Count) return false;
        List<string> passed = new List<string>();
        foreach(ModelViewForeignKeySerializable fk in m2mMdl.ForeignKeys) {
            foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
                if(!m2mMdl.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName)) return false;
                if(passed.Any(p => p == fkp.OriginalPropertyName)) return false;
                passed.Add(fkp.OriginalPropertyName);
            }
        }
        return true;
    }
    bool ForeignKeysOrderedInsidePrimKey(ModelViewSerializable m2mMdl) {
        if(m2mMdl == null) return false;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mMdl.ForeignKeys == null)) return false;
        ModelViewForeignKeySerializable currFk = null;
        int firstInx = 0;
        int lastInx = 0;
        for(int i = 0; i < m2mMdl.PrimaryKeyProperties.Count; i++) {
            ModelViewKeyPropertySerializable pkprp = m2mMdl.PrimaryKeyProperties[i];
            ModelViewForeignKeySerializable fk = m2mMdl.ForeignKeys.Where(f => f.ForeignKeyProps.Any(p => p.OriginalPropertyName == pkprp.OriginalPropertyName)).FirstOrDefault();
            if(fk == null) return false;
            if(i == 0) { 
                currFk = fk;
                continue;
            }
            if(fk == currFk) {
                lastInx = i;
                continue;
            }
            if(currFk.ForeignKeyProps.Count != lastInx - firstInx + 1) return false;
            currFk = fk;
            firstInx = i;
            lastInx = i;
        }
        if(currFk.ForeignKeyProps.Count != lastInx - firstInx + 1) return false;
        return true;
    }
    bool IsForeignKeyFirstInsidePrimKey(ModelViewSerializable m2mMdl, ModelViewForeignKeySerializable m2mFk) {
        if((m2mMdl == null) || (m2mFk == null)) return false;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mFk.ForeignKeyProps == null)) return false;
        ModelViewForeignKeySerializable currFk = null;
        int firstInx = 0;
        int lastInx = 0;
        for(int i = 0; i < m2mMdl.PrimaryKeyProperties.Count; i++) {
            ModelViewKeyPropertySerializable pkprp = m2mMdl.PrimaryKeyProperties[i];
            if(m2mFk.ForeignKeyProps.Any(p => p.OriginalPropertyName == pkprp.OriginalPropertyName)) {
                if(i == 0) { 
                    currFk = m2mFk;
                    continue;
                }
                lastInx = i;
            } else break;
        }
        if(currFk == null) return false;
        if(currFk.ForeignKeyProps.Count != lastInx - firstInx + 1) return false;
        return true;
    }
    ModelViewForeignKeySerializable GetLastForeignKey(ModelViewSerializable m2mMdl) {
        if(m2mMdl == null)  return null;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mMdl.ForeignKeys == null))  return null;
        if(m2mMdl.PrimaryKeyProperties.Count < 1) return null;
        ModelViewKeyPropertySerializable pkprp =m2mMdl.PrimaryKeyProperties[m2mMdl.PrimaryKeyProperties.Count - 1];
        return m2mMdl.ForeignKeys.Where(f => f.ForeignKeyProps.Any(p => p.OriginalPropertyName == pkprp.OriginalPropertyName)).FirstOrDefault();
    }
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> GetSearchResourcesForLastFk(ModelViewSerializable model, ModelViewSerializable m2mMdl, ModelViewForeignKeySerializable m2mFk, DbContextSerializable context) {
        if ((context == null) || (model == null) || (m2mMdl == null) || (m2mFk == null)) return null;
        if ((context.ModelViews == null) || (model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) || (m2mMdl.ForeignKeys == null) ) return null;
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return null;
        if (!m2mMdl.ForeignKeys.Any(f => f == m2mFk)) return null;
        if (m2mFk.ViewName != model.ViewName) return null;
        if (!IsTableMatchesIndex(m2mMdl)) return null;
        if(!IsForeigKeyMapedToTailOfPrimKey(m2mFk, m2mMdl)) return null;
        if(!IsForeigKeyMapedToScalarsEx(m2mFk, m2mMdl, model)) return null;
        // m2mMdl - m2mModel, m2mFk - m2mForeignKey,
        List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFks = null;
        List<int> searchFkPosition = null;
        foreach(ModelViewForeignKeySerializable searchFk in m2mMdl.ForeignKeys) {
            if (m2mFk == searchFk) continue;
            if (!IsOnePropForeigKey(searchFk)) continue;
            ModelViewSerializable searchMdl = context.ModelViews.Where(mv => (mv.ViewName == searchFk.ViewName)).FirstOrDefault();
            if (searchMdl == null) continue;
            if (!IsLookUpTable(searchMdl)) continue;
            if (!IsUniqKeyMapedToScalarsEx(searchMdl.UniqueKeys[0], searchMdl, model)) continue;
            if (searchFks == null) searchFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
            searchFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>( searchFk, GetForeigKeyMaxPropsPosition(searchFk, m2mMdl) ));
        }
        if(searchFks == null) return null;
        int lastValidPosition = m2mMdl.PrimaryKeyProperties.Count - model.PrimaryKeyProperties.Count - 1;
        if(searchFks != null) {
            if(searchFks.Any(p => p.Value < 0)) return null;
            searchFks = searchFks.OrderBy(p => p.Value).ToList();
            bool IsCorrect = true;
            for(int i = 0; i < searchFks.Count-1; i++) {
                IsCorrect = searchFks[i].Value == searchFks[i+1].Value - 1;
                if(!IsCorrect) break;
            }
            if(!IsCorrect) return null;
            if(searchFks[searchFks.Count-1].Value != lastValidPosition) return null;
            lastValidPosition = searchFks[0].Value - 1;
        }
        List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = null;
        foreach(ModelViewForeignKeySerializable otherFk in m2mMdl.ForeignKeys) {
            if (m2mFk == otherFk) continue;
            if (searchFks != null) {
                if(searchFks.Any(p => p.Key == otherFk)) continue;
            }
            if(!IsForeigKeyMapedToPrimKey(otherFk, m2mMdl)) continue;
            if(!IsForeigKeyMapedToScalarsExEx(otherFk, m2mMdl, model)) continue;
            if(!IsForeigKeyWithCorrectPropsOrder(otherFk, m2mMdl)) continue;
            int mxPs = GetForeigKeyMaxPropsPosition(otherFk, m2mMdl);
            if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
            if(otherFks == null) otherFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
            otherFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(otherFk, mxPs));
        }
        if(otherFks != null) {
            otherFks = otherFks.OrderBy(p => p.Value).ToList();
            bool IsCorrect = true;
            for(int i = 0; i < otherFks.Count-1; i++) {
                IsCorrect = otherFks[i].Value == otherFks[i+1].Value - otherFks[i].Key.ForeignKeyProps.Count;
                if(!IsCorrect) break;
            }
            if(!IsCorrect) return null;
            if(otherFks[otherFks.Count-1].Value != lastValidPosition) return null;
            lastValidPosition = otherFks[0].Value - otherFks[0].Key.ForeignKeyProps.Count;
        }
                

        List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = null;
        foreach(ModelViewForeignKeySerializable externalFk in m2mMdl.ForeignKeys) {
            if (externalFk == m2mFk) continue;
            if (searchFks != null) {
                if(searchFks.Any(p => p.Key == externalFk)) continue;
            }
            if (otherFks != null) {
                if(otherFks.Any(p => p.Key == externalFk)) continue;
            }
            if(!IsForeigKeyMapedToPrimKey(externalFk, m2mMdl)) continue;
            if(!IsForeigKeyMapedToScalars(externalFk, m2mMdl)) continue;
            if(!IsForeigKeyWithCorrectPropsOrder(externalFk, m2mMdl)) continue;
            int mxPs = GetForeigKeyMaxPropsPosition(externalFk, m2mMdl);
            if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
            if(externalFks == null) externalFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
            externalFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(externalFk, mxPs));
        }
        if(externalFks != null) {
            externalFks = externalFks.OrderBy(p => p.Value).ToList();
            bool IsCorrect = true;
            for(int i = 0; i < externalFks.Count-1; i++) {
                IsCorrect = externalFks[i].Value == externalFks[i+1].Value - externalFks[i].Key.ForeignKeyProps.Count;
                if(!IsCorrect) break;
            }
            if(!IsCorrect) return null;
            if(externalFks[externalFks.Count-1].Value != lastValidPosition) return null;
            lastValidPosition = externalFks[0].Value - externalFks[0].Key.ForeignKeyProps.Count;
        }
        if(lastValidPosition != -1) return null;
        int AllFkCount = (searchFks == null ? 0 : searchFks.Count) +
                        (otherFks == null ? 0 : otherFks.Count) +
                        (externalFks == null ? 0 : externalFks.Count);
        if (AllFkCount != (m2mMdl.ForeignKeys.Count - 1)) return null;
        return new Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>(
            m2mMdl, m2mFk, searchFks, otherFks, externalFks
        );
    }
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> DetailViewAsM2mMdl(ModelViewSerializable m2mMdl, DbContextSerializable context) {
        if ((m2mMdl == null) || (context == null)) return null;
        if ((m2mMdl.ForeignKeys == null) || (context.ModelViews == null)) return null;
        if (!IsTableMatchesIndex(m2mMdl)) return null;
        if (!AllPrimKeyPropsAreForeignKeysProps(m2mMdl)) return null;
        if (!ForeignKeysOrderedInsidePrimKey(m2mMdl)) return null;
        ModelViewForeignKeySerializable lastFk = GetLastForeignKey(m2mMdl);
        if(lastFk == null) return null;
        ModelViewSerializable model = context.ModelViews.Where(m => m.ViewName == lastFk.ViewName).FirstOrDefault();
        if(model == null) return null;
        return GetSearchResourcesForLastFk(model, m2mMdl, lastFk, context);
    }
    ModelViewPropertyOfVwSerializable GetModelScalarPropByKeyProp(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable rslt = null;
        if ((model == null) || (pk == null)) return null;
        if (model.ScalarProperties == null) return null;
        if (model.AllProperties == null) return null;
        ModelViewEntityPropertySerializable aprop = model.AllProperties.Where(p => p.OriginalPropertyName == pk.OriginalPropertyName).FirstOrDefault();
        if(aprop == null) return null;
        ModelViewPropertyOfVwSerializable scProp = 
            model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
        if (scProp != null) return scProp;
        if (model.ForeignKeys != null) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                scProp = null;
                if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                    int cnt = fk.ForeignKeyProps.Count;
                    if (cnt < fk.PrincipalKeyProps.Count)
                    {
                        cnt = fk.PrincipalKeyProps.Count;
                    }
                    for(int i = 0; i < cnt; i++)
                    {
                        if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                        {
                            scProp=
                                model.ScalarProperties.Where(p =>
                                ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                        }
                        if(scProp != null) return scProp;
                    }
                }
            }
        }
        return null;
    }
    ModelViewSerializable GetViewByName(DbContextSerializable context, string viewName) {
        if(context == null) return null;
        return context.ModelViews.Where(p => p.ViewName == viewName).FirstOrDefault();
    }
    ModelViewPropertyOfVwSerializable GetFirstPropOfFirstUniqueKey(ModelViewSerializable model) {
        if(model == null) return null;
        if(model.UniqueKeys == null) return null;
        if(model.UniqueKeys.Count < 1) return null;
        if(model.UniqueKeys[0].UniqueKeyProperties == null) return null;
        if(model.UniqueKeys[0].UniqueKeyProperties.Count < 1) return null;
        return GetScalarPropByOriginaPropName(model.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, model);
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop = GetScalarPropByOriginaPropName(modelViewKeyPropertySerializable.OriginalPropertyName, model);
            if(prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    List<ModelViewForeignKeySerializable> GetDetailViewForeignKeys(ModelViewSerializable model, ModelViewSerializable detail, List<ModelViewForeignKeySerializable> result)
    {
            if (result == null) result = new List<ModelViewForeignKeySerializable>();
            if ((model == null) || (detail == null))
            {
                return result;
            }
            if ((model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null))
            {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if (primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewForeignKeySerializable> ForeignKeys =
                detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
            if (ForeignKeys.Count < 1)
            {
                return result;
            }
            foreach (ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
            {
                bool hasForeignKeyProps = true;
                if (ForeignKey.ForeignKeyProps != null)
                {
                    for (int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                    {
                        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                        hasForeignKeyProps =
                            detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
                        if (!hasForeignKeyProps)
                        {
                            ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                            hasForeignKeyProps = detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName));
                            {
                                hasForeignKeyProps = true;
                            }
                            if(!hasForeignKeyProps)
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    hasForeignKeyProps = false;
                }
                if (hasForeignKeyProps)
                {
                    result.Add(ForeignKey);
                    break;
                }
            }
            return result;
    }
    List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
        {
            if (result == null)
            {
                result = new List<string>();
            }
            if ((model == null) || (context == null))
            {
                return result;
            }
            if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if(primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewSerializable> details =
                context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
            if(details.Count < 1)
            {
                return result;
            }
            foreach(ModelViewSerializable detail in details)
            {
                if (detail.ScalarProperties == null) continue;
                if (detail.ForeignKeys == null) continue;
                if (detail.ForeignKeys.Count < 1) continue;
                List<ModelViewForeignKeySerializable> ForeignKeys =
                    detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
                if (ForeignKeys.Count < 1) continue;
                bool canBeUsed = false;
                foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
                {
                    bool hasForeignKeyProps = true;
                    if (ForeignKey.ForeignKeyProps != null)
                    {
                        for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                        {
                            ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                            if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                            {
                                hasForeignKeyProps = false;
                            }
                            if(!hasForeignKeyProps)
                            {
                                ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                                if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                                {
                                    hasForeignKeyProps = true;
                                } else
                                {
                                    break;
                                }
                            }
                        }
                    } else
                    {
                        hasForeignKeyProps = false;
                    }
                    if (hasForeignKeyProps)
                    {
                        canBeUsed = true;
                        break;
                    }
                }
                if(canBeUsed)
                {
                    if(!result.Contains(detail.ViewName))
                    {
                        result.Add(detail.ViewName);
                    }
                }
            }
            return result;
    }

    string GetModuleClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".module","Module").Replace(".routing","Routing");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GeFileNameWithoutExt(ModelViewSerializable model, string fileType) {
        string result= "";
        if ((model == null) || string.IsNullOrEmpty(fileType)) return result;
        if(model.CommonStaffs == null) return result= "";
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileFolder)) {
            result = "./";
        } else {
            result = refItem.FileFolder.Replace("\\","/").Replace("src/","").Replace("app/","./");
        }
        if(! result.EndsWith("/")) {
            result += "/";
            
        }
        return result + refItem.FileName;
    }

    

#>
