<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>

<#
    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";


    string GetAllMethodName                     = "getall";
    string GetWithFilterMethodName              = "getwithfilter";
    string GetOneMethodName                     = "getone";
    string GetOneByMethodNamePrefix             = "getoneby";
    string UpdateOneMethodName                  = "updateone";
    string AddOneMethodName                     = "addone";
    string DeleteOneMethodName                  = "deleteone";
    string GetManyByRepPrimMethodNamePrefix     = "getmanybyrepprim";
    string GetManyByRepUnqMethodNamePrefix      = "getmanybyrepunq";


    string AppSettingServicePropName            = "appGlblSettings";
    string MasterToClientKeyFieldsMapFieldName  = "m2cKeyfm";
    string MasterToClientFieldsMapFieldName     = "m2cfm";
    string ClientToMasterFieldsMapFieldName     = "c2mfm";
    string HiddenFilterByFltRsltSuffix          = "HiddenFilterByFltRslt";
    string HiddenFilterAsFltRsltSuffix          = "HiddenFilterAsFltRslt";
    string HiddenFilterByRowSuffix              = "HiddenFilterByRow";
    string HiddenFilterFieldName                = "hf";

    string LengthSuffix                         = "Length";
    string KeysSuffix                           = "Keys";
    string ValueSuffix                          = "Value";
    string ValuesSuffix                         = "Values";
    string row2FilterRsltMethodName             = "row2FilterRslt";
    string filterRslt2rowMethodName             = "filterRslt2row";
    string row2FilterMethodName                 = "row2Filter";
    string filter2rowMethodName                 = "filter2row";

    string src2destMethodName                   = "src2dest";

    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";

    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName   = GetModelClassName(Context, filterResultModelFolder);

    string viewInterfaceFolder      = "01100-.interface.ts";
    string viewInterfacePageFolder  = "01200-Page.interface.ts";
    string viewInterfaceFltFolder   = "01300-Filter.interface.ts";
    string viewServiceFolder        = "01400-.service.ts";
    string appSettingServiceClassName = GetCommonServiceClassName(Context, appSettingServiceFolder);

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        GetModelUniqueKeys(Model, uniqueKeys);
    } 

#>
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs/internal/Observable';
import { <#= GetInterfaceName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceFolder, viewServiceFolder)#>';
import { <#= GetInterfacePageName(Model) #> } from '<#= GetFolderName(Model, viewInterfacePageFolder, viewServiceFolder)#>';
import { <#= GetInterfaceFilterName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceFltFolder, viewServiceFolder)#>';
import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderName(Model, Context,  appSettingServiceFolder, viewServiceFolder)#>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterResultModelFolder, viewServiceFolder) #>';


@Injectable({
  providedIn: 'root'
})
export class <#= GetJavaScriptServiceName(Model) #> {
    serviceUrl: string;  
    constructor(private http: HttpClient, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>) {
       this.serviceUrl = this.<#= AppSettingServicePropName #>.getWebApiPrefix('<#= Model.ViewName #>') + '<#= GetWebApiServicePrefix(Model) #>';  
    }
    protected _<#= ValuesSuffix #>: {[key: string]: {org: string, fk: string, fkchain: string, isinprimkey: boolean, isinunqkey: boolean, required: boolean, dbgenerated: boolean, dttp: string}} = {
<#
    if (Model.ScalarProperties != null) {
        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetModelPrimaryKeyProps(Model);
        List<ModelViewPropertyOfVwSerializable> allUnkKeyProps = GetModelAllUniqueKeysProps(Model);
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
            string IsInPrimKey = "false";
            string IsInUnkKey = "false";
            if(primKeyProps != null) {
                if (primKeyProps.Any(k => k == prop)) {
                    IsInPrimKey = "true";
                }
            }
            if(allUnkKeyProps != null) {
                if (allUnkKeyProps.Any(k => k == prop)) {
                    IsInUnkKey = "true";
                }
            }
            string IsDatabaseGenerated = IsDatabaseGeneratedProperty(prop, Model) ? "true" : "false";
            string IsRequiredInView = prop.IsRequiredInView ? "true" : "false";
            string fk = string.IsNullOrEmpty( prop.ForeignKeyName ) ? "" : prop.ForeignKeyName;
            string fkchain = string.IsNullOrEmpty( prop.ForeignKeyNameChain ) ? "" : prop.ForeignKeyNameChain;
#>
      '<#= GetTypeScriptPropertyName(prop, Model) #>': {org: '<#= prop.OriginalPropertyName #>', fk: '<#= fk #>', fkchain: '<#= fkchain #>', isinprimkey: <#= IsInPrimKey #>, isinunqkey: <#= IsInUnkKey #>, required: <#= IsRequiredInView #>, dbgenerated: <#= IsDatabaseGenerated #>, dttp: '<#= GetCCharpDatatype(prop, Model) #>'},  // <#= GetPropertyTypeScriptTypeName(prop) #>, <#= GetPropertyTypeName(prop) #>
<#

        }
    }
#>
    };
    // master name, navigation name, master filed, master filed value
    public get<#= HiddenFilterByRowSuffix #>(rw: <#= GetInterfaceName(Model) #>|any, nvNm: string|any): {[key: string]: {[key: string]: {[key: string]: any}}} {
        let rslt: {[key: string]: {[key: string]: {[key: string]: any}}} = {}
        if((typeof rw === 'undefined') || (typeof nvNm === 'undefined')) return rslt;
        if((rw === null) || (nvNm === null)) return rslt;
        for(let i in this._<#= ValuesSuffix #>) {
            if(this.isInPrimkey<#= ValueSuffix #>(i) || this.IsInUnkKey<#= ValueSuffix #>(i)) {
                if(typeof rslt['<#= Model.ViewName #>'] === 'undefined') rslt['<#= Model.ViewName #>'] = {};
                if(typeof rslt['<#= Model.ViewName #>'][nvNm] === 'undefined') rslt['<#= Model.ViewName #>'][nvNm] = {};
                rslt['<#= Model.ViewName #>'][nvNm][i] = rw[i];
            }
        }
        return rslt;
    }
    public get<#= LengthSuffix #>(): number {
        return Object.keys(this._<#= ValuesSuffix #>).length;
    }
    public get<#= KeysSuffix #>(): string[] {
        return Object.keys(this._<#= ValuesSuffix #>);
    }
    public getDtTp<#= ValueSuffix #>(key: string): string {
        return this._<#= ValuesSuffix #>[key].dttp;
    }
    public getFk<#= ValueSuffix #>(key: string): string {
        return this._<#= ValuesSuffix #>[key].fk;
    }
    public required<#= ValueSuffix #>(key: string): boolean {
        return this._<#= ValuesSuffix #>[key].required;
    }
    public dbgenerated<#= ValueSuffix #>(key: string): boolean {
        return this._<#= ValuesSuffix #>[key].dbgenerated;
    }
    public isInPrimkey<#= ValueSuffix #>(key: string): boolean {
        return this._<#= ValuesSuffix #>[key].isinprimkey;
    }
    public IsInUnkKey<#= ValueSuffix #>(key: string): boolean {
        return this._<#= ValuesSuffix #>[key].isinunqkey;
    }
    public getKeyByOrg<#= ValueSuffix #>(org: string, fkchain: string): string|any {
        for(let i in this._<#= ValuesSuffix #>) {
            if(this._<#= ValuesSuffix #>[i].org === org && this._<#= ValuesSuffix #>[i].fkchain ===fkchain) return i;
        }
        return undefined;
    }
    public get<#= HiddenFilterAsFltRsltSuffix #>(<#= HiddenFilterFieldName #>: {[key: string]: {[key: string]: {[key: string]: any}}} | any): Array<<#= filterResultModelClassName #>> {
        let rslt: Array<<#= filterResultModelClassName #>> = [];
        if(typeof <#= HiddenFilterFieldName #> === 'undefined') return rslt;
        if(<#= HiddenFilterFieldName #> === null) return rslt;
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.get<#= MasterToClientKeyFieldsMapFieldName #>();
        let <#= MasterToClientFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = this.get<#= MasterToClientFieldsMapFieldName #>();
        for(let i in <#= HiddenFilterFieldName #>) {
            for(let j in <#= HiddenFilterFieldName #>[i]) {
                if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>).indexOf(i) > -1 ) {
                    if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>[i]).indexOf(j) > -1 ) {
                        for(let k in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                          if(!(typeof hf[i][j][k] === 'undefined' )) {
                            rslt.push({
                                fltrName: <#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm,
                                fltrDataType: this.getDtTp<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm),
                                fltrOperator: 'eq',
                                fltrValue: <#= HiddenFilterFieldName #>[i][j][k]
                            });
                          }
                        }
                    }
                }
                if( Object.keys(<#= MasterToClientFieldsMapFieldName #>).indexOf(i) > -1 ) {
                    if( Object.keys(<#= MasterToClientFieldsMapFieldName #>[i]).indexOf(j) > -1 ) {
                        for(let k in <#= MasterToClientFieldsMapFieldName #>[i][j]) {
                          if(!(typeof hf[i][j][k] === 'undefined' )) {
                            rslt.push({
                                fltrName: <#= MasterToClientFieldsMapFieldName #>[i][j][k],
                                fltrDataType: this.getDtTp<#= ValueSuffix #>(<#= MasterToClientFieldsMapFieldName #>[i][j][k]),
                                fltrOperator: 'eq',
                                fltrValue: <#= HiddenFilterFieldName #>[i][j][k]
                            });
                          }
                        }
                    }
                }
            }
        }
        return rslt;
    }

<#
    {
        List<string> errors = new List<string>();
        List<ModelViewForeignKeySerializable> mtcfks = CollectMasterToClientFieldsMap(Model, errors);
        foreach(string error in  errors) {
#>
<#= error #>
<#
        }
#>

    //
    // first key is Master View Name, 
    // second key is Direct Navigation Name, 
    // third key is Master View Property Name, 
    // value is a  Client View Property Name, i.e. Property Name of the Current View 
    protected _<#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = {
<#
        if (mtcfks != null) {
            string currentMasterView = "";
            bool isOpened = false;
            ModelViewSerializable masterModel = null;
            foreach(ModelViewForeignKeySerializable mtcfk in mtcfks) {
                if (currentMasterView != mtcfk.ViewName) {
                    masterModel = GetModelViewByViewName(Context, mtcfk.ViewName);
                    if(currentMasterView == "") {
#>
                '<#= mtcfk.ViewName #>' : {
<#
                    } else {
#>
                },
                '<#= mtcfk.ViewName #>' : {
<#
                    } // if(currentMasterView == "") {...} else {...}
                } // if (currentMasterView != mtcfk.ViewName) {...}
#>
                    '<#= mtcfk.NavigationName #>' : {
<#
                for(int i = 0; i < mtcfk.PrincipalKeyProps.Count; i++) {
                    ModelViewPropertyOfVwSerializable mstrProp = GetModelScalarPropByKeyProp(masterModel, mtcfk.PrincipalKeyProps[i]);
                    if(mstrProp == null) {
#>
//
// Errror: for the ModelView = <#= mtcfk.ViewName #> and PrincipalKey = <#= mtcfk.PrincipalKeyProps[i].OriginalPropertyName #>
//         could not find scalar property
//
<#
                    }
                    string isReq = "true";
                    if(mstrProp != null) {
                        isReq = mstrProp.IsRequiredInView ? "true" : "false";
                    }
                    ModelViewPropertyOfVwSerializable cProp = GetModelScalarPropByKeyProp(Model, mtcfk.ForeignKeyProps[i]);
                    ModelViewPropertyOfVwSerializable mProp = GetModelScalarPropByKeyProp(masterModel, mtcfk.PrincipalKeyProps[i]);
                    if(mProp == null || cProp == null) {
#>
// for the foreign key <#= mtcfk.NavigationName #> not all props have included into ViewModel
<#
                        continue;
                    }

#>
                        '<#= GetTypeScriptPropertyNameByKeyProperty(masterModel, mtcfk.PrincipalKeyProps[i]) #>' : {isMstrReq: <#= isReq #>, propNm:'<#= GetTypeScriptPropertyNameByKeyProperty(Model, mtcfk.ForeignKeyProps[i]) #>'},
<#
                }
#>
                    },
<#
                currentMasterView = mtcfk.ViewName;
            } // foreach(ModelViewForeignKeySerializable mtcfk in mtcfks) { ... }
            if (currentMasterView != "") {
#>
                }
<#
            }
        } // if (mtcfks != null) {...}
#>
    }; 
    public get<#= MasterToClientKeyFieldsMapFieldName #>(): {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} {
        return this._<#= MasterToClientKeyFieldsMapFieldName #>;
    }
    //
    // first key is Master View Name, 
    // second key is Direct Navigation Name, 
    // third key is Master View Property Name, 
    // value is a  Client View Property Name, i.e. Property Name of the Current View 
    protected _<#= MasterToClientFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = {
<#
        if (mtcfks != null) {
            string currentMasterView = "";
            ModelViewSerializable masterModel = null;
            foreach(ModelViewForeignKeySerializable mtcfk in mtcfks) {
                if (currentMasterView != mtcfk.ViewName) {
                    masterModel = GetModelViewByViewName(Context, mtcfk.ViewName);
                    if(currentMasterView == "") {
#>
                '<#= mtcfk.ViewName #>' : {
<#
                    } else {
#>
                },
                '<#= mtcfk.ViewName #>' : {
<#
                    }
                } // if (currentMasterView != mtcfk.ViewName) { ... }
#>
                    '<#= mtcfk.NavigationName #>' : {
<#
                List<ModelViewPropertyOfVwSerializable> sclrProperties = Model.ScalarProperties.Where(p => p.ForeignKeyName == mtcfk.NavigationName).ToList();
                foreach(ModelViewPropertyOfVwSerializable modelPrp in sclrProperties) {
                    if(modelPrp.IsSelected) {
                        // ModelViewPropertyOfVwSerializable modelPrp = GetScalarPropertyByViewPropertyName(Model, clntPrp.ViewPropertyName);
                        ModelViewPropertyOfVwSerializable masterProp = GetDirectMasterScalarPropertyByViewPropertyName(Model, modelPrp.ViewPropertyName, Context);
                        if ((modelPrp != null) && (masterProp != null)) {
#>
                        '<#= GetTypeScriptPropertyName(masterProp, masterModel) #>' : '<#= GetTypeScriptPropertyName(modelPrp, Model) #>',
<#
                        } 
                    }
                }
#>
                    },
<#
                currentMasterView = mtcfk.ViewName;
            } // foreach(ModelViewForeignKeySerializable mtcfk in mtcfks) { ... }
            if (currentMasterView != "") {
#>
                }
<#
            }
        } // if (mtcfks != null) { ... }
#>
    };
    public get<#= MasterToClientFieldsMapFieldName #>(): {[key: string]: {[key: string]: {[key: string]: string}}} {
        return this._<#= MasterToClientFieldsMapFieldName #>;
    }
<#
    }
#>
    public get<#= HiddenFilterByFltRsltSuffix #>(fr:  Array<<#= filterResultModelClassName #>> | any): {[key: string]: {[key: string]: {[key: string]: any}}} {
        let rslt: {[key: string]: {[key: string]: {[key: string]: any}}} = {};
        if ((typeof fr === 'undefined') || (typeof this._<#= MasterToClientKeyFieldsMapFieldName #> === 'undefined')) return rslt;
        if ((fr === null) || (this._<#= MasterToClientKeyFieldsMapFieldName #> === null)) return rslt;
        let currMstr: string = "";
        let currNav: string = "";
        for(let i in this._<#= MasterToClientKeyFieldsMapFieldName #>) {
            for(let j in this._<#= MasterToClientKeyFieldsMapFieldName #>[i]) {
                for(let k in this._<#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                    let fld = this._<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k];
                    let r: <#= filterResultModelClassName #> = fr.find((e:<#= filterResultModelClassName #> | any) => e.fltrName === fld.propNm);
                    if (typeof r === 'undefined') continue;
                    if (currMstr !== i) { currMstr = i; rslt[currMstr] = {} }
                    if (currNav !== j) { currNav = j; rslt[currMstr][currNav] = {} }
                    rslt[currMstr][currNav][k] = r.fltrValue;
                }
            }
        }
        return rslt;
    }
<#
    {
        List<string> errors = new List<string>();
        List<ModelViewSerializable> clVms = CollectClientToMasterFieldsMapModelViews(Model, Context, errors);
        foreach(string error in  errors) {
#>
<#= error #>
<#
        }
#>

    // first key is Client View Name, 
    // second key is Direct Navigation Name, 
    // third key is Client View Property Name, 
    // value is a Master View Property Name, i.e. Property Name of the Current View 
    protected _<#= ClientToMasterFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = {
<#
        if(clVms != null) {
            foreach(ModelViewSerializable clVm in clVms) {
                errors.Clear();
                List<ModelViewForeignKeySerializable> mlFks = CollectMasterToClientFieldsMapForMasterView(clVm, Model.ViewName, errors);
                foreach(string error in  errors) {
#>
<#= error #>
<#
                }
                if (mlFks != null) {
#>
                '<#= clVm.ViewName #>' : {
<#
                    foreach(ModelViewForeignKeySerializable mlFk in mlFks) {
#>
                    '<#= mlFk.NavigationName #>' : {
<#
                        for(int i = 0; i < mlFk.ForeignKeyProps.Count; i++) {
                            ModelViewPropertyOfVwSerializable cProp = GetModelScalarPropByKeyProp(clVm, mlFk.ForeignKeyProps[i]);
                            ModelViewPropertyOfVwSerializable mProp = GetModelScalarPropByKeyProp(Model, mlFk.PrincipalKeyProps[i]);
                            if(mProp == null || cProp == null) {
#>
// for the foreign key <#= mlFk.NavigationName #> not all props have included into ViewModel
<#
                                continue;
                            }
#>
                        '<#= GetTypeScriptPropertyNameByKeyProperty(clVm, mlFk.ForeignKeyProps[i]) #>' : '<#= GetTypeScriptPropertyNameByKeyProperty(Model, mlFk.PrincipalKeyProps[i]) #>',
<#
                        }
#>
                    },
<#
                    }
#>
                },
<#
                }
            } // end of: foreach(ModelViewSerializable clVm in clVms) {...}
        } // end of: if(clVms != null) {...}
#>
    }
    public get<#= ClientToMasterFieldsMapFieldName #>(): {[key: string]: {[key: string]: {[key: string]: string}}} {
        return this._<#= ClientToMasterFieldsMapFieldName #>;
    }
<#
    }
#>

<# 
    if (Model.IsWebApiSelectAll) { 
#>

    // 
    // HowTo:
    //
    // this.serviceRefInYourCode.<#= GetAllMethodName #>().subscibe(value =>{
    //    // handling value of type <#= GetInterfaceName(Model) #>[] 
    // },
    // error => {
    //    // handling error 
    // });
    // 
    <#= GetAllMethodName #>(): Observable<<#= GetInterfaceName(Model) #>[]> {

        return this.http.get<<#= GetInterfaceName(Model) #>[]>(this.serviceUrl+'/<#= GetAllMethodName #>');
        //    .pipe(
        //        catchError(this.handleError('<#= GetAllMethodName #>', []))
        //    );
    }

<#
    }
#>


<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
    // 
    // HowTo: flt is of type <#=GetInterfaceFilterName(Model)#> 
    //
    // this.serviceRefInYourCode.<#= GetWithFilterMethodName #>(flt).subscibe(value =>{
    //    // handling value of type <#= GetInterfacePageName(Model) #>
    // },
    // error => {
    //    // handling error 
    // });
    // 
    <#= GetWithFilterMethodName #>(filter: <#=GetInterfaceFilterName(Model)#>): Observable<<#= GetInterfacePageName(Model) #>> {
        let params: HttpParams  = new HttpParams();
        let hasFilter: boolean = false;
        if (!(typeof filter === 'undefined')) {
            if (!(filter === null )) {
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (! prop.IsUsedByfilter) {
                continue;
            }
#>
                if (!(typeof filter.<#= GetTypeScriptPropertyName(prop, Model)#> === 'undefined')) {
                    if ( Array.isArray(filter.<#= GetTypeScriptPropertyName(prop, Model)#> )) {
<#          if(prop.IsNullable) { #>
                        let hasNull: boolean = false;
<#          } #>
                        filter.<#= GetTypeScriptPropertyName(prop, Model)#>.forEach(function (value) {
                            if(!(typeof value === 'undefined')) {
                                if(!(value === null)) {
                                    params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', value<#= GetJavaScriptToStringMethod(prop) #>);
                                    hasFilter = true;
                                } 
<#          if(prop.IsNullable) { #>
                                else {
                                    hasNull = true;
                                }
<#          } #>
                            }
                        });
<#          if(prop.IsNullable) { #>
                        if(hasNull) {
                            params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', '');
                        }
<#          } #>
                    } // if ( Array.isArray(filter.<#= GetTypeScriptPropertyName(prop, Model)#> ))
                } // if (!(typeof filter.<#= GetTypeScriptPropertyName(prop, Model)#> === 'undefined'))
<#
        }
#>


<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (! prop.IsUsedByfilter) {
                continue;
            }
#>
                if (!(typeof  filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> === 'undefined')) {
                    if (Array.isArray(filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> )) {
                        filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#>.forEach(function (value) {
                            if(!(typeof value === 'undefined')) {
                                if(value === null) {
                                    params = params.append('<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>', '<#= EqualOperator #>');
                                } 
                                else {
                                    params = params.append('<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>', value<#=GetJavaScriptToStringMethod(prop)#>);
                                }
                            }
                        });
                    } // if (Array.isArray(filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#>))
                } // if (!(typeof  filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> === 'undefined'))
<#
        }
#>

                if (!(typeof filter.orderby === 'undefined')) {
                    if ( Array.isArray(filter.orderby)) {
                        filter.orderby.forEach(function (value) {
                            if (!(typeof value === 'undefined')) {
                                if(!(value === null)) {
                                    params = params.append('orderby', value);
                                    hasFilter = true;
                                }
                            }
                        });
                    }
                }
                if (!(typeof filter.page === 'undefined')) {
                    if (!(filter.page === null)) {
                        params = params.append('page', filter.page.toString());
                        hasFilter = true;
                    }
                }
                if (!(typeof filter.pagesize === 'undefined')) {
                    if (!(filter.pagesize === null)) {
                        params = params.append('pagesize', filter.pagesize.toString());
                        hasFilter = true;
                    }
                }
            } // if (!(filter === null ))
        } // if (!(typeof filter === 'undefined'))
        const options = hasFilter ? { params } : {};
        return this.http.get<<#= GetInterfacePageName(Model) #>>(this.serviceUrl+'/<#= GetWithFilterMethodName #>', options);
          //    .pipe(
          //        catchError(this.handleError('<#= GetWithFilterMethodName #>', []))
          //    );
    }
<#
    }
#>

<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
                localRouteManyName = GetManyByRepUnqMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {
#>

//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>

    // 
    // HowTo: {prm1, prm2, ..., prmN} -- primary/unique key
    //
    // this.serviceRefInYourCode.<#= localRouteName #>(prm1, prm2, ..., prmN ).subscibe(value =>{
    //    // handling value of type <#= GetInterfaceName(Model) #>
    // },
    // error => {
    //    // handling error 
    // });
    // 
    <#= localRouteName #>(
<# 
                {
                    int counter = 0;
                    foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                        if(counter > 0) { 
#>
                , <#= GetTypeScriptPropertyName(prop, Model) #>: <#= GetPropertyTypeScriptTypeName(prop) #> 
<#
                        } else {
#>
                  <#= GetTypeScriptPropertyName(prop, Model) #>: <#= GetPropertyTypeScriptTypeName(prop) #> 
<#
                            counter++;
                        }
                    }
                }
#>
        ): Observable<<#= GetInterfaceName(Model) #>> {
        let params: HttpParams  = new HttpParams();
        let hasFilter: boolean = false;
<#
                foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
                    if(!(primKeys.Contains(prop))) {
                        continue;
                    }
#>
        if (!(typeof <#= GetTypeScriptPropertyName(prop, Model) #> === 'undefined')) {
            if (!(<#= GetTypeScriptPropertyName(prop, Model) #> === null)) {
                params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', <#= GetTypeScriptPropertyName(prop, Model) #><#= GetJavaScriptToStringMethod(prop) #>);
                hasFilter = true;
            }
        }
<#
                }
#>
        const options = hasFilter ? { params } : {};
        return this.http.get<<#= GetInterfaceName(Model) #>>(this.serviceUrl+'/<#= localRouteName #>', options);
          // .pipe(
          //   catchError(this.handleError('<#= localRouteName #>', []))
          // );
    }

    <#= localRouteManyName #>(filter: <#=GetInterfaceFilterName(Model)#>): Observable<<#= GetInterfacePageName(Model) #>> {
        let params: HttpParams  = new HttpParams();
        let hasFilter: boolean = false;
        if (!(typeof filter === 'undefined')) {
            if (!(filter === null )) {

<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {


#>
                if (!(typeof filter.<#= GetTypeScriptPropertyName(prop, Model)#> === 'undefined')) {
                    if ( Array.isArray(filter.<#= GetTypeScriptPropertyName(prop, Model)#> )) {
<#          if(prop.IsNullable) { #>
                        let hasNull: boolean = false;
<#          } #>
                        filter.<#= GetTypeScriptPropertyName(prop, Model)#>.forEach(function (value) {
                            if(!(typeof value === 'undefined')) {
                                if(!(value === null)) {
                                    params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', value<#= GetJavaScriptToStringMethod(prop) #>);
                                    hasFilter = true;
                                } 
<#          if(prop.IsNullable) { #>
                                else {
                                    hasNull = true;
                                }
<#          } #>
                            }
                        });
<#          if(prop.IsNullable) { #>
                        if(hasNull) {
                            params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', '');
                        }
<#          } #>
                    } // if ( Array.isArray(filter.<#= GetTypeScriptPropertyName(prop, Model)#> ))
                } // if (!(typeof filter.<#= GetTypeScriptPropertyName(prop, Model)#> === 'undefined'))
<#
        } // foreach(ModelViewPropertyOfVwSerializable prop in primKeys) { }
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            if (primKeys.Any(p => p == prop)) continue;
            if(!IsUsedByForeignKey(prop, Model)) continue;
#>
                if (!(typeof filter.<#= GetTypeScriptPropertyName(prop, Model)#> === 'undefined')) {
                    if ( Array.isArray(filter.<#= GetTypeScriptPropertyName(prop, Model)#> )) {
<#          if(prop.IsNullable) { #>
                        let hasNull: boolean = false;
<#          } #>
                        filter.<#= GetTypeScriptPropertyName(prop, Model)#>.forEach(function (value) {
                            if(!(typeof value === 'undefined')) {
                                if(!(value === null)) {
                                    params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', value<#= GetJavaScriptToStringMethod(prop) #>);
                                    hasFilter = true;
                                } 
<#          if(prop.IsNullable) { #>
                                else {
                                    hasNull = true;
                                }
<#          } #>
                            }
                        });
<#          if(prop.IsNullable) { #>
                        if(hasNull) {
                            params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', '');
                        }
<#          } #>
                    } // if ( Array.isArray(filter.<#= GetTypeScriptPropertyName(prop, Model)#> ))
                } // if (!(typeof filter.<#= GetTypeScriptPropertyName(prop, Model)#> === 'undefined'))
<#
        }

        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>
                if (!(typeof  filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> === 'undefined')) {
                    if (Array.isArray(filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> )) {
                        filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#>.forEach(function (value) {
                            if(!(typeof value === 'undefined')) {
                                if(value === null) {
                                    params = params.append('<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>', '<#= EqualOperator #>');
                                } 
                                else {
                                    params = params.append('<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>', value<#=GetJavaScriptToStringMethod(prop)#>);
                                }
                            }
                        });
                    } // if (Array.isArray(filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#>))
                } // if (!(typeof  filter.<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix)#> === 'undefined'))
<#
        }
#>

                if (!(typeof filter.orderby === 'undefined')) {
                    if ( Array.isArray(filter.orderby)) {
                        filter.orderby.forEach(function (value) {
                            if (!(typeof value === 'undefined')) {
                                if(!(value === null)) {
                                    params = params.append('orderby', value);
                                    hasFilter = true;
                                }
                            }
                        });
                    }
                }
                if (!(typeof filter.page === 'undefined')) {
                    if (!(filter.page === null)) {
                        params = params.append('page', filter.page.toString());
                        hasFilter = true;
                    }
                }
                if (!(typeof filter.pagesize === 'undefined')) {
                    if (!(filter.pagesize === null)) {
                        params = params.append('pagesize', filter.pagesize.toString());
                        hasFilter = true;
                    }
                }
            } // if (!(filter === null ))
        } // if (!(typeof filter === 'undefined'))
        const options = hasFilter ? { params } : {};
        return this.http.get<<#= GetInterfacePageName(Model) #>>(this.serviceUrl+'/<#= localRouteManyName #>', options);
    }

<#
            } // the end of: if (!indIsCorrect) {...} else {}
        } // the end of: foreach(ModelViewUniqueKeyOfVwSerializable pk uniqueKeys) {}
    } // if (Model.IsWebApiSelectOneByPrimarykey) { ... }
#>

<# 
    if (Model.IsWebApiUpdate) { 
#>
    // 
    // HowTo: item is of type <#= GetInterfaceName(Model) #> 
    //
    // this.serviceRefInYourCode.<#= UpdateOneMethodName #>(item).subscibe(value =>{
    //    // handling value of type <#= GetInterfaceName(Model) #>
    // },
    // error => {
    //    // handling error 
    // });
    // 
    <#= UpdateOneMethodName #>(item: <#= GetInterfaceName(Model) #>): Observable<<#= GetInterfaceName(Model) #>> {

        return this.http.put<<#= GetInterfaceName(Model) #>>(this.serviceUrl+'/<#= UpdateOneMethodName #>', item); //, httpOptions);
        //  .pipe(
        //    catchError(this.handleError('<#= UpdateOneMethodName #>', item))
        //  );
    }
<#
    } 
#>

<# 
    if (Model.IsWebApiAdd) { 
        List<ModelViewPropertyOfVwSerializable> identProps = GetDatabaseGeneratedProp(Model);
#>
    // 
    // HowTo: item is of type <#= GetInterfaceName(Model) #> 
    //
    // this.serviceRefInYourCode.<#= AddOneMethodName #>(item).subscibe(value =>{
    //    // handling value of type <#= GetInterfaceName(Model) #>
    // },
    // error => {
    //    // handling error 
    // });
    // 
    <#= AddOneMethodName #>(item: <#=GetInterfaceName(Model)#>): Observable<<#=GetInterfaceName(Model)#>> {
<#
        foreach (ModelViewPropertyOfVwSerializable identProp in identProps) {
#>
        if(!(typeof item === 'undefined')) {
            if(!(item === null)) {
                if(typeof item.<#= GetTypeScriptPropertyName(identProp, Model) #> === 'undefined') {
                    item['<#= GetTypeScriptPropertyName(identProp, Model) #>'] = <#= GetDefaultVal(identProp) #>;
                }
                if(item.<#= GetTypeScriptPropertyName(identProp, Model) #> === null) {
                    item['<#= GetTypeScriptPropertyName(identProp, Model) #>'] = <#= GetDefaultVal(identProp) #>;
                }
            }
        }
<#
        }
#>
        return this.http.post<<#=GetInterfaceName(Model)#>>(this.serviceUrl+'/<#= AddOneMethodName #>', item); //, httpOptions);
        // .pipe(
        //      catchError(this.handleError('<#= AddOneMethodName #>', item))
        // );   
    }
<#
    } 
#>

<# 
    if (Model.IsWebApiDelete) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;

#>
    // 
    // HowTo: item is of type <#= GetInterfaceName(Model) #> 
    //
    // this.serviceRefInYourCode.<#= DeleteOneMethodName #>(item).subscibe(value =>{
    //    // handling value of type <#= GetInterfaceName(Model) #>
    // },
    // error => {
    //    // handling error 
    // });
    // 
    <#= DeleteOneMethodName #>(<# 
        {
            int counter = 0;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                if(counter > 0) { #>, <#} #><#= GetTypeScriptPropertyName(prop, Model) #>: <#= GetPropertyTypeScriptTypeName(prop) #> <#
                counter++;
            }
        }
        #>): Observable<<#= GetInterfaceName(Model) #>> {
        let params: HttpParams  = new HttpParams();
        let hasFilter: boolean = false;
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(! (primKeys.Contains(prop))) {
                continue;
            }
#>
        if (!(typeof <#= GetTypeScriptPropertyName(prop, Model) #> === 'undefined')) {
            if (!(<#= GetTypeScriptPropertyName(prop, Model) #> === null)) {
                params = params.append('<#= GetTypeScriptPropertyName(prop, Model) #>', <#= GetTypeScriptPropertyName(prop, Model) #><#= GetJavaScriptToStringMethod(prop) #>);
                hasFilter = true;
            }
        }
<#
    }
#>
        const options = hasFilter ? { params } : {};
        return this.http.delete<<#=GetInterfaceName(Model)#>>(this.serviceUrl+'/<#= DeleteOneMethodName #>', options); //, httpOptions);
        // .pipe(
        //      catchError(this.handleError('<#= DeleteOneMethodName #>', item))
        // );   
    }
<#
        }
    } 
#>

    <#= src2destMethodName #>(src: <#= GetInterfaceName(Model) #>, dest: <#= GetInterfaceName(Model) #>) {
        if ((typeof src === 'undefined') || (typeof dest === 'undefined')) return;
        if ((src === null) || (dest === null)) return;
<#
            foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
#>
        if(typeof src.<#= GetTypeScriptPropertyName(prop, Model) #> === 'undefined') {
            dest['<#= GetTypeScriptPropertyName(prop, Model) #>'] = null;
        } else {
            dest['<#= GetTypeScriptPropertyName(prop, Model) #>'] = src.<#= GetTypeScriptPropertyName(prop, Model) #>;
        }
<#                
            }
#>        
    }

    <#= row2FilterRsltMethodName #>(r: <#= GetInterfaceName(Model) #>| any): Array<<#= filterResultModelClassName #>> {
        let rslt: Array<<#= filterResultModelClassName #>> = [];
        if (typeof r === 'undefined') return rslt;
        if (r === null) return rslt;
        for(let i in this._Values) {
            if (!(typeof r[i] === 'undefined')) {
                rslt.push({
                    fltrName: i,
                    fltrDataType: this._Values[i].dttp,
                    fltrOperator: 'eq',
                    fltrValue: r[i]
                });
            }
        }
        return rslt
    }

<#                
  if(false) {
#>        

    <#= filterRslt2rowMethodName #>(f: Array<<#= filterResultModelClassName #>>|any): <#= GetInterfaceName(Model) #>|null {
        if (typeof f === 'undefined') return null;
        if (f === null) return null;
        if (!Array.isArray(f)) return null;
        let isDef = false;
        let rslt: <#= GetInterfaceName(Model) #>|any ={};
        f.forEach((i: <#= filterResultModelClassName #>) => {
            if(!(typeof i.fltrValue === 'undefined')) {
                if(i.fltrName in this._Values) {
                    rslt[i.fltrName] = i.fltrValue;
                    isDef = true;
                }
            }
        });
        if (isDef) return rslt;
        return null;
    }

    <#= row2FilterMethodName #>(r: <#= GetInterfaceName(Model) #>|any): <#= GetInterfaceFilterName(Model) #> {
        let rslt: <#= GetInterfaceFilterName(Model) #>|any = {};
        if (typeof r === 'undefined') return rslt;
        if (r === null) return rslt;
        for(let i in this._Values) {
            if (!(typeof r[i] === 'undefined')) {
                rslt[i] = [r[i]];
            }
        }
        return rslt;
    }
    <#= filter2rowMethodName #>(f: <#= GetInterfaceFilterName(Model) #>|any): <#= GetInterfaceName(Model) #>|null {
        if (typeof f === 'undefined') return null;
        if (f === null) return null;
        let isDef = false;
        let rslt: <#= GetInterfaceName(Model) #>|any ={};
        for(let i in this._Values) {
            if(typeof f[i] === 'undefined')
            if (Array.isArray( f[i] )) {
                if(f[i].length > 0) {
                    if (!(typeof f[i][0] === 'undefined')) {
                        rslt[i] = f[i][0];
                        isDef = true;
                    }
                }
            }
        }
        if (isDef) return rslt;
        return null;
    }
<#                
  } // if(false) {}
#>        

}

<#+

    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetJavaScriptServiceName(ModelViewSerializable model) {
        string  result = model.ViewName + "Service";
        return result.First().ToString().ToUpper() + result.Substring(1);
    }
    bool HasAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasAtribute(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName))) {
            if (sclrProp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in sclrProp.Attributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    bool HasFluentAtributeWithValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrVal) {
        if ((sclrProp != null) && (!string.IsNullOrEmpty(attrName)) && (!string.IsNullOrEmpty(attrVal)) ) {
            if (sclrProp.FAPIAttributes != null) {
                foreach(ModelViewFAPIAttributeSerializable a in sclrProp.FAPIAttributes) {
                    if (attrName.Equals(a.AttrName, StringComparison.InvariantCultureIgnoreCase)) {
                        if (a.VaueProperties != null) {
                            foreach(ModelViewFAPIAttributePropertySerializable v in a.VaueProperties) {
                                if(!string.IsNullOrEmpty( v.PropValue )) {
                                    if(v.PropValue.ToLower().Contains(attrVal)) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    bool HasFluentAtribute(ModelViewPropertyOfVwSerializable sclrProp, string[] attrName) {
        if ((sclrProp != null) && (attrName != null)  ) {
            if ((sclrProp.FAPIAttributes != null) && (attrName.Length > 0)) {
                return sclrProp.FAPIAttributes.Any(a => attrName.Contains(a.AttrName));
            }
        }
        return false;
    }

    bool IsIdentityProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtribute(prop, "ConcurrencyCheck") || HasAtribute(prop, "Timestamp")) {
            return true;
        }
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    List<ModelViewPropertyOfVwSerializable> GetDatabaseGeneratedProp(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> rslt = new List<ModelViewPropertyOfVwSerializable>();
        if(model == null) return null;
        if(model.ScalarProperties == null) return null;
        foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in model.ScalarProperties) {
            if(IsIdentityProperty(modelViewPropertyOfVwSerializable, model)) {
                rslt.Add(modelViewPropertyOfVwSerializable);
            }
        }
        return rslt;
    }
    string GetDefaultVal(ModelViewPropertyOfVwSerializable prop) {
        if(prop == null) {
            return "0";
        }
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "false";
                break;
            case "system.guid":
            case "system.string":
                result =  "'0'";
                break;
            default:
                result =  "0";
                break;
        }
        return result;
    }

    string GetPropertyTypeScriptTypeName(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetJavaScriptToStringMethod(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.datetime": 
                result =  ".toString()"; // .toDateString()
                break;
            case "system.guid":
            case "system.string":
                result =  "";
                break;
            default:
                result =  ".toString()";
                break;
        }
        return result;
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    ModelViewPropertyOfVwSerializable GetModelScalarPropByKeyProp(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable rslt = null;
        if ((model == null) || (pk == null)) return null;
        if (model.ScalarProperties == null) return null;
        ModelViewPropertyOfVwSerializable scProp = 
            model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
        if (scProp != null) return scProp;
        if (model.ForeignKeys != null) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                scProp = null;
                if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                    int cnt = fk.ForeignKeyProps.Count;
                    if (cnt < fk.PrincipalKeyProps.Count)
                    {
                        cnt = fk.PrincipalKeyProps.Count;
                    }
                    for(int i = 0; i < cnt; i++)
                    {
                        if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                        {
                            scProp=
                                model.ScalarProperties.Where(p =>
                                ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                        }
                        if(scProp != null) return scProp;
                    }
                }
            }
        }
        return null;
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimKeyFromList(List<ModelViewUniqueKeyOfVwSerializable> inuniqueKeys) {
        if(inuniqueKeys == null) return null;
        return inuniqueKeys.Where(u => u.IsPrimary).FirstOrDefault();
    }
    ModelViewUniqueKeyOfVwSerializable GetModelUniqueKeyByNameFromList(List<ModelViewUniqueKeyOfVwSerializable> inuniqueKeys, string name) {
        if (inuniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return inuniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return inuniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    ModelViewUniqueKeySerializable GetModelUniqueKeyByNameFromModel(ModelViewSerializable model, string name) {
        if (model == null) return null;
        if (model.UniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return model.UniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return model.UniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    bool CheckModelIfIndexIsCorrect(ModelViewSerializable model,ModelViewUniqueKeyOfVwSerializable indx, out string error) {
        if((model == null) || (indx == null)) {
            error = "Input params is not defined";
            return false;
        }
        if(indx.UniqueKeyProperties == null) {
            error = "UniqueKeyProperties of the Index are not defined";
            return false;
        }
        if(indx.UniqueKeyProperties.Count < 1) {
            if(indx.IsPrimary)
                error = "UniqueKeyProperties.Count of the Primary Index is less than 1";
            else 
                error = "UniqueKeyProperties.Count of the Unique Index (UniqueKeyName == "+ indx.UniqueKeyName + ") is less than 1";
            return false;
        }

        if(indx.IsPrimary) {
            if(model.PrimaryKeyProperties == null) {
                error = "PrimaryKeyProperties of the model are not defined";
                return false;
            }
            if (model.PrimaryKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Index fields are included in the Model";
                return false;
            }
        } else {
            if(model.UniqueKeys == null) {
                error = "UniqueKeys of the model are not defined (UniqueKeyName == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(string.IsNullOrEmpty(indx.UniqueKeyName)) {
                error = "The Name of the Index is not defined (UniqueKeyName)";
                return false;
            }
            ModelViewUniqueKeySerializable mindx = model.UniqueKeys.Where(i => i.UniqueKeyName == indx.UniqueKeyName).FirstOrDefault();
            if(mindx == null) {
                error = "Could not find index in model by name (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(mindx.UniqueKeyProperties == null) {
                error = "UniqueKeyProperties of the Unique Index (Unique Index Name == "+ indx.UniqueKeyName + ") are not defined";
                return false;
            }
            if(mindx.UniqueKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Unique Index fields are included in the Model (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
        }
        error = "";
        return true;
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop = GetScalarPropByOriginaPropName(modelViewKeyPropertySerializable.OriginalPropertyName, model);
            if(prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }


    ModelViewUniqueKeyOfVwSerializable GetModelPrimaryKey(ModelViewSerializable model) {
        if (model == null)  return null;
        if (model.PrimaryKeyProperties == null) return null;
        if (model.PrimaryKeyProperties.Count < 1) return null;
        List<ModelViewPropertyOfVwSerializable> props = GetModelPrimaryKeyProps(model);
        if(props.Count != model.PrimaryKeyProperties.Count) return null;
        return new ModelViewUniqueKeyOfVwSerializable() {
            UniqueKeyName = null,
            IsPrimary = true,
            UniqueKeyProperties = props
        };
    }
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) { 
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => 
                (p.OriginalPropertyName == origPropName) && 
                string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if ((fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1)) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => 
                        (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && 
                        (p.ForeignKeyName == fk.NavigationName) && 
                        (p.ForeignKeyName == p.ForeignKeyNameChain)
                    ).FirstOrDefault();
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }
    List<ModelViewPropertyOfVwSerializable> GetModelUniqueKeyProps(ModelViewSerializable model, ModelViewUniqueKeySerializable uk) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (uk == null))
        {
            return result;
        }
        if ((uk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in uk.UniqueKeyProperties) {
            ModelViewPropertyOfVwSerializable prop = GetScalarPropByOriginaPropName(modelViewKeyPropertySerializable.OriginalPropertyName, model);
            if(prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    List<ModelViewUniqueKeyOfVwSerializable> GetModelUniqueKeys(ModelViewSerializable model, List<ModelViewUniqueKeyOfVwSerializable> rsltKeys) {
        if((model == null) || (rsltKeys == null)) return rsltKeys;
        if ((model.UniqueKeys == null) || (model.ScalarProperties == null)) return rsltKeys;
        foreach(ModelViewUniqueKeySerializable uk in model.UniqueKeys) {
            if(uk.UniqueKeyProperties == null) continue;
            if(uk.UniqueKeyProperties.Count < 1) continue;
            List<ModelViewPropertyOfVwSerializable> ukprops = GetModelUniqueKeyProps(model, uk);
            if (ukprops.Count == uk.UniqueKeyProperties.Count) {
                rsltKeys.Add( new ModelViewUniqueKeyOfVwSerializable() {
                    UniqueKeyName = uk.UniqueKeyName,
                    IsPrimary = false,
                    UniqueKeyProperties = ukprops
                });
            }
        }
        return rsltKeys;
    }
    List<ModelViewPropertyOfVwSerializable> GetModelAllUniqueKeysProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if(model.UniqueKeys == null) return result;
        foreach(ModelViewUniqueKeySerializable uk in model.UniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> ukprops = GetModelUniqueKeyProps(model, uk);
            foreach(ModelViewPropertyOfVwSerializable ukp in ukprops) {
                if (!result.Any(p => p == ukp)) result.Add(ukp);
            }
        }
        return result;
    }



    List<ModelViewForeignKeySerializable> CollectMasterToClientFieldsMap(ModelViewSerializable model, List<string> errors) {
        List<ModelViewForeignKeySerializable> rslt = null;
        if(model == null) {
            if(errors != null) {
                errors.Add("// CollectMasterToClientFieldsMap: Input param is not defined");
            }
            return rslt;
        }
        if (model.ForeignKeys == null) {
            return rslt;
        }
        List<string> passedViews = new List<string>();
        foreach(ModelViewForeignKeySerializable mlFk in model.ForeignKeys) {
            if(string.IsNullOrEmpty(mlFk.ViewName)) {
                if(errors != null) {
                    errors.Add("//");
                    errors.Add("// Error: CollectMasterToClientFieldsMap:");
                    errors.Add("//        Foreigkey is not completely defined");
                    errors.Add("//        ViewName = " + mlFk.ViewName);
                    errors.Add("//        NavigationName = " + mlFk.NavigationName);
                    errors.Add("//        NavigationEntityName = " + mlFk.NavigationEntityName);
                    errors.Add("//");
                }
                continue;
            }
            if(passedViews.Any(e => mlFk.ViewName == e)) { 
                continue;
            }
            passedViews.Add(mlFk.ViewName);
            List<ModelViewForeignKeySerializable> intlpFks = model.ForeignKeys.Where(f => f.ViewName == mlFk.ViewName).ToList();
            foreach(ModelViewForeignKeySerializable intlpFk in intlpFks) {
                if (
                    string.IsNullOrEmpty(intlpFk.NavigationName) ||
                    string.IsNullOrEmpty(intlpFk.NavigationEntityName) ||
                    string.IsNullOrEmpty(intlpFk.ViewName) ||
                    intlpFk.PrincipalKeyProps == null ||
                    intlpFk.ForeignKeyProps == null
                   ) 
                {
                    if(errors != null) {
                        errors.Add("//");
                        errors.Add("// Error: CollectMasterToClientFieldsMap:");
                        errors.Add("//        Foreigkey is not completely defined");
                        errors.Add("//        ViewName = " + intlpFk.ViewName);
                        errors.Add("//        NavigationName = " + intlpFk.NavigationName);
                        errors.Add("//        NavigationEntityName = " + intlpFk.NavigationEntityName);
                        errors.Add("//");
                    }
                    continue;
                }
                if (
                    (intlpFk.PrincipalKeyProps.Count != intlpFk.ForeignKeyProps.Count) || 
                    (intlpFk.PrincipalKeyProps.Count < 1) ||
                    (intlpFk.ForeignKeyProps.Count < 1) 
                    ) 
                {
                    if(errors != null) {
                        errors.Add("//");
                        errors.Add("// Error: CollectMasterToClientFieldsMap:");
                        errors.Add("//        Foreigkey is not completely defined");
                        errors.Add("//        ViewName = " + intlpFk.ViewName);
                        errors.Add("//        NavigationName = " + intlpFk.NavigationName);
                        errors.Add("//        NavigationEntityName = " + intlpFk.NavigationEntityName);
                        errors.Add("//");
                    }
                    continue;
                }
                if(rslt == null) {
                    rslt = new List<ModelViewForeignKeySerializable>();
                }
                rslt.Add(intlpFk);
            }
        }
        return rslt;
    }
    List<ModelViewForeignKeySerializable> CollectMasterToClientFieldsMapForMasterView(ModelViewSerializable clentModel, string masterViewName, List<string> errors) {
        List<ModelViewForeignKeySerializable> rslt = null; 
        if(clentModel == null) {
            if(errors != null) {
                errors.Add("// CollectMasterToClientFieldsMapForMasterView: Input param is not defined");
            }
            return rslt;
        }
        if ((clentModel.ForeignKeys == null) || (string.IsNullOrEmpty(masterViewName))) {
            return rslt;
        }
        List<ModelViewForeignKeySerializable> intlpFks = clentModel.ForeignKeys.Where(f => f.ViewName == masterViewName).ToList();
        foreach(ModelViewForeignKeySerializable intlpFk in intlpFks) {
            if (
                string.IsNullOrEmpty(intlpFk.NavigationName) ||
                string.IsNullOrEmpty(intlpFk.NavigationEntityName) ||
                string.IsNullOrEmpty(intlpFk.ViewName) ||
                intlpFk.PrincipalKeyProps == null ||
                intlpFk.ForeignKeyProps == null
                ) 
            {
                if(errors != null) {
                    errors.Add("//");
                    errors.Add("// Error: CollectMasterToClientFieldsMapForMasterView:");
                    errors.Add("//        Foreigkey is not completely defined");
                    errors.Add("//        ViewName = " + intlpFk.ViewName);
                    errors.Add("//        NavigationName = " + intlpFk.NavigationName);
                    errors.Add("//        NavigationEntityName = " + intlpFk.NavigationEntityName);
                    errors.Add("//");
                }
                continue;
            }
            if (
                (intlpFk.PrincipalKeyProps.Count != intlpFk.ForeignKeyProps.Count) || 
                (intlpFk.PrincipalKeyProps.Count < 1) ||
                (intlpFk.ForeignKeyProps.Count < 1) 
                ) 
            {
                if(errors != null) {
                    errors.Add("//");
                    errors.Add("// Error: CollectMasterToClientFieldsMapForMasterView:");
                    errors.Add("//        Foreigkey is not completely defined");
                    errors.Add("//        ViewName = " + intlpFk.ViewName);
                    errors.Add("//        NavigationName = " + intlpFk.NavigationName);
                    errors.Add("//        NavigationEntityName = " + intlpFk.NavigationEntityName);
                    errors.Add("//");
                }
                continue;
            }
            if(rslt == null) {
                rslt = new List<ModelViewForeignKeySerializable>();
            }
            rslt.Add(intlpFk);
        }
        return rslt;
    }
    ModelViewSerializable GetModelViewByViewName(DbContextSerializable context, string ViewName) {
        if(context == null) return null;
        if(context.ModelViews == null) return null;
        return context.ModelViews.Where(mv => mv.ViewName == ViewName).FirstOrDefault();
    }
    ModelViewPropertyOfVwSerializable GetDirectMasterScalarPropertyByViewPropertyName(ModelViewSerializable model, string viewPropertyName, DbContextSerializable context) {
        if(context == null) return null;
        ModelViewPropertyOfVwSerializable prop = GetScalarPropertyByViewPropertyName(model, viewPropertyName);
        if ((prop == null) || (model.ForeignKeys == null) || (context.ModelViews ==null)) return null;
        if(string.IsNullOrEmpty(prop.ForeignKeyName) || string.IsNullOrEmpty(prop.ForeignKeyNameChain)) return null;
        ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyName).FirstOrDefault();
        if(fk == null) return null;
        ModelViewSerializable masterVw = context.ModelViews.Where(m => m.ViewName == fk.ViewName).FirstOrDefault();
        if(masterVw == null) return null;
        ModelViewPropertyOfVwSerializable masterProp = null;
        if(prop.ForeignKeyName == prop.ForeignKeyNameChain) {
            return masterVw.ScalarProperties.Where(p => ((p.OriginalPropertyName == prop.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain))).FirstOrDefault();
        } else {
            string flt = "";
            if(prop.ForeignKeyNameChain.StartsWith(prop.ForeignKeyName+".")) {
                flt = prop.ForeignKeyNameChain.Substring(prop.ForeignKeyName.Length+1);
            }
            return masterVw.ScalarProperties.Where(p => ((p.OriginalPropertyName == prop.OriginalPropertyName) && (p.ForeignKeyNameChain == flt))).FirstOrDefault();
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetTypeScriptPropertyNameByKeyProperty(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable prop = GetModelScalarPropByKeyProp(model, pk);
        return GetTypeScriptPropertyName(prop, model);
    }
    ModelViewPropertyOfVwSerializable GetScalarPropertyByViewPropertyName(ModelViewSerializable model, string viewPropertyName) {
        if ((model == null) || (string.IsNullOrEmpty(viewPropertyName))) return null;
        return model.ScalarProperties.Where(p => p.ViewPropertyName == viewPropertyName).FirstOrDefault();
    }
    string GetTypeScriptPropertyNameByViewPropertyName(ModelViewSerializable model, string viewPropertyName) {
        ModelViewPropertyOfVwSerializable prop = GetScalarPropertyByViewPropertyName(model, viewPropertyName);
        return GetTypeScriptPropertyName(prop, model);
    }
    List<ModelViewSerializable> CollectClientToMasterFieldsMapModelViews(ModelViewSerializable model, DbContextSerializable context, List<string> errors) {
        List<ModelViewSerializable> rslt = null;
        if ((model == null) || (context == null)) {
            if(errors != null) {
                errors.Add("// CollectClientToMasterFieldsMapModelViews: Input param is not defined");
            }
            return rslt;
        }
        if(context.ModelViews == null) {
            if(errors != null) {
                errors.Add("// CollectClientToMasterFieldsMapModelViews: Input param is not defined : Context.ModelViews is empty");
            }
            return rslt;
        }
        foreach(ModelViewSerializable modelView in context.ModelViews) {
            if(modelView.ForeignKeys == null) continue;
            if (modelView.ForeignKeys.Any(f => f.ViewName == model.ViewName)) {
                if(rslt == null) rslt = new List<ModelViewSerializable>();
                rslt.Add(modelView);
            }
        }
        return rslt;
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    bool IsDatabaseGeneratedProperty(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (HasAtribute(prop, "ConcurrencyCheck") || HasAtribute(prop, "Timestamp")) {
            return true;
        }
        if (HasAtributeWithValue(prop, "DatabaseGenerated", "identity") || HasAtributeWithValue(prop, "DatabaseGenerated", "computed")) {
            return true;
        }
        if(HasFluentAtribute(prop, new string[] {"UseSqlServerIdentityColumn", "ForSqlServerUseSequenceHiLo", "ValueGeneratedOnAdd", "ValueGeneratedOnAddOrUpdate", "IsConcurrencyToken", "IsRowVersion"} )) {
            return true;
        }
        return HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "identity") || HasFluentAtributeWithValue(prop, "HasDatabaseGeneratedOption", "computed");
    }
    bool IsUsedByForeignKey(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return false;
        if (model.ForeignKeys == null) return false;
        if (model.ForeignKeys.Count < 1) return false;
        if(string.IsNullOrEmpty( prop.ForeignKeyName )) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                if (fk.ForeignKeyProps != null) {
                    if(fk.ForeignKeyProps.Any(k => k.OriginalPropertyName == prop.OriginalPropertyName)) return true;
                }
            }
        } else if (prop.ForeignKeyName == prop.ForeignKeyNameChain) {
            ModelViewForeignKeySerializable fk01 = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyName).FirstOrDefault();
            if(fk01 == null) return false;
            if ((fk01.PrincipalKeyProps != null) && (fk01.ForeignKeyProps != null)) {
                if(fk01.PrincipalKeyProps.Count == fk01.ForeignKeyProps.Count) {
                    if ( fk01.PrincipalKeyProps.Any(k => k.OriginalPropertyName == prop.OriginalPropertyName) ) return true;
                }
            }
        }
        return false;
    }

#>