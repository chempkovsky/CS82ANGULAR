<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="json" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#
    bool localize = Context.Localize;
    string frasesPropName           = "frases";
    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string OperatorSufix        = "Oprtr";
    string EqualOperator        = "eq";

    // WebApi service's method names

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";
// set _IsDefined

    Dictionary<string, string> RegExps = new Dictionary<string, string>() {
            { "RegExpGuid"       , @"/^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$/" },
            { "RegExpInteger"    , @"/^[-+]?\d+$/" },
            { "RegExpFloat"      , @"/^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/" },
            { "RegExpEmail"      , @"/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/" },
            { "RegExpCurrency"   , @"/(?=.*?\d)^\$?(([1-9]\d{0,2}(,\d{3})*)|\d+)?(\.\d{1,2})?$/" }
            };

    string ComboSufix                   = "CmbCntrl";
    string ButtonSufix                  = "BttnItm";
    string ButtonDisable                = "BttnDsnbl";
    string TypeaheadSufix               = "TphdCntrl";
    string DataSourceSufix              = "DtSrc";
    string TypeaheadDisplaySufix        = "DsplFn";


    string SearchClickSufix             = "SrchClck";

    string formServicePrefix            = "frmSrv";

    string MainFormGroupName            = "mainFormGroup";
    string RootDataSource               = "rootDataSource";

    
    string FormControlModelSelector     = "eform-control-model";
    string FormControlModelPropName     = "eformControlModel";

    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";
    string CanAddSelector               = "can-add";
    string CanAddPropName               = "canAdd";
    string CanUpdSelector               = "can-update";
    string CanUpdPropName               = "canUpdate";
    string CanDelSelector               = "can-delete";
    string CanDelPropName               = "canDelete";
    string BeforeSubmitSelector         = "before-submit";
    string BeforeSubmitPropName         = "beforeSubmit";
    string AfterSubmitSelector          = "after-submit";
    string AfterSubmitPropName          = "afterSubmit";
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string SubscriptionsPropName                = "Subscriptions";
    string OnMasterChangedPropName              = "OnMasterChanged";
    string submitOnMasterChangedMethodName      = "submitOnMasterChanged";
    string OnDetailChangedPropName              = "OnDetailChanged";
    string submitOnDetailChangedMethodName      = "submitOnDetailChanged";
    string AfterMasterChangedPropName           = "AfterMasterChanged";
    string AfterPropsChangedPropName            = "AfterPropsChanged";
    string OnIsDefinedChangedPropName           = "OnIsDefinedChanged";
    string OnUpdatePropName                     = "OnUpdate";
    string OnAddPropName                        = "OnAdd";
    string OnDeletePropName                     = "OnDelete";
    string ClearPartiallyMethodName             = "clearPartially";
    string GetCllctByFldFilterMethodName        = "getCllctionByFldFilter";
    string Interface2ValuesMethodName           = "interface2Values";
    string GetCllctByCurrDirMstrsMethodName     = "getCllctionByCurrDirMstrs";
    string ValueSuffix                          = "Value";
    string IsSetFilterByCurrDirMstrsMethodName  = "isSetFilterByCurrDirMstrs";
    string GetWSFltrRsltByCurrDirMstrsMethodName= "getWSFltrRsltByCurrDirMstrs";
    string Values2InterfaceMethodName           = "values2Interface";
    string UpdateByHiddenFilterFieldsMethodName = "updateByHiddenFilterFields";
    string ClearMethodName                      = "clear";
    string HiddenFilterFieldName                = "HiddenFilter";
    string HiddenFilterByFltRsltSuffix          = "HiddenFilterByFltRslt";
    string HiddenFilterAsFltRsltSuffix          = "HiddenFilterAsFltRslt";
    string RefreshMethodName                    = "refresh";
    string DoEmitEventMethodName                = "doEmitEvent";
    string DoSubmitMethodName                   = "doSubmit";
    string IsDefinedFieldName                   = "IsDefined";
    string IsNewSuffix                          = "IsNew";
    string RefreshIsDefinedMethodName           = "refreshIsDefined";
    string CalcIsDefinedMethodName              = "calcIsDefined";
    string OnDetailHFChangedPropName            = "OnDetailHFChanged";
    string submitOnDetailHFChangedMethodName    = "submitOnDetailHFChanged";
    string HiddenFilterByUndHFSuffix            = "HiddenFilterByUndHF";
    string OnCommonDSChangedPropName            = "OnCommonDSChanged";
    string submitOnCommonDSChangedMethodName    = "submitOnCommonDSChanged";


    string TitlePropName                        = "title";
    string TitleCaptionVal                      = "Select Item";
    string SelectedItemsPropName                = "selectedItems";
    string AppSettingServicePropName            = "appGlblSettings";
    string ShowErrorMethodName                  = "showError";
    string AppearancePropName                   = "appearance";
    string ShowFilterPropName                   = "showFilter";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";
    
    string captionPropName                      = "caption";
    string captionSelector                      = "caption";
    string DlgSrvPrefix                         = "dlgSrv";


    int CurrentInputTypeId = 3;


    List<string> SearchDialogViewsList = new List<string>();
    List<string> ViewsList = new List<string>();
    // ForeignKeyNameChain is a first argument
    // ModelView is a second argument
    // ModelViewUIFormPropertySerializable is a third argument
    // InputTypeEnum is a fourth argument
    List<Tuple<string, ModelViewSerializable, ModelViewUIFormPropertySerializable, InputTypeEnum>> ForeignKeyNameChainList = 
        GetForeignKeyNameChainStructList(Model, Context, CurrentInputTypeId, new List<Tuple<string, ModelViewSerializable, ModelViewUIFormPropertySerializable, InputTypeEnum>>());
    foreach(Tuple<string, ModelViewSerializable, ModelViewUIFormPropertySerializable, InputTypeEnum> fk in ForeignKeyNameChainList) {
        if (string.IsNullOrEmpty(fk.Item1)) {
            throw new Exception("[Foreign Key Name Chain] Can not be empty string");
        }
        if (fk.Item2 == null) {
            throw new Exception("For [Foreign Key Name Chain]=" + ForeignKeyNameChainList + " can not find ViewModel");
        }
        
        if (ForeignKeyNameChainList.Count(f => f.Item1 == fk.Item1) > 1) {
            throw new Exception("[Foreign Key Name Chain]=" +  fk + " occurs more than once");
        }

        if (fk.Item3.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
            if(!SearchDialogViewsList.Contains(fk.Item2.ViewName)) {
                SearchDialogViewsList.Add(fk.Item2.ViewName);
            }
        }
        if(!ViewsList.Contains(fk.Item2.ViewName)) {
            ViewsList.Add(fk.Item2.ViewName);
        }
    }
    if(!ViewsList.Contains(Model.ViewName)) {
        ViewsList.Add(Model.ViewName);
    }
    foreach(Tuple<string, ModelViewSerializable, ModelViewUIFormPropertySerializable, InputTypeEnum> fk in ForeignKeyNameChainList) {
        string[] fks = fk.Item1.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (fks.Length <= 1) continue;
        string subfk = string.Join(".", fks, 0, fks.Length - 1);
        if( !ForeignKeyNameChainList.Any(f => f.Item1 == subfk) ) {
            throw new Exception("[Foreign Key Name Chain]=" +  fk.Item1 + " could not find direct detail with [Foreign Key Name Chain] = " + subfk);
        }
    }
    //
    // check if the list of available fields is enough to insert/update/delete the ModelView entity 
    //
    foreach(ModelViewEntityPropertySerializable entityProp in Model.AllProperties) {
        bool isNotExists = true;
        if(!entityProp.IsRequired) continue;
        ModelViewPropertyOfVwSerializable scalarProp = Model.ScalarProperties.Where(s => ((s.OriginalPropertyName == entityProp.OriginalPropertyName) && string.IsNullOrEmpty(s.ForeignKeyNameChain))).FirstOrDefault();
        if (scalarProp != null) {
            if(Model.UIFormProperties.Any(u => (u.IsShownInView &&  (u.ViewPropertyName == scalarProp.ViewPropertyName)))) continue;
            if(Model.ForeignKeys != null) {
                foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                    if(ForeignKeyNameChainList.Any(f => f.Item1 == fk.NavigationName)) {
                        if ((fk.PrincipalKeyProps != null) && (fk.ForeignKeyProps != null)) {
                            for(int i =0; i <  fk.ForeignKeyProps.Count; i++) {
                                if(i < fk.PrincipalKeyProps.Count) {
                                    if(fk.ForeignKeyProps[i].OriginalPropertyName == entityProp.OriginalPropertyName) {
//                                        if(fk.ScalarProperties.Any(s => (s.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && s.IsSelected && (s.ForeignKeyNameChain == fk.NavigationName))) {
                                            isNotExists = false;                             
//                                        }
                                    }
                                }
                            }
                        }
                    }
                    if(!isNotExists) break;
                }
            }
            if(isNotExists) {
                if(!IsDatabaseGeneratedProperty(scalarProp, Model)) {
                    throw new Exception("For the [Not Database Generated Required Entity Property] =" +  entityProp.OriginalPropertyName + " could not find mapped UIFormProperty which is not hidden and which is shown In View");
                }
            }
            continue;
        }
        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
//
// we have to applay check only for Add operation
// if(ForeignKeyNameChainList.Any(f => f.Item1 == fk.NavigationName))
//
//

//            if(ForeignKeyNameChainList.Any(f => f.Item1 == fk.NavigationName)) {
                if ((fk.PrincipalKeyProps != null) && (fk.ForeignKeyProps != null)) {
                    for(int i =0; i <  fk.ForeignKeyProps.Count; i++) {
                        if(i < fk.PrincipalKeyProps.Count) {
                            if(fk.ForeignKeyProps[i].OriginalPropertyName == entityProp.OriginalPropertyName) {
//                                if(fk.ScalarProperties.Any(s => (s.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && s.IsSelected && (s.ForeignKeyNameChain == fk.NavigationName))) {
                                    isNotExists = false;                             
//                                }
                            }
                        }
                    }
                }
//            }
            if(!isNotExists) break;
        }
        if(isNotExists) {
            throw new Exception("For the [Required Entity Property] =" +  entityProp.OriginalPropertyName + " could not find mapped UIFormProperty which is not hidden and which is shown In View");
        }
    }
    List<Tuple<string, string, ModelViewSerializable>> intersectFkMdls = GetIntersectedForeigKeysMappingsEx(Model, Context, ForeignKeyNameChainList);

    string delformCssFolder                         = "01506-Dform.component.css";
    string delformHtmlFolder                        = "01506-Dform.component.html";
    string delformComponentFolder                   = "01506-Dform.component.ts";
    string componentSelectorCommonPart              = GetComponentSelectorCommonPart(Model, delformComponentFolder);
    string componentClassName                       = GetComponentClassName(Model, delformComponentFolder);

    string appSettingServiceFolder                  = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName               = GetCommonServiceClassNameWithAnglr(AngularJsonFile, Model, Context, appSettingServiceFolder, delformComponentFolder);
    
    string eventEmitterDataModelFolder              = "00018-event-emitter-data.interface.ts";
    string eventEmitterDataModelClassName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterDataModelFolder, delformComponentFolder);

    string menuItemDataModelFolder                  = "00017-menu-item-data.interface.ts";
    string menuItemDataModelClassName               = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, menuItemDataModelFolder, delformComponentFolder);

    string eventEmitterPubModelFolder               = "00019-event-emitter-pub.interface.ts";
    string eventEmitterPubModelClassName            = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, delformComponentFolder);

    string filterResultModelFolder                  = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName               = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, filterResultModelFolder, delformComponentFolder);

    string viewModelDatasourceInterfaceFolder       = "00600-view-model-datasource.interface.ts";
    string viewModelDatasourceInterfaceClassName    = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, viewModelDatasourceInterfaceFolder, delformComponentFolder);


    string viewInterfaceFolder                      = "01100-.interface.ts";
    string viewInterfacePageFolder                  = "01200-Page.interface.ts";
    string viewInterfaceFltFolder                   = "01300-Filter.interface.ts";

    string viewServiceFolder                        = "01400-.service.ts";

    string viewDatasourceClassFolder                = "01418-Datasource.class.ts";

    string viewInterfaceDlgFolder                   = "01430-Dlg.interface.ts";
    string sdlgComponentFolder                      = "01440-Sdlg.component.ts";
    string searchModuleServiceFolder                = "01450-S.module.service.ts";
    string apiName                                  = AbpFirstItemOfNameSpace(Model.WebApiServiceDefaultProjectNameSpace);

    for(int i = 0; i < Model.UIFormProperties.Count; i++) {
            ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable = Model.UIFormProperties[i];
#>
        "<#= apiName #>::<#= Model.ViewName #>:<#= modelViewUIFormPropertySerializable.ViewPropertyName #>Label": "<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>",
        "<#= apiName #>::<#= Model.ViewName #>:<#= modelViewUIFormPropertySerializable.ViewPropertyName #>Hint": "<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty)#>",
        "<#= apiName #>::<#= Model.ViewName #>:<#= modelViewUIFormPropertySerializable.ViewPropertyName #>Placeholder": "<#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#>",
<#
    }
#>



        "<#= apiName #>::<#= Model.ViewName #>:DeleteTitle": "Delete <#= Model.Title #>"

        "CmSt::NAllPrpsAreSet": "Not all properties are set",
        "CmSt::SItm": "Select Item",
        "CmSt::NtAllMstSet": "Not all masters have been set"
