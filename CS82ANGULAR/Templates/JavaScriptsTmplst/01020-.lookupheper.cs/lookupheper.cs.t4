<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
#nullable disable
using Microsoft.EntityFrameworkCore;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

<#

    
    string extforlkupFolder             = "01010-.extforlkup.cs";
    string lookupheperFolder            = "01020-.lookupheper.cs";
    string extendedMdlClass             =  Model.ViewName + "ExtForLkUp";
    string extendedMdlClassNameSpace    = GetTypeNameSpace(Model, Context, extforlkupFolder);

    string destinationNameSpace = GetTypeNameSpace(Model, Context, lookupheperFolder);
    string staticM2mClassName   = GetM2mStaticClassName(Model);
    string dbContextNameSpace   = GetDbContextNameSpace(Context);
    string viewModelNameSpace   = GetViewModelNameSpace(Model);

    string actionInputParamName             = "action";
    string oldObjInputParamName             = "oldObj";
    string newObjInputParamName             = "newObj";

    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);
    List<ModelViewPropertyOfVwSerializable> externalFlds = new List<ModelViewPropertyOfVwSerializable>();
    List<string> namespaces = new List<string>();
    if (!string.IsNullOrEmpty(dbContextNameSpace)) {
        if (!string.Equals(dbContextNameSpace, destinationNameSpace)) {
            namespaces.Add(dbContextNameSpace);
        }
    }
    if (!string.IsNullOrEmpty(viewModelNameSpace)) {
        if (!string.Equals(viewModelNameSpace, destinationNameSpace)) {
            if(!namespaces.Any(p => p == viewModelNameSpace)) namespaces.Add(viewModelNameSpace);
        }
    }
    if (!string.IsNullOrEmpty(extendedMdlClassNameSpace)) {
        if (!string.Equals(extendedMdlClassNameSpace, destinationNameSpace)) {
            if(!namespaces.Any(p => p == extendedMdlClassNameSpace)) namespaces.Add(extendedMdlClassNameSpace);
        }
    }

#>

<#
foreach(var nmsp in namespaces) {
#>
using <#= nmsp #>;
<#
}
#>


<#
    {
        if(searchSchemas!= null) {
            List<ModelViewSerializable> searchViewModels = new List<ModelViewSerializable>();
            namespaces.Add(destinationNameSpace);
            if(!namespaces.Any(p => p == viewModelNameSpace)) {
                namespaces.Add(viewModelNameSpace);
            }
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                string m2mModelClassNameSpace = GetViewModelNameSpace(m2mModel);
                string m2mEntityClassNameSpace = GetRootEntityNameSpace(m2mModel);
                if(!namespaces.Any(p => p == m2mModelClassNameSpace)) {
                    namespaces.Add(m2mModelClassNameSpace);
#>
using <#= m2mModelClassNameSpace #>;
<#
                }
                if(!namespaces.Any(p => p == m2mEntityClassNameSpace)) {
                    namespaces.Add(m2mEntityClassNameSpace);
#>
using <#= m2mEntityClassNameSpace #>;
<#
                }

                ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    string searchModelClassNameSpace = GetViewModelNameSpace(searchVM);
                    string searchEntityClassNameSpace = GetRootEntityNameSpace(m2mModel);
                    if(!namespaces.Any(p => p == searchModelClassNameSpace)) {
                        namespaces.Add(searchModelClassNameSpace);
#>
using <#= searchModelClassNameSpace #>;
<#
                    }
                    if(!namespaces.Any(p => p == searchEntityClassNameSpace)) {
                        namespaces.Add(searchEntityClassNameSpace);
#>
using <#= searchEntityClassNameSpace #>;
<#
                    }
                }
            }
        }
    }
#>


namespace <#= destinationNameSpace #> {


    public static class <#= staticM2mClassName #> {
<#
        if(searchSchemas!= null) {
            List<ModelViewSerializable> searchViewModels = new List<ModelViewSerializable>();

            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    if(searchVM == null) continue;
                    if(searchViewModels.Any(p => p == searchVM)) continue;
                    searchViewModels.Add(searchVM);
                    string staticM2mSelDictItemMethodName = GetM2mStaticSelDictItemMethodName(searchVM);
                    string staticM2mInsDictItemMethodName = GetM2mStaticInsDictItemMethodName(searchVM);
#>
        public static async Task<<#= searchVM.RootEntityClassName #>> <#= staticM2mSelDictItemMethodName #>(<#= Context.DbContextClassName #> db, <#= extendedMdlClass #> vm) {
            IQueryable<<#= searchVM.RootEntityClassName #>> query = db.<#= searchVM.RootEntityDbContextPropertyName #>;
<#
                foreach(ModelViewPropertyOfVwSerializable slrPrp in searchVM.ScalarProperties) {
                    ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(slrPrp, searchVM);
                    if(entityProp == null) { 
#>
// "It Skipped" Info: for scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] could not find mapped Entity property of the Entity = [<#= searchVM.RootEntityClassName #>]
<#
                        continue;
                    }
                    if(!searchVM.UniqueKeys.Any(u => u.UniqueKeyProperties.Any(p => p.OriginalPropertyName == entityProp.OriginalPropertyName))) {
#>
// "It Skipped" Info: for scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] could not find mapped Unique Key property of the Entity = [<#= searchVM.RootEntityClassName #>]
<#
                        continue;
                    }
                    if(searchVM.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == entityProp.OriginalPropertyName)) {
#>
// "It Skipped" Info: for scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] has found Primary Key property of the Entity = [<#= searchVM.RootEntityClassName #>]
<#
                        continue;
                    }
                    if(!Model.ScalarProperties.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) {
#>
// "It Skipped" Info: for scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] could not find mapped View Property of the Model = [<#= Model.ViewName #>] 
<#
                        continue;
                    }

#>
            // maybe it requires additional code related to nullable values
            query = query.Where(p => p.<#=  entityProp.OriginalPropertyName #> == vm.<#= slrPrp.ViewPropertyName #>);
<#
                } // foreach(ModelViewPropertyOfVwSerializable slrPrp in searchVM.ScalarProperties) { ... }
#>
            <#= searchVM.RootEntityClassName #> rslt = await query.FirstOrDefaultAsync();
            db.Entry(rslt).State = EntityState.Detached;
            return rslt;
        }
        public static async Task<<#= searchVM.RootEntityClassName #>> <#= staticM2mInsDictItemMethodName #>(<#= Context.DbContextClassName #> db, <#= extendedMdlClass #> vm) {
            <#= searchVM.RootEntityClassName #> entityToAdd = new <#= searchVM.RootEntityClassName#>();
<#  
                foreach(ModelViewPropertyOfVwSerializable slrPrp in searchVM.ScalarProperties) {
                    ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(slrPrp, searchVM);
                    if(entityProp == null) { 
#>
// "It Skipped" Info: for scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] could not find mapped Entity property of the Entity = [<#= searchVM.RootEntityClassName #>]
<#
                        continue;
                    }
                    if(!Model.ScalarProperties.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) {
                         if (searchVM.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == entityProp.OriginalPropertyName)) {
#>
// "It Skipped" Info: scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] is in primary key. Pay special attention if it should be defined with your special value. For instance, Guid.NewGuid().ToString("N");
//         entityToAdd.<#= entityProp.OriginalPropertyName #> = // Guid.NewGuid().ToString("N");
<#
                         } else {
#>
// "It Skipped" Info: for scalar prop = [<#= slrPrp.ViewPropertyName #>] of searchVM = [<#= searchVM.ViewName #>] could not find mapped View Property of the Model = [<#= Model.ViewName #>] 
<#
                        }
                        continue;
                    }
#>
            entityToAdd.<#= entityProp.OriginalPropertyName #> = vm.<#= slrPrp.ViewPropertyName #>; // scalar prop names are identical
<#
                }
#>
// pay special attention to primKey values

            db.<#= searchVM.RootEntityDbContextPropertyName #>.Add(entityToAdd);
            await db.SaveChangesAsync();
            db.Entry(entityToAdd).State = EntityState.Detached;
            return entityToAdd;
        }
<#
                } //foreach(var searchFkPair in searchFkPairs) {...} the end of Sel, Ins methods generation for LookUp resources
            } //foreach(var sch in searchSchemas) {...}  the end of Sel, Ins methods generation for LookUp resources
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
                string staticM2mUpdateMethodName = GetM2mStaticUpdateMethodName(m2mModel);
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
#>
        // <#= actionInputParamName #>: 1 - insert; 2 - update; 3 - delete
        public static async Task <#= staticM2mUpdateMethodName #>(<#= Context.DbContextClassName #> db, int <#= actionInputParamName #>, <#= extendedMdlClass #> <#= oldObjInputParamName #>, <#= extendedMdlClass #> <#= newObjInputParamName #>) {
            if ( (<#= actionInputParamName #> < 1)   || (<#= actionInputParamName #> > 3)) return; // or throw exception
            if ( ((<#= actionInputParamName #> == 2) || (<#= actionInputParamName #> == 3)) && (<#= oldObjInputParamName #> == null) ) return; // or throw exception
            if ( ((<#= actionInputParamName #> == 1) || (<#= actionInputParamName #> == 2)) && (<#= newObjInputParamName #> == null) ) return; // or throw exception
            // 2 - update; 3 - delete
            if ((<#= actionInputParamName #> == 2) || (<#= actionInputParamName #> == 3)) {
                bool readyToDel = true;

                <#= m2mModel.RootEntityClassName #> <#= m2mModel.ViewName + "updDelTmp" #> = new <#= m2mModel.RootEntityClassName #>() {
<#
                List<string> updDelDefs = GetCodeToDefineM2mEntityProps(sch, Model, oldObjInputParamName);
                foreach(string str in updDelDefs) {
#>
                    <#= str #>
<#
                }
#>
                }; // <#= m2mModel.ViewName + "updDelTmp" #>
<#
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    if(searchVM == null) continue;
                    string staticM2mSelDictItemMethodName = GetM2mStaticSelDictItemMethodName(searchVM);
                    string staticM2mInsDictItemMethodName = GetM2mStaticInsDictItemMethodName(searchVM);
#>
                if(readyToDel) {
                    <#= searchVM.RootEntityClassName #> <#= searchVM.ViewName + "updDelTmp" #> = await <#= staticM2mSelDictItemMethodName #>(db, <#= oldObjInputParamName #>);
                    readyToDel = <#= searchVM.ViewName + "updDelTmp" #> == null;
                    if(readyToDel) {
<#
                    for(int i = 0; i < searchFkPair.Key.ForeignKeyProps.Count; i++) {
#>
                    <#= m2mModel.ViewName + "updDelTmp" #>.<#= searchFkPair.Key.ForeignKeyProps[i].OriginalPropertyName #> = <#= searchVM.ViewName + "updDelTmp" #>.<#= searchFkPair.Key.PrincipalKeyProps[i].OriginalPropertyName #>;
<#
                    }
#>
                    }
                }
<#
                } // foreach(var searchFkPair in searchFkPairs) { ... }
#>
                if(readyToDel) {
                    IQueryable<<#= m2mModel.RootEntityClassName #>> m2mDelQuery = db.<#= m2mModel.RootEntityDbContextPropertyName #>;
<#
                foreach(var entityProp in m2mModel.AllProperties) {
#>
                    m2mDelQuery = m2mDelQuery.Where(p=> p.<#=  entityProp.OriginalPropertyName #> == <#= m2mModel.ViewName + "updDelTmp" #>.<#= entityProp.OriginalPropertyName #>);
<#
                }
#>                
                    var delM2mRslt = await m2mDelQuery.FirstOrDefaultAsync();
                    if(delM2mRslt != null) {
                        db.<#= m2mModel.RootEntityDbContextPropertyName #>.Remove(delM2mRslt);
                        db.SaveChanges();
                        db.Entry(delM2mRslt).State = EntityState.Detached;
                    }
                }
            }
            // 1 - insert; 2 - update;
            if ((<#= actionInputParamName #> == 1) || (<#= actionInputParamName #> == 2)) {
                <#= m2mModel.RootEntityClassName #> <#= m2mModel.ViewName + "InsTmp" #> = new <#= m2mModel.RootEntityClassName #>() {
<#
                List<string> insDefs = GetCodeToDefineM2mEntityProps(sch, Model, newObjInputParamName);
                foreach(string str in insDefs) {
#>
                    <#= str #>
<#
                }
#>
                }; // <#= m2mModel.ViewName + "InsTmp" #>
<#
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    if(searchVM == null) continue;
                    string staticM2mSelDictItemMethodName = GetM2mStaticSelDictItemMethodName(searchVM);
                    string staticM2mInsDictItemMethodName = GetM2mStaticInsDictItemMethodName(searchVM);
#>
                <#= searchVM.RootEntityClassName #> <#= searchVM.ViewName + "InsTmp" #> = await <#= staticM2mSelDictItemMethodName #>(db, <#= newObjInputParamName #>);
                if(<#= searchVM.ViewName + "InsTmp" #> == null) {
                    <#= searchVM.ViewName + "InsTmp" #> = await <#= staticM2mInsDictItemMethodName #>(db, <#= newObjInputParamName #>);
                }
<#
                    for(int i = 0; i < searchFkPair.Key.ForeignKeyProps.Count; i++) {
#>
                <#= m2mModel.ViewName + "InsTmp" #>.<#= searchFkPair.Key.ForeignKeyProps[i].OriginalPropertyName #> = <#= searchVM.ViewName + "InsTmp" #>.<#= searchFkPair.Key.PrincipalKeyProps[i].OriginalPropertyName #>;
<#
                    }
                } // foreach(var searchFkPair in searchFkPairs) { ... }
#>
                IQueryable<<#= m2mModel.RootEntityClassName #>> m2mInsQuery = db.<#= m2mModel.RootEntityDbContextPropertyName #>;
<#
                foreach(var entityProp in m2mModel.AllProperties) {
#>
                m2mInsQuery = m2mInsQuery.Where(p=> p.<#=  entityProp.OriginalPropertyName #> == <#= m2mModel.ViewName + "InsTmp" #>.<#= entityProp.OriginalPropertyName #>);
<#
                }
#>                
                var insM2mRslt = await m2mInsQuery.FirstOrDefaultAsync();
                if(insM2mRslt != null) return;
                db.<#= m2mModel.RootEntityDbContextPropertyName #>.Add(<#= m2mModel.ViewName + "InsTmp" #>);
                await db.SaveChangesAsync();
                db.Entry(<#= m2mModel.ViewName + "InsTmp" #>).State = EntityState.Detached;
                return;
            }
        }
<#
            } // foreach(var sch in searchSchemas) { ... }
            string staticM2mUpdateAllMethodName = GetM2mStaticUpdateMethodName(Model);
#>
        // <#= actionInputParamName #>: 1 - insert; 2 - update; 3 - delete
        public static async Task <#= staticM2mUpdateAllMethodName #>(<#= Context.DbContextClassName #> db, int <#= actionInputParamName #>, <#= extendedMdlClass #> <#= oldObjInputParamName #>, <#= extendedMdlClass #> <#= newObjInputParamName #>) {
            if ( (<#= actionInputParamName #> < 1)   || (<#= actionInputParamName #> > 3)) return; // or throw exception
            if ( ((<#= actionInputParamName #> == 2) || (<#= actionInputParamName #> == 3)) && (<#= oldObjInputParamName #> == null) ) return; // or throw exception
            if ( ((<#= actionInputParamName #> == 1) || (<#= actionInputParamName #> == 2)) && (<#= newObjInputParamName #> == null) ) return; // or throw exception
            // 3 - delete; 2 - update
            if ((<#= actionInputParamName #> == 3) || (<#= actionInputParamName #> == 2)) {
                bool readyToDel = true;
<#
        if(searchSchemas != null) {
            List<ModelViewSerializable> searchModels = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
#>
                <#= m2mModel.RootEntityClassName #> <#= m2mModel.ViewName + "updDelTmp" #> = new <#= m2mModel.RootEntityClassName #>() {
<#
                List<string> updDelDefs = GetCodeToDefineM2mEntityProps(sch, Model, oldObjInputParamName);
                foreach(string str in updDelDefs) {
#>
                    <#= str #>
<#
                }
#>
                }; // <#= m2mModel.ViewName + "updDelTmp" #>
<#
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    if(searchVM == null) continue;
                    if(searchModels.Any(p => p == searchVM)) continue;
                    searchModels.Add(searchVM);
                    string staticM2mSelDictItemMethodName = GetM2mStaticSelDictItemMethodName(searchVM);
#>
                <#= searchVM.RootEntityClassName #> <#= searchVM.ViewName + "delTmp" #> = await <#= staticM2mSelDictItemMethodName #>(db, <#= oldObjInputParamName #>);
<#
                } // foreach(var searchFkPair in searchFkPairs) { ... }
#>
                readyToDel = true;
<#
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    if(searchVM == null) continue;
                    string staticM2mSelDictItemMethodName = GetM2mStaticSelDictItemMethodName(searchVM);
#>
                if (readyToDel) {
                    readyToDel = <#= searchVM.ViewName + "delTmp" #> != null;

                    if(readyToDel) {
<#
                    for(int i = 0; i < searchFkPair.Key.ForeignKeyProps.Count; i++) {
#>
                        <#= m2mModel.ViewName + "updDelTmp" #>.<#= searchFkPair.Key.ForeignKeyProps[i].OriginalPropertyName #> = <#= searchVM.ViewName + "delTmp" #>.<#= searchFkPair.Key.PrincipalKeyProps[i].OriginalPropertyName #>;
<#
                    }
#>
                    }
                }
<#
                } // foreach(var searchFkPair in searchFkPairs) { ... }
#>
                if(readyToDel) {
                    IQueryable<<#= m2mModel.RootEntityClassName #>> <#= m2mModel.ViewName + "DelQuery" #> = db.<#= m2mModel.RootEntityDbContextPropertyName #>;
<#
                foreach(var entityProp in m2mModel.AllProperties) {
#>
                    <#= m2mModel.ViewName + "DelQuery" #> = <#= m2mModel.ViewName + "DelQuery" #>.Where(p=> p.<#=  entityProp.OriginalPropertyName #> == <#= m2mModel.ViewName + "updDelTmp" #>.<#= entityProp.OriginalPropertyName #>);
<#
                }
#>                
                    var <#= m2mModel.ViewName + "DelRslt" #> = await <#= m2mModel.ViewName + "DelQuery" #>.FirstOrDefaultAsync();
                    if(<#= m2mModel.ViewName + "DelRslt" #> != null) {
                        db.<#= m2mModel.RootEntityDbContextPropertyName #>.Remove(<#= m2mModel.ViewName + "DelRslt" #>);
                        db.SaveChanges();
                        db.Entry(<#= m2mModel.ViewName + "DelRslt" #>).State = EntityState.Detached;
                    }
                }
<#
            }
        }
#>
            }
            // 1 - insert; 2 - update
            if ((<#= actionInputParamName #> == 1) || (<#= actionInputParamName #> == 2)) {
<#
        if(searchSchemas != null) {
            List<ModelViewSerializable> searchModels = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
#>
                <#= m2mModel.RootEntityClassName #> <#= m2mModel.ViewName + "InsTmp" #> = new <#= m2mModel.RootEntityClassName #>() {
<#
                List<string> insDefs = GetCodeToDefineM2mEntityProps(sch, Model, newObjInputParamName);
                foreach(string str in insDefs) {
#>
                    <#= str #>
<#
                }
#>
                }; // <#= m2mModel.ViewName + "InsTmp" #>
<#
                foreach(var searchFkPair in searchFkPairs) {
                    ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                    if(searchVM == null) continue;
                    if(searchModels.Any(p => p == searchVM)) continue;
                    searchModels.Add(searchVM);
                    string staticM2mSelDictItemMethodName = GetM2mStaticSelDictItemMethodName(searchVM);
                    string staticM2mInsDictItemMethodName = GetM2mStaticInsDictItemMethodName(searchVM);
#>
                <#= searchVM.RootEntityClassName #> <#= searchVM.ViewName + "InsTmp" #> = await <#= staticM2mSelDictItemMethodName #>(db, <#= newObjInputParamName #>);
                if(<#= searchVM.ViewName + "InsTmp" #> == null) {
                    <#= searchVM.ViewName + "InsTmp" #> = await <#= staticM2mInsDictItemMethodName #>(db, <#= newObjInputParamName #>);
                }
<#
                    for(int i = 0; i < searchFkPair.Key.ForeignKeyProps.Count; i++) {
#>
                <#= m2mModel.ViewName + "InsTmp" #>.<#= searchFkPair.Key.ForeignKeyProps[i].OriginalPropertyName #> = <#= searchVM.ViewName + "InsTmp" #>.<#= searchFkPair.Key.PrincipalKeyProps[i].OriginalPropertyName #>;
<#
                    }
                } // foreach(var searchFkPair in searchFkPairs) { ... }
#>
                IQueryable<<#= m2mModel.RootEntityClassName #>>  <#= m2mModel.ViewName + "InsQuery" #> = db.<#= m2mModel.RootEntityDbContextPropertyName #>;
<#
                foreach(var entityProp in m2mModel.AllProperties) {
#>
                <#= m2mModel.ViewName + "InsQuery" #> = <#= m2mModel.ViewName + "InsQuery" #>.Where(p=> p.<#=  entityProp.OriginalPropertyName #> == <#= m2mModel.ViewName + "InsTmp" #>.<#= entityProp.OriginalPropertyName #>);
<#
                }
#>                
                var <#= m2mModel.ViewName + "insRslt" #> = await <#= m2mModel.ViewName + "InsQuery" #>.FirstOrDefaultAsync();
                if(<#= m2mModel.ViewName + "insRslt" #> == null) {
                    db.<#= m2mModel.RootEntityDbContextPropertyName #>.Add(<#= m2mModel.ViewName + "InsTmp" #>);
                    await db.SaveChangesAsync();
                    db.Entry(<#= m2mModel.ViewName + "InsTmp" #>).State = EntityState.Detached;
                }
<#
            } // foreach(var sch in searchSchemas) { ... }
        } // if(searchSchemas != null) { ... }
#>
            }
        }
<#
        } // if(searchSchemas!= null) { ... }
#>
    }
}

<#+

    String GetM2mStaticClassName(ModelViewSerializable model) {
        string result = "M2mUpdater";
        if(model == null) return result;
        return result + model.ViewName;
    }
    String GetM2mStaticUpdateMethodName(ModelViewSerializable model) {
        string result = "UpdateFor";
        if(model == null) return result;
        return result + model.ViewName;
    }
    String GetM2mStaticSelDictItemMethodName(ModelViewSerializable model) {
        string result = "SelDictItemFor";
        if(model == null) return result;
        return result + model.ViewName;
    }
    String GetM2mStaticInsDictItemMethodName(ModelViewSerializable model) {
        string result = "InsDictItemFor";
        if(model == null) return result;
        return result + model.ViewName;
    }

    string AttribToString(ModelViewAttributeSerializable attr) {
        if(attr == null) return "";
        string result= "[" + attr.AttrName; 
        if (attr.VaueProperties == null) {
            return result + "]";
        }
        if (attr.VaueProperties.Count < 1) {
            return result + "]";
        }
        result = result + "(";
        bool insComma= false;
        foreach(ModelViewAttributePropertySerializable valProp in attr.VaueProperties) {
            if (insComma) {
                result =  result + ",";
            } else {
                insComma = true;
            }
            if(! string.IsNullOrEmpty(valProp.PropName) ) {
                if (! valProp.PropName.Contains("...") ) {
                    result =  result + valProp.PropName + "=";
                }
            }
            result =  result + valProp.PropValue;
        }
        return result + ")]";
    }

    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    bool IsStringPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase) || "String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return true;
        }
        return false;
    }

    String GetDestinationNameSpace(ModelViewSerializable model) {
        string result = "";
        if( !string.IsNullOrEmpty( model.WebApiServiceFolder ) ) {
            result = model.WebApiServiceFolder.Replace("\\", ".");
        }
        if ( !string.IsNullOrEmpty(model.WebApiServiceDefaultProjectNameSpace) ) {
            if (string.IsNullOrEmpty(result)) {
                result = model.WebApiServiceDefaultProjectNameSpace;
            } else {
                result = model.WebApiServiceDefaultProjectNameSpace + "." + result;
            }
        }
        return result;
    }
    String GetDbContextNameSpace(DbContextSerializable context) {
        string result = context.DbContextFullClassName;
        
        if( !string.IsNullOrEmpty( result ) ) {
            if( !string.IsNullOrEmpty(context.DbContextClassName) ) {
                if(result.EndsWith("."+context.DbContextClassName)) {
                    result = result.Substring(0, result.LastIndexOf("."+context.DbContextClassName));
                }
            }
        }
        return result;
    }
    String GetViewModelNameSpace(ModelViewSerializable model) {
        string result = "";
        if( !string.IsNullOrEmpty( model.ViewFolder ) ) {
            result = model.ViewFolder.Replace("\\", ".");
        }
        if ( !string.IsNullOrEmpty(model.ViewDefaultProjectNameSpace) ) {
            if (string.IsNullOrEmpty(result)) {
                result = model.ViewDefaultProjectNameSpace;
            } else {
                result = model.ViewDefaultProjectNameSpace + "." + result;
            }
        }
        return result;
    }
    String GetRootEntityNameSpace(ModelViewSerializable model) {
        return model.RootEntityFullClassName.Substring(0, model.RootEntityFullClassName.LastIndexOf("." + model.RootEntityClassName));
    }
    List<String> GetNavigationPaths(ModelViewSerializable model) {
        List<String> locPaths = new List<String>();
        if(model.ScalarProperties == null) return locPaths;
        foreach (ModelViewPropertyOfVwSerializable prop in model.ScalarProperties)
        {
            if (string.IsNullOrEmpty(prop.ForeignKeyNameChain)) continue;
            if (locPaths.Exists(itm => (itm.StartsWith(prop.ForeignKeyNameChain + ".") || (itm.Equals(prop.ForeignKeyNameChain))))) continue;
            string s = locPaths.Where(itm => (prop.ForeignKeyNameChain.StartsWith(itm + ".") || (itm.Equals(prop.ForeignKeyNameChain)))).FirstOrDefault();
            if (!string.IsNullOrEmpty(s))
            {
                locPaths.Remove(s);
            }
            locPaths.Add(prop.ForeignKeyNameChain);
        }
        return locPaths;
    }
    String GenerateIncludePaths(String src) {
        if (String.IsNullOrEmpty(src)) return "";
        string[] sa = src.Split(new char[] { '.' });
        StringBuilder sb = new StringBuilder(".Include(p => p." + sa[0] + ")");
        for (int i = 1; i < sa.Length; i++)
        {
            sb.Append(".ThenInclude(p => p." + sa[i] + ")");
        }
        return sb.ToString();
    }
    String GetForeignKeyNameChain(String foreignKeyNameChain) {
        if (String.IsNullOrEmpty(foreignKeyNameChain)) {
            return "";
        } else {
            return foreignKeyNameChain + ".";
        }
    }
    String GetForeignKeyNameChainAndProp(ModelViewPropertyOfVwSerializable sProp, ModelViewSerializable model) {
        if (String.IsNullOrEmpty(sProp.ForeignKeyNameChain)) {
            return sProp.OriginalPropertyName;
        } else {
            if((sProp.ForeignKeyNameChain == sProp.ForeignKeyName) && (model.ForeignKeys != null)) {
                ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == sProp.ForeignKeyName).FirstOrDefault();
                if(fk != null) {
                    if((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                        for(int i = 0; i < fk.PrincipalKeyProps.Count; i++) {
                            if(i < fk.ForeignKeyProps.Count) {
                                if(fk.PrincipalKeyProps[i].OriginalPropertyName == sProp.OriginalPropertyName) {
                                    return fk.ForeignKeyProps[i].OriginalPropertyName;
                                }
                            }
                        }
                    }
                }
            }
            return sProp.ForeignKeyNameChain + "." + sProp.OriginalPropertyName;
        }
    }
    string GetTypeNameSpace(ModelViewSerializable model, DbContextSerializable context, string refFolder) {
        string result = "";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        CommonStaffSerializable refItem = model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        if(refItem == null) return result;
        if(string.IsNullOrEmpty(refItem.FileFolder)) return refItem.FileDefaultProjectNameSpace;
        return refItem.FileDefaultProjectNameSpace + "." + refItem.FileFolder.Replace(@"\",  ".").Replace(@"/",  ".");
    }


    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    String GetNullableType(ModelViewPropertySerializable prop) {
        if (prop.UnderlyingTypeName.Equals("System.String")) {
            return prop.UnderlyingTypeName;
        } else {
			return prop.UnderlyingTypeName +"?";
        }
    }
    String GetChainedPropertyName(ModelViewPropertySerializable prop) {
        if (String.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            return prop.OriginalPropertyName;
        } else {
            return prop.ForeignKeyNameChain + "." + prop.OriginalPropertyName;
        }
    }
    bool IsEntityTypeString(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.String");
    }
    bool IsEntityTypeBoolean(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.Boolean");
    }
    String GetFirstPrimKeyProperty(ModelViewSerializable model) {
        return model.PrimaryKeyProperties.FirstOrDefault().OriginalPropertyName;
    }
    String GetLowerCasePropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result = GetTypeScriptPropertyName(prop, model);
        if (!string.IsNullOrEmpty(result)) {
            result = result.ToLower();
        }
        return result;
    }
    bool IsRootEntityProperty(ModelViewPropertySerializable prop, ModelViewSerializable model) {
        return string.IsNullOrEmpty(prop.ForeignKeyNameChain);
    }
    ModelViewEntityPropertySerializable  GetRootEntityProperty(ModelViewPropertySerializable prop, ModelViewSerializable model) {
        if (string.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            if (model.AllProperties != null) {
                return model.AllProperties.Where(p => p.OriginalPropertyName == prop.OriginalPropertyName).FirstOrDefault();
            }
            return null;
        }
        if(model.ForeignKeys == null) return null;
        ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyNameChain).FirstOrDefault();
        if(fk == null) return null;
        if((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return null;
        int cnt = fk.PrincipalKeyProps.Count;
        if (cnt > fk.ForeignKeyProps.Count) cnt = fk.ForeignKeyProps.Count;
        for(int i = 0; i < cnt; i++) {
            if(fk.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                return model.AllProperties.Where(p => p.OriginalPropertyName == fk.ForeignKeyProps[i].OriginalPropertyName).FirstOrDefault();
            }
        }
        return null;
    }

    string FirstLetterToUpper(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string FirstLetterToLower(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimKeyFromList(List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys) {
        if(uniqueKeys == null) return null;
        return uniqueKeys.Where(u => u.IsPrimary).FirstOrDefault();
    }
    ModelViewUniqueKeyOfVwSerializable GetModelUniqueKeyByNameFromList(List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys, string name) {
        if (uniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return uniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return uniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    ModelViewUniqueKeySerializable GetModelUniqueKeyByNameFromModel(ModelViewSerializable model, string name) {
        if (model == null) return null;
        if (model.UniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return model.UniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return model.UniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    bool IsUsedByForeignKey(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return false;
        if (model.ForeignKeys == null) return false;
        if (model.ForeignKeys.Count < 1) return false;
        if(string.IsNullOrEmpty( prop.ForeignKeyName )) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                if (fk.ForeignKeyProps != null) {
                    if(fk.ForeignKeyProps.Any(k => k.OriginalPropertyName == prop.OriginalPropertyName)) return true;
                }
            }
        } else if (prop.ForeignKeyName == prop.ForeignKeyNameChain) {
            ModelViewForeignKeySerializable fk01 = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyName).FirstOrDefault();
            if(fk01 == null) return false;
            if ((fk01.PrincipalKeyProps != null) && (fk01.ForeignKeyProps != null)) {
                if(fk01.PrincipalKeyProps.Count == fk01.ForeignKeyProps.Count) {
                    if ( fk01.PrincipalKeyProps.Any(k => k.OriginalPropertyName == prop.OriginalPropertyName) ) return true;
                }
            }
        }
        return false;
    }
    string GetFkOriginalPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return null;
        if (model.ForeignKeys == null) return null;
        if (model.ForeignKeys.Count < 1) return null;
        if(string.IsNullOrEmpty( prop.ForeignKeyName )) {
            return prop.OriginalPropertyName;
        } else if (prop.ForeignKeyName == prop.ForeignKeyNameChain) {
            ModelViewForeignKeySerializable fk01 = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyName).FirstOrDefault();
            if(fk01 == null) return null;
            if ((fk01.PrincipalKeyProps != null) && (fk01.ForeignKeyProps != null)) {
                if(fk01.PrincipalKeyProps.Count == fk01.ForeignKeyProps.Count) {
                    for(int i = 0; i < fk01.PrincipalKeyProps.Count; i++) {
                        if(fk01.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) return fk01.ForeignKeyProps[i].OriginalPropertyName;
                    }
                }
            }
        }
        return null;
    }

    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop = GetScalarPropByOriginaPropName(modelViewKeyPropertySerializable.OriginalPropertyName, model);
            if(prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimaryKey(ModelViewSerializable model) {
        if (model == null)  return null;
        if (model.PrimaryKeyProperties == null) return null;
        if (model.PrimaryKeyProperties.Count < 1) return null;
        List<ModelViewPropertyOfVwSerializable> props = GetModelPrimaryKeyProps(model);
        if(props.Count != model.PrimaryKeyProperties.Count) return null;
        return new ModelViewUniqueKeyOfVwSerializable() {
            UniqueKeyName = null,
            IsPrimary = true,
            UniqueKeyProperties = props
        };
    }
    bool CheckModelIfIndexIsCorrect(ModelViewSerializable model,ModelViewUniqueKeyOfVwSerializable indx, out string error) {
        if((model == null) || (indx == null)) {
            error = "Input params is not defined";
            return false;
        }
        if(indx.UniqueKeyProperties == null) {
            error = "UniqueKeyProperties of the Index are not defined";
            return false;
        }
        if(indx.UniqueKeyProperties.Count < 1) {
            if(indx.IsPrimary)
                error = "UniqueKeyProperties.Count of the Primary Index is less than 1";
            else 
                error = "UniqueKeyProperties.Count of the Unique Index (UniqueKeyName == "+ indx.UniqueKeyName + ") is less than 1";
            return false;
        }

        if(indx.IsPrimary) {
            if(model.PrimaryKeyProperties == null) {
                error = "PrimaryKeyProperties of the model are not defined";
                return false;
            }
            if (model.PrimaryKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Index fields are included in the Model";
                return false;
            }
        } else {
            if(model.UniqueKeys == null) {
                error = "UniqueKeys of the model are not defined (UniqueKeyName == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(string.IsNullOrEmpty(indx.UniqueKeyName)) {
                error = "The Name of the Index is not defined (UniqueKeyName)";
                return false;
            }
            ModelViewUniqueKeySerializable mindx = model.UniqueKeys.Where(i => i.UniqueKeyName == indx.UniqueKeyName).FirstOrDefault();
            if(mindx == null) {
                error = "Could not find index in model by name (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(mindx.UniqueKeyProperties == null) {
                error = "UniqueKeyProperties of the Unique Index (Unique Index Name == "+ indx.UniqueKeyName + ") are not defined";
                return false;
            }
            if(mindx.UniqueKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Unique Index fields are included in the Model (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
        }
        error = "";
        return true;
    }




////////////////////////////////////////////////////////
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) { 
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => 
                (p.OriginalPropertyName == origPropName) && 
                string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if ((fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1)) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => 
                        (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && 
                        (p.ForeignKeyName == fk.NavigationName) && 
                        (p.ForeignKeyName == p.ForeignKeyNameChain)
                    ).FirstOrDefault();
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }
    bool IsTableMatchesIndex(ModelViewSerializable model) {
        if (model == null)  return false;
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null)) return false;
        if ((model.ScalarProperties.Count != model.PrimaryKeyProperties.Count) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable pkp in model.PrimaryKeyProperties) {
             if(GetScalarPropByOriginaPropName(pkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToTailOfPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
            if (fk.ForeignKeyProps[fk.ForeignKeyProps.Count - (1 + i)].OriginalPropertyName != model.PrimaryKeyProperties[model.PrimaryKeyProperties.Count - (1 + i)].OriginalPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalars(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.ScalarProperties == null) || (fk.ForeignKeyProps == null)) return false;
        if (fk.ForeignKeyProps.Count < 1) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
             if(GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsEx(ModelViewForeignKeySerializable detailFk, ModelViewSerializable detailModel, ModelViewSerializable model) {
        if ((detailModel == null) || (detailFk == null) || (model == null)) return false;
        if ((detailModel.ScalarProperties == null) || (detailFk.ForeignKeyProps == null) || (model.ScalarProperties == null) || (detailFk.PrincipalKeyProps == null) || (model.PrimaryKeyProperties == null)) return false;
        if ((detailFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1) || (model.PrimaryKeyProperties.Count != detailFk.ForeignKeyProps.Count) || (detailFk.PrincipalKeyProps.Count != detailFk.ForeignKeyProps.Count) || (model.PrimaryKeyProperties.Count != detailFk.ForeignKeyProps.Count)) return false;
        for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
             ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
             if(detailsprp == null) return false;
             ModelViewPropertyOfVwSerializable modelsprp = GetScalarPropByOriginaPropName(detailFk.PrincipalKeyProps[i].OriginalPropertyName, model);
             if(modelsprp == null) return false;
             if(modelsprp.ViewPropertyName != detailsprp.ViewPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsExEx(ModelViewForeignKeySerializable detailFk, ModelViewSerializable detailModel, ModelViewSerializable model) {
        if ((detailModel == null) || (detailFk == null) || (model == null)) return false;
        if ((detailModel.ScalarProperties == null) || (detailFk.ForeignKeyProps == null) || (model.ScalarProperties == null) || (detailFk.PrincipalKeyProps == null) || (model.ForeignKeys == null)) return false;
        if ((detailFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1) || (detailFk.PrincipalKeyProps.Count != detailFk.ForeignKeyProps.Count)) return false;
        List<ModelViewForeignKeySerializable> modelFks =  model.ForeignKeys.Where(f => f.ViewName == detailFk.ViewName).ToList();
        if(modelFks.Count < 1) return false;
        for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
             ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
             if(detailsprp == null) return false;
        }
        foreach(ModelViewForeignKeySerializable modelFk in modelFks) {
            if(modelFk.ForeignKeyProps == null) continue;
            if(modelFk.ForeignKeyProps.Count != detailFk.ForeignKeyProps.Count) continue;
            bool passed = false;
            for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
                 ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
                 ModelViewPropertyOfVwSerializable modelsprp = GetScalarPropByOriginaPropName(modelFk.ForeignKeyProps[i].OriginalPropertyName, model);
                 passed = modelsprp != null;
                 if(!passed) break;
                 passed = modelsprp.ViewPropertyName == detailsprp.ViewPropertyName;
                 if(!passed) break;
            }
            if (passed) return true;
        }
        return false;
    }
    bool IsOnePropForeigKey(ModelViewForeignKeySerializable searchFk) {
        if(searchFk == null) return false;
        if((searchFk.PrincipalKeyProps == null) || (searchFk.ForeignKeyProps == null )) return false;
        if((searchFk.PrincipalKeyProps.Count == searchFk.ForeignKeyProps.Count) && (searchFk.ForeignKeyProps.Count == 1)) return true;
        return false;
    }
    bool IsLookUpTable(ModelViewSerializable searchMdl) {
        if (searchMdl == null) return false;
        if ((searchMdl.ScalarProperties == null) || (searchMdl.PrimaryKeyProperties == null) || (searchMdl.UniqueKeys == null)) return false;
        if ((searchMdl.ScalarProperties.Count != 2) || (searchMdl.PrimaryKeyProperties.Count != 1) || (searchMdl.UniqueKeys.Count != 1)) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties == null) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties.Count != 1) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName == searchMdl.PrimaryKeyProperties[0].OriginalPropertyName) return false;
        if ((GetScalarPropByOriginaPropName(searchMdl.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, searchMdl) == null) ||
            (GetScalarPropByOriginaPropName(searchMdl.PrimaryKeyProperties[0].OriginalPropertyName, searchMdl) == null)) return false;
        return true;
    }
    bool IsUniqKeyMapedToScalarsEx(ModelViewUniqueKeySerializable searchUk, ModelViewSerializable searchModel, ModelViewSerializable model) {
        if ((searchModel == null) || (searchUk == null) || (model == null)) return false;
        if ((searchModel.ScalarProperties == null) || (searchUk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) return false;
        if ((searchUk.UniqueKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable ukp in searchUk.UniqueKeyProperties) {
             ModelViewPropertyOfVwSerializable sprp = GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, searchModel);
             if(sprp == null) return false;
             if(!model.ScalarProperties.Any(p => p.ViewPropertyName == sprp.ViewPropertyName)) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
            if( !model.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName) ) return false;
        }
        return true;
    }
    bool IsForeigKeyWithCorrectPropsOrder(ModelViewForeignKeySerializable otherFk, ModelViewSerializable m2mMdl) {
        if ((m2mMdl == null) || (otherFk == null)) return false;
        if ((m2mMdl.PrimaryKeyProperties == null) || (otherFk.ForeignKeyProps == null)) return false;
        if ((m2mMdl.PrimaryKeyProperties.Count < 1) || (otherFk.ForeignKeyProps.Count < 1)) return false;
        List<int> positions = new List<int>();
        foreach(ModelViewKeyPropertySerializable fkp in otherFk.ForeignKeyProps) {
            int index = m2mMdl.PrimaryKeyProperties.FindIndex(delegate(ModelViewKeyPropertySerializable pkp) { return pkp.OriginalPropertyName == fkp.OriginalPropertyName; });
            if(index < 0) return false;
            positions.Add(index);
        }
        positions.Sort();
        for(int i = 0; i < positions.Count-1; i++) {
            if(positions[i] + 1 != positions[i+1]) return false;
        }
        return true;
    }
    int GetForeigKeyMaxPropsPosition(ModelViewForeignKeySerializable otherFk, ModelViewSerializable m2mMdl) {
        if ((m2mMdl == null) || (otherFk == null)) return -1;
        if ((m2mMdl.PrimaryKeyProperties == null) || (otherFk.ForeignKeyProps == null)) return -1;
        if ((m2mMdl.PrimaryKeyProperties.Count < 1) || (otherFk.ForeignKeyProps.Count < 1)) return -1;
        int rslt = 0;
        foreach(ModelViewKeyPropertySerializable fkp in otherFk.ForeignKeyProps) {
            int index = m2mMdl.PrimaryKeyProperties.FindIndex(delegate(ModelViewKeyPropertySerializable pkp) { return pkp.OriginalPropertyName == fkp.OriginalPropertyName; });
            if(index < 0) return -1;
            if(rslt < index) rslt = index;
        }
        return rslt;
    }
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> GetSearchResources(ModelViewSerializable model, DbContextSerializable context) {
        if ((context == null) || (model == null)) return null;
        if ((context.ModelViews == null) || (model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) ) return null;
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return null;
        List<ModelViewSerializable> m2mMdls = context.ModelViews.Where(p => (p.ForeignKeys.Any(f => f.ViewName == model.ViewName) && (p.ForeignKeys.Count > 1))).ToList();
        if(m2mMdls.Count < 1) {
            return null;
        }
        // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk, ukpropsMpt, ukpropsToFrgn
        List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> result = null;
        foreach(ModelViewSerializable m2mMdl in m2mMdls) {
            if (!IsTableMatchesIndex(m2mMdl)) {
                continue;
            }
            List<ModelViewForeignKeySerializable> m2mFks = m2mMdl.ForeignKeys.Where(f => f.ViewName == model.ViewName).ToList();
            foreach(ModelViewForeignKeySerializable m2mFk in m2mFks) {
                if(!IsForeigKeyMapedToTailOfPrimKey(m2mFk, m2mMdl)) continue;
                if(!IsForeigKeyMapedToScalarsEx(m2mFk, m2mMdl, model)) continue;
                // m2mMdl - m2mModel, m2mFk - m2mForeignKey,
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFks = null;
                List<int> searchFkPosition = null;
                foreach(ModelViewForeignKeySerializable searchFk in m2mMdl.ForeignKeys) {
                    if (m2mFk == searchFk) continue;
                    if (!IsOnePropForeigKey(searchFk)) continue;
                    ModelViewSerializable searchMdl = context.ModelViews.Where(mv => (mv.ViewName == searchFk.ViewName)).FirstOrDefault();
                    if (searchMdl == null) continue;
                    if (!IsLookUpTable(searchMdl)) continue;
                    if (!IsUniqKeyMapedToScalarsEx(searchMdl.UniqueKeys[0], searchMdl, model)) continue;
                    if (searchFks == null) searchFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    searchFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>( searchFk, GetForeigKeyMaxPropsPosition(searchFk, m2mMdl) ));
                }
                if(searchFks == null) {
                    continue;
                }
                int lastValidPosition = m2mMdl.PrimaryKeyProperties.Count - model.PrimaryKeyProperties.Count - 1;
                if(searchFks != null) {
                    if(searchFks.Any(p => p.Value < 0)) continue;
                    searchFks = searchFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < searchFks.Count-1; i++) {
                        IsCorrect = searchFks[i].Value == searchFks[i+1].Value - 1;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) {
                        continue;
                    }
                    if(searchFks[searchFks.Count-1].Value != lastValidPosition) { 
                        continue;
                    }
                    lastValidPosition = searchFks[0].Value - 1;
                }
                

                List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = null;
                foreach(ModelViewForeignKeySerializable otherFk in m2mMdl.ForeignKeys) {
                    if (m2mFk == otherFk) continue;
                    if (searchFks != null) {
                        if(searchFks.Any(p => p.Key == otherFk)) continue;
                    }
                    if(!IsForeigKeyMapedToPrimKey(otherFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalarsExEx(otherFk, m2mMdl, model)) continue;
                    if(!IsForeigKeyWithCorrectPropsOrder(otherFk, m2mMdl)) continue;
                    int mxPs = GetForeigKeyMaxPropsPosition(otherFk, m2mMdl);
                    if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
                    if(otherFks == null) otherFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    otherFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(otherFk, mxPs));
                }
                if(otherFks != null) {
                    otherFks = otherFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < otherFks.Count-1; i++) {
                        IsCorrect = otherFks[i].Value == otherFks[i+1].Value - otherFks[i].Key.ForeignKeyProps.Count;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) continue;
                    if(otherFks[otherFks.Count-1].Value != lastValidPosition) 
                        continue;
                    lastValidPosition = otherFks[0].Value - otherFks[0].Key.ForeignKeyProps.Count;
                }
                

                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = null;
                foreach(ModelViewForeignKeySerializable externalFk in m2mMdl.ForeignKeys) {
                    if (externalFk == m2mFk) continue;
                    if (searchFks != null) {
                        if(searchFks.Any(p => p.Key == externalFk)) continue;
                    }
                    if (otherFks != null) {
                        if(otherFks.Any(p => p.Key == externalFk)) continue;
                    }
                    if(!IsForeigKeyMapedToPrimKey(externalFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalars(externalFk, m2mMdl)) continue;
                    if(!IsForeigKeyWithCorrectPropsOrder(externalFk, m2mMdl)) continue;
                    int mxPs = GetForeigKeyMaxPropsPosition(externalFk, m2mMdl);
                    if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
                    if(externalFks == null) externalFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    externalFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(externalFk, mxPs));
                }
                if(externalFks != null) {
                    externalFks = externalFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < externalFks.Count-1; i++) {
                        IsCorrect = externalFks[i].Value == externalFks[i+1].Value - externalFks[i].Key.ForeignKeyProps.Count;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) continue;
                    if(externalFks[externalFks.Count-1].Value != lastValidPosition) continue;
                    lastValidPosition = externalFks[0].Value - externalFks[0].Key.ForeignKeyProps.Count;
                }
                if(lastValidPosition != -1) continue;
                int AllFkCount = (searchFks == null ? 0 : searchFks.Count) +
                                (otherFks == null ? 0 : otherFks.Count) +
                                (externalFks == null ? 0 : externalFks.Count);
                if (AllFkCount != (m2mMdl.ForeignKeys.Count - 1)) continue;
                if(result == null) {
                    result = new List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>>();
                }
                result.Add(new Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>(
                    m2mMdl, m2mFk, searchFks, otherFks, externalFks
                ));
            }
        }
        return result;
    }
    bool AllPrimKeyPropsAreForeignKeysProps(ModelViewSerializable m2mMdl) {
        if(m2mMdl == null) return false;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mMdl.ForeignKeys == null)) return false;
        int cnt = 0;
        foreach(ModelViewForeignKeySerializable fk in m2mMdl.ForeignKeys) {
            if (fk.ForeignKeyProps == null) return false;
            cnt += fk.ForeignKeyProps.Count;
        }
        if(cnt != m2mMdl.PrimaryKeyProperties.Count) return false;
        List<string> passed = new List<string>();
        foreach(ModelViewForeignKeySerializable fk in m2mMdl.ForeignKeys) {
            foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
                if(!m2mMdl.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName)) return false;
                if(passed.Any(p => p == fkp.OriginalPropertyName)) return false;
                passed.Add(fkp.OriginalPropertyName);
            }
        }
        return true;
    }
    bool ForeignKeysOrderedInsidePrimKey(ModelViewSerializable m2mMdl) {
        if(m2mMdl == null) return false;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mMdl.ForeignKeys == null)) return false;
        ModelViewForeignKeySerializable currFk = null;
        int firstInx = 0;
        int lastInx = 0;
        for(int i = 0; i < m2mMdl.PrimaryKeyProperties.Count; i++) {
            ModelViewKeyPropertySerializable pkprp = m2mMdl.PrimaryKeyProperties[i];
            ModelViewForeignKeySerializable fk = m2mMdl.ForeignKeys.Where(f => f.ForeignKeyProps.Any(p => p.OriginalPropertyName == pkprp.OriginalPropertyName)).FirstOrDefault();
            if(fk == null) return false;
            if(i == 0) { 
                currFk = fk;
                continue;
            }
            if(fk == currFk) {
                lastInx = i;
                continue;
            }
            if(currFk.ForeignKeyProps.Count != lastInx - firstInx + 1) return false;
            currFk = fk;
            firstInx = i;
            lastInx = i;
        }
        if(currFk.ForeignKeyProps.Count != lastInx - firstInx + 1) return false;
        return true;
    }
    bool IsForeignKeyFirstInsidePrimKey(ModelViewSerializable m2mMdl, ModelViewForeignKeySerializable m2mFk) {
        if((m2mMdl == null) || (m2mFk == null)) return false;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mFk.ForeignKeyProps == null)) return false;
        ModelViewForeignKeySerializable currFk = null;
        int firstInx = 0;
        int lastInx = 0;
        for(int i = 0; i < m2mMdl.PrimaryKeyProperties.Count; i++) {
            ModelViewKeyPropertySerializable pkprp = m2mMdl.PrimaryKeyProperties[i];
            if(m2mFk.ForeignKeyProps.Any(p => p.OriginalPropertyName == pkprp.OriginalPropertyName)) {
                if(i == 0) { 
                    currFk = m2mFk;
                    continue;
                }
                lastInx = i;
            } else break;
        }
        if(currFk == null) return false;
        if(currFk.ForeignKeyProps.Count != lastInx - firstInx + 1) return false;
        return true;
    }
    ModelViewForeignKeySerializable GetLastForeignKey(ModelViewSerializable m2mMdl) {
        if(m2mMdl == null)  return null;
        if((m2mMdl.PrimaryKeyProperties == null) || (m2mMdl.ForeignKeys == null))  return null;
        if(m2mMdl.PrimaryKeyProperties.Count < 1) return null;
        ModelViewKeyPropertySerializable pkprp =m2mMdl.PrimaryKeyProperties[m2mMdl.PrimaryKeyProperties.Count - 1];
        return m2mMdl.ForeignKeys.Where(f => f.ForeignKeyProps.Any(p => p.OriginalPropertyName == pkprp.OriginalPropertyName)).FirstOrDefault();
    }
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> GetSearchResourcesForLastFk(ModelViewSerializable model, ModelViewSerializable m2mMdl, ModelViewForeignKeySerializable m2mFk, DbContextSerializable context) {
        if ((context == null) || (model == null) || (m2mMdl == null) || (m2mFk == null)) return null;
        if ((context.ModelViews == null) || (model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) || (m2mMdl.ForeignKeys == null) ) return null;
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return null;
        if (!m2mMdl.ForeignKeys.Any(f => f == m2mFk)) return null;
        if (m2mFk.ViewName != model.ViewName) return null;
        if (!IsTableMatchesIndex(m2mMdl)) return null;
        if(!IsForeigKeyMapedToTailOfPrimKey(m2mFk, m2mMdl)) return null;
        if(!IsForeigKeyMapedToScalarsEx(m2mFk, m2mMdl, model)) return null;
        // m2mMdl - m2mModel, m2mFk - m2mForeignKey,
        List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFks = null;
        List<int> searchFkPosition = null;
        foreach(ModelViewForeignKeySerializable searchFk in m2mMdl.ForeignKeys) {
            if (m2mFk == searchFk) continue;
            if (!IsOnePropForeigKey(searchFk)) continue;
            ModelViewSerializable searchMdl = context.ModelViews.Where(mv => (mv.ViewName == searchFk.ViewName)).FirstOrDefault();
            if (searchMdl == null) continue;
            if (!IsLookUpTable(searchMdl)) continue;
            if (!IsUniqKeyMapedToScalarsEx(searchMdl.UniqueKeys[0], searchMdl, model)) continue;
            if (searchFks == null) searchFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
            searchFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>( searchFk, GetForeigKeyMaxPropsPosition(searchFk, m2mMdl) ));
        }
        if(searchFks == null) return null;
        int lastValidPosition = m2mMdl.PrimaryKeyProperties.Count - model.PrimaryKeyProperties.Count - 1;
        if(searchFks != null) {
            if(searchFks.Any(p => p.Value < 0)) return null;
            searchFks = searchFks.OrderBy(p => p.Value).ToList();
            bool IsCorrect = true;
            for(int i = 0; i < searchFks.Count-1; i++) {
                IsCorrect = searchFks[i].Value == searchFks[i+1].Value - 1;
                if(!IsCorrect) break;
            }
            if(!IsCorrect) return null;
            if(searchFks[searchFks.Count-1].Value != lastValidPosition) return null;
            lastValidPosition = searchFks[0].Value - 1;
        }
        List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = null;
        foreach(ModelViewForeignKeySerializable otherFk in m2mMdl.ForeignKeys) {
            if (m2mFk == otherFk) continue;
            if (searchFks != null) {
                if(searchFks.Any(p => p.Key == otherFk)) continue;
            }
            if(!IsForeigKeyMapedToPrimKey(otherFk, m2mMdl)) continue;
            if(!IsForeigKeyMapedToScalarsExEx(otherFk, m2mMdl, model)) continue;
            if(!IsForeigKeyWithCorrectPropsOrder(otherFk, m2mMdl)) continue;
            int mxPs = GetForeigKeyMaxPropsPosition(otherFk, m2mMdl);
            if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
            if(otherFks == null) otherFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
            otherFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(otherFk, mxPs));
        }
        if(otherFks != null) {
            otherFks = otherFks.OrderBy(p => p.Value).ToList();
            bool IsCorrect = true;
            for(int i = 0; i < otherFks.Count-1; i++) {
                IsCorrect = otherFks[i].Value == otherFks[i+1].Value - otherFks[i].Key.ForeignKeyProps.Count;
                if(!IsCorrect) break;
            }
            if(!IsCorrect) return null;
            if(otherFks[otherFks.Count-1].Value != lastValidPosition) return null;
            lastValidPosition = otherFks[0].Value - otherFks[0].Key.ForeignKeyProps.Count;
        }
                

        List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = null;
        foreach(ModelViewForeignKeySerializable externalFk in m2mMdl.ForeignKeys) {
            if (externalFk == m2mFk) continue;
            if (searchFks != null) {
                if(searchFks.Any(p => p.Key == externalFk)) continue;
            }
            if (otherFks != null) {
                if(otherFks.Any(p => p.Key == externalFk)) continue;
            }
            if(!IsForeigKeyMapedToPrimKey(externalFk, m2mMdl)) continue;
            if(!IsForeigKeyMapedToScalars(externalFk, m2mMdl)) continue;
            if(!IsForeigKeyWithCorrectPropsOrder(externalFk, m2mMdl)) continue;
            int mxPs = GetForeigKeyMaxPropsPosition(externalFk, m2mMdl);
            if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
            if(externalFks == null) externalFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
            externalFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(externalFk, mxPs));
        }
        if(externalFks != null) {
            externalFks = externalFks.OrderBy(p => p.Value).ToList();
            bool IsCorrect = true;
            for(int i = 0; i < externalFks.Count-1; i++) {
                IsCorrect = externalFks[i].Value == externalFks[i+1].Value - externalFks[i].Key.ForeignKeyProps.Count;
                if(!IsCorrect) break;
            }
            if(!IsCorrect) return null;
            if(externalFks[externalFks.Count-1].Value != lastValidPosition) return null;
            lastValidPosition = externalFks[0].Value - externalFks[0].Key.ForeignKeyProps.Count;
        }
        if(lastValidPosition != -1) return null;
        int AllFkCount = (searchFks == null ? 0 : searchFks.Count) +
                        (otherFks == null ? 0 : otherFks.Count) +
                        (externalFks == null ? 0 : externalFks.Count);
        if (AllFkCount != (m2mMdl.ForeignKeys.Count - 1)) return null;
        return new Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>(
            m2mMdl, m2mFk, searchFks, otherFks, externalFks
        );
    }
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> DetailViewAsM2mMdl(ModelViewSerializable m2mMdl, DbContextSerializable context) {
        if ((m2mMdl == null) || (context == null)) return null;
        if ((m2mMdl.ForeignKeys == null) || (context.ModelViews == null)) return null;
        if (!IsTableMatchesIndex(m2mMdl)) return null;
        if (!AllPrimKeyPropsAreForeignKeysProps(m2mMdl)) return null;
        if (!ForeignKeysOrderedInsidePrimKey(m2mMdl)) return null;
        ModelViewForeignKeySerializable lastFk = GetLastForeignKey(m2mMdl);
        if(lastFk == null) return null;
        ModelViewSerializable model = context.ModelViews.Where(m => m.ViewName == lastFk.ViewName).FirstOrDefault();
        if(model == null) return null;
        return GetSearchResourcesForLastFk(model, m2mMdl, lastFk, context);
    }
    ModelViewSerializable GetViewByName(DbContextSerializable context, string viewName) {
        if(context == null) return null;
        return context.ModelViews.Where(p => p.ViewName == viewName).FirstOrDefault();
    }
    ModelViewPropertyOfVwSerializable GetFirstPropOfFirstUniqueKey(ModelViewSerializable model) {
        if(model == null) return null;
        if(model.UniqueKeys == null) return null;
        if(model.UniqueKeys.Count < 1) return null;
        if(model.UniqueKeys[0].UniqueKeyProperties == null) return null;
        if(model.UniqueKeys[0].UniqueKeyProperties.Count < 1) return null;
        return GetScalarPropByOriginaPropName(model.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, model);
    }
    List<string> GetCodeToDefineM2mEntityProps(Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> sch, ModelViewSerializable model, string ObjInputParamName) {
        List<string> rslt = new List<string>();
        if (sch == null) return rslt;
        ModelViewSerializable m2mModel = sch.Item1;
        ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
        List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
        List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
        bool addComma = false;
        for(int i = 0; i < m2mForeignKey.ForeignKeyProps.Count; i++) {
            addComma = (i < m2mForeignKey.ForeignKeyProps.Count - 1) || (externalFks == null ? false : externalFks.Count > 0) || (otherFks == null ? false : otherFks.Count > 0);
            if(addComma) {
                rslt.Add(m2mForeignKey.ForeignKeyProps[i].OriginalPropertyName + " = " + ObjInputParamName + "." + GetScalarPropByOriginaPropName(m2mForeignKey.PrincipalKeyProps[i].OriginalPropertyName, model).ViewPropertyName + ",");
            } else {
                rslt.Add(m2mForeignKey.ForeignKeyProps[i].OriginalPropertyName + " = " + ObjInputParamName + "." + GetScalarPropByOriginaPropName(m2mForeignKey.PrincipalKeyProps[i].OriginalPropertyName, model).ViewPropertyName);
            }
        }
        if(otherFks != null) {
            for(int i = 0; i < otherFks.Count; i++) {
                for(int j = 0; j < otherFks[i].Key.ForeignKeyProps.Count; j++) {
                    addComma = (i < otherFks.Count - 1) || (j < otherFks[i].Key.ForeignKeyProps.Count-1) || (otherFks == null ? false : otherFks.Count > 0);
                    if(addComma) {
                        // scalar prop names are the same for other foreign keys, 
                        // so "newObjInputParamName.GetScalarPropByOriginaPropName(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel)" is correct
                        rslt.Add(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName + " = " + ObjInputParamName + "." + GetScalarPropByOriginaPropName(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel).ViewPropertyName+",");
                    } else {
                        rslt.Add(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName + " = " + ObjInputParamName + "." + GetScalarPropByOriginaPropName(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel).ViewPropertyName);
                    }
                }
            }
        }
        // references to indirect masters or external foreign keys
        if (externalFks != null) {
            for(int i = 0; i < externalFks.Count; i++) {
                for(int j = 0; j < externalFks[i].Key.ForeignKeyProps.Count; j++) {
                // it is not enoughth to check ForeignKeyProps.Count-1, since internal foreign keys
                    addComma = (i < externalFks.Count - 1) || (j < externalFks[i].Key.ForeignKeyProps.Count-1);
                    if(addComma) {
                        rslt.Add(externalFks[i].Key.ForeignKeyProps[j].OriginalPropertyName + " = " + ObjInputParamName + "." + GetScalarPropByOriginaPropName(externalFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel).ViewPropertyName + ",");
                    } else {
                        rslt.Add(externalFks[i].Key.ForeignKeyProps[j].OriginalPropertyName + " = " + ObjInputParamName + "." + GetScalarPropByOriginaPropName(externalFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel).ViewPropertyName);
                    }
                }
            }
        }
        return rslt;
    }

#>