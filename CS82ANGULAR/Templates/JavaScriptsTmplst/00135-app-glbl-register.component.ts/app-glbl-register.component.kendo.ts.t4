<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#
    bool localize = Context.Localize;

    string appSettingServiceFolder          = "00015-app-glbl-settings.service.ts";
    string appLoginServiceFolder            = "00130-app-glbl-login.service.ts";

    string appRegisterHtmlComponentFolder   = "00135-app-glbl-register.component.html";
    string appRegisterCssComponentFolder    = "00135-app-glbl-register.component.css";
    string appRegisterComponentFolder       = "00135-app-glbl-register.component.ts";

    string appRegisterComponentClassName    = GetComponentClassName(Model, appRegisterComponentFolder);
    string appRegisterComponentSelectorCommonPart = GetComponentSelectorCommonPart(Model, appRegisterComponentFolder);

    string appSettingServiceClassName       = GetServiceClassNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appRegisterComponentFolder);
    string appLoginServiceClassName         = GetServiceClassNameWithAnglr(AngularJsonFile, Model, appLoginServiceFolder, appRegisterComponentFolder);

    string loginMethodName              = "login";
    string AppearancePropName           = "appearance";
    string ShowErrorMethodName          = "showError";
    string securityServiceName          = "scrtSvr";
    string registerMethodName           = "register";
    string AppSettingServicePropName    = "appGlblSettings";
    string getAuthIntoMethodName        = "getAuthInto";
    string setAuthIntoMethodName        = "setAuthInto";
                                
#>
import { Component } from '@angular/core';
import { FormControl, Validators, ValidatorFn, FormGroup, AbstractControl } from '@angular/forms';
import { Router } from '@angular/router';
import { DropDownFillMode } from '@progress/kendo-angular-dropdowns';
import { InputFillMode } from '@progress/kendo-angular-inputs';
import { DateInputFillMode } from '@progress/kendo-angular-dateinputs';

import { <#= appSettingServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appRegisterComponentFolder)#>';
import { <#= appLoginServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appLoginServiceFolder, appRegisterComponentFolder)#>';


@Component({
  selector: 'app-<#= appRegisterComponentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appRegisterHtmlComponentFolder, appRegisterComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appRegisterCssComponentFolder, appRegisterComponentFolder) #>.css']
})
export class <#= appRegisterComponentClassName #> {
<# 
    if(localize) {
#>
    title: string = $localize`:Registration@@<#= appRegisterComponentClassName #>.Registration:Registration`;
<# 
    } else {
#>
    title: string = 'Registration';
<# 
    }
#>

    cnfPwdhide: boolean = true;
    pwdhide: boolean = true;
    public <#= AppearancePropName #>: DropDownFillMode|InputFillMode|DateInputFillMode = 'outline';
    registerFormGroup: FormGroup;


    constructor(private <#= securityServiceName #>: <#= appLoginServiceClassName #>, protected router: Router, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #> ) {
        this.<#= AppearancePropName #> = this.<#= AppSettingServicePropName #>.<#= AppearancePropName #>;

        this.registerFormGroup =  new FormGroup({});
        let locValidators: ValidatorFn[]; 

        locValidators = [ Validators.required,Validators.minLength(3) ];
        this.registerFormGroup.addControl('email', new FormControl({ value: null, disabled: false}, locValidators));

        locValidators = [ Validators.required,Validators.minLength(6) ];
        this.registerFormGroup.addControl('password', new FormControl({ value: null, disabled: false}, locValidators));

        locValidators = [ Validators.required,Validators.minLength(6) ];
        this.registerFormGroup.addControl('confirmPassword', new FormControl({ value: null, disabled: false}, locValidators));
    } 
    getErrorMessage(fc: AbstractControl): string {
        return this.<#= AppSettingServicePropName #>.getValidationErrorMessage(fc);
    } 

    doSubmit() {
        if(typeof this.registerFormGroup === 'undefined') return;
        if(this.registerFormGroup === null) return;
        if (this.registerFormGroup.invalid) {
            this.registerFormGroup.markAllAsTouched();
            return;
        }
        if(!(this.registerFormGroup.controls['password'].value === this.registerFormGroup.controls['confirmPassword'].value)) {
            let msg = {
<# 
    if(localize) {
#>
                message: $localize`:Password and Confirm Password must be identical@@<#= appRegisterComponentClassName #>.Password-Confirm-dentical:Password and Confirm Password must be identical` 
<# 
    } else {
#>
                message: 'Password and Confirm Password must be identical'
<# 
    }
#>
            };
<# 
    if(localize) {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>($localize`:Input Error@@<#= appRegisterComponentClassName #>.Input-Error:Input Error`, msg);
<# 
    } else {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('Input Error', msg);
<# 
    }
#>
            return;
        }
        this.<#= securityServiceName #>.<#= registerMethodName #>(this.registerFormGroup.value)
        .subscribe({
            next: (respdata: any) => { // success path
                this.doLogin();
            },
            error: (error) => { // error path
                this.appGlblSettings.showError('http', error)
            }
        });
    }
    doLogin() {
        this.<#= securityServiceName #>.<#= loginMethodName #>(this.registerFormGroup.controls['email'].value, this.registerFormGroup.controls['password'].value)
        .subscribe({
            next: (respdata: any) => { // success path
                this.<#= AppSettingServicePropName #>.userName = this.registerFormGroup.controls['email'].value;
                this.<#= AppSettingServicePropName #>.<#= setAuthIntoMethodName #>(respdata);
                this.router.navigate(['/']);
/*
must be uncommented when security is to be turn on
                this.<#= securityServiceName #>.getPermissions().subscribe({
                    next: (rspdt: {modelName: string, userPerms: number}[]) => {
                        this.appGlblSettings.vwModels = {};
                        rspdt.forEach((r: {modelName: string, userPerms: number}) => {
                            this.appGlblSettings.vwModels[r.modelName] = r.userPerms;
                        });
                        console.log(this.appGlblSettings.vwModels)
                    },
                    error: (error) => { 
                        this.appGlblSettings.showError('http', error)
                    }
                });
*/
            },
            error: (error) => { // error path
                this.appGlblSettings.showError('http', error)
            }
        });
    }
    onCancel(){
        this.router.navigate(['/']);
    }

}


