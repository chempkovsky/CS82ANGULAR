<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    string aspnetdashboardFolder        = "00460-aspnetdashboard.cs";

#>

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace <#= GetNameSpaceName(Model, aspnetdashboardFolder, DefaultProjectNameSpace) #>
{
    public class <#= GetEntityClassName(Model, aspnetdashboardFolder) #>
    {
        [Required]
        [Display(Description = "Dashboard Id", Name = "Dashboard Id", Prompt = "Enter Dashboard Id", ShortName = "Id")]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        public int DashboardPk { get; set; }

        [Required]
        [Display(Description = "Dashboard Name", Name = "Dashboard Name", Prompt = "Enter DashboardName", ShortName = "Name")]
        [StringLength(50, MinimumLength = 1, ErrorMessage = "Invalid")]
        public string DashboardName { get; set; } = null!;

        [Display(Description = "Dashboard Description", Name = "Dashboard Description", Prompt = "Enter DashboardDescription", ShortName = "Description")]
        [StringLength(50, MinimumLength = 1, ErrorMessage = "Invalid")]
        public string DashboardDescription { get; set; } = null!;

    }
}

