<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string viewInterfaceFolder          = "01100-.interface.ts";
    string sm2mformComponentFolder      = "01422-Sm2mform.component.ts";
    string viewInterfaceM2mDlgFolder    = "01432-M2mdlg.interface.ts";


    string sm2mdlgCssFolder             = "01442-Sm2mdlg.component.css";
    string sm2mdlgHtmlFolder            = "01442-Sm2mdlg.component.html";
    string sm2mdlgComponentFolder       = "01442-Sm2mdlg.component.ts";


    string showMultiSelectedRowSelector   = "show-multi-selected-row";
    string showMultiSelectedRowPropName   = "showMultiSelectedRow";

    string componentSelectorCommonPart = GetComponentSelectorCommonPart(Model, sm2mdlgComponentFolder);

#>

import { Component,  Input, Output, EventEmitter, ViewChild, Inject } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';

import { <#= GetInterfaceM2mDlgName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceM2mDlgFolder, sm2mdlgComponentFolder)#>';
//import { <#= GetComponentClassName(Model, sm2mdlgComponentFolder) #> } from '<#=  GetFolderName(Model, sm2mformComponentFolder, sm2mdlgComponentFolder) #>';
import { <#= GetInterfaceName(Model) #> } from '<#=  GetFolderName(Model, viewInterfaceFolder, sm2mdlgComponentFolder) #>';

@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, sm2mdlgHtmlFolder, sm2mdlgComponentFolder)#>.html',
  styleUrls: ['<#= GetFolderName(Model, sm2mdlgCssFolder, sm2mdlgComponentFolder)#>.css']
})

export class <#= GetComponentClassName(Model, sm2mdlgComponentFolder) #> { 
    constructor(public dialogRef: MatDialogRef<<#= GetComponentClassName(Model, sm2mdlgComponentFolder) #>>, @Inject(MAT_DIALOG_DATA) public data: <#= GetInterfaceM2mDlgName(Model) #> ) { }
    currentRow: <#= GetInterfaceName(Model) #> |null = null;
    <#= showMultiSelectedRowPropName #>: boolean = false;
    onSelectedRow(row:  <#= GetInterfaceName(Model) #> | null) {
        this.currentRow = row;
    }
    onCancel() {
        this.dialogRef.close(null);
    }
    onOk() {
        if(typeof this.currentRow == 'undefined') return;
        if(this.currentRow == null) return;
        this.data.selectedItems =  [this.currentRow];
        this.dialogRef.close(this.data);
    }
}


<#+
    string GetInterfaceDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Dlg";
    }
    string GetInterfaceM2mDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"M2mdlg";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
#>
