<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    string appConfigServiceFolder       = "00014-app-config.service.ts";
    string appConfigServiceClassName    = GetServiceClassName(Model, appConfigServiceFolder);
    string configPropName               = "config";
    string webApiUrlPropName            = "webApiUrl";
    string securityUrlPropName          = "securityUrl";
    string permissionWebApiPropName     = "permissionWebApi";

    string appConfigFolder              = "00013-app-config.interface.ts";
    string appConfigClassName           = GetModelClassName(Model, appConfigFolder);



#>

import { Injectable, Injector } from '@angular/core';
import { firstValueFrom } from 'rxjs';
import { HttpClient } from '@angular/common/http';

import { <#= appConfigClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appConfigFolder, appConfigServiceFolder)#>';

@Injectable()
export class <#= appConfigServiceClassName #> {
    private _appConfig: <#= appConfigClassName #>  = {
      <#= webApiUrlPropName #>: '',
      <#= securityUrlPropName #>: '',
      <#= permissionWebApiPropName #>: '',
    }; 
    constructor (private injector: Injector) { }
    loadAppConfig() {
        let http = this.injector.get(HttpClient);
          firstValueFrom(http.get<<#= appConfigClassName #>>('/assets/app-config.json')).then((data) => {
            this._appConfig = data;
          }).catch(()=>{
            console.warn("Error loading app-config.json, using envrionment file instead");
          });
    }
    get <#= configPropName #>(): <#= appConfigClassName #> {
        return this._appConfig;
    }
}

