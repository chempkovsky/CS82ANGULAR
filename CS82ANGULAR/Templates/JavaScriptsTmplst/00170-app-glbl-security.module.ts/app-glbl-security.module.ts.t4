<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string materialModuleFolder                     = "00010-app-material.module.ts";
    string flexModuleFolder                         = "00011-app-flex-layout.module.ts";


    string securityDashboardComponentFolder         = "00156-app-scrt-dashboard.component.ts";
    string appChangePasswordComponentFolder         = "00144-app-glbl-chngpswd.component.ts";
    string appLogoutComponentFolder                 = "00142-app-glbl-logout.component.ts";
    string appLoginComponentFolder                  = "00140-app-glbl-login.component.ts";
    string appRegisterComponentFolder               = "00135-app-glbl-register.component.ts";

    string securityRoutingModuleFolder              = "00160-app-glbl-security.routing.module.ts";
    string securityModuleFolder                     = "00170-app-glbl-security.module.ts";

    string appChangePasswordComponentClassName      = GetComponentClassName(Model, appChangePasswordComponentFolder);
    string appLogoutComponentClassName              = GetComponentClassName(Model, appLogoutComponentFolder);
    string appLoginComponentClassName               = GetComponentClassName(Model, appLoginComponentFolder);
    string appRegisterComponentClassName            = GetComponentClassName(Model, appRegisterComponentFolder);
    string securityDashboardComponentClassName      = GetComponentClassName(Model, securityDashboardComponentFolder);
    string securityRoutingModuleClassName           = GetModuleClassName(Model, securityRoutingModuleFolder);
    string materialModuleClassName                  = GetModuleClassName(Model, materialModuleFolder);
    string flexModuleClassName                      = GetModuleClassName(Model, flexModuleFolder);


    string securityModuleClassName                  = GetModuleClassName(Model, securityModuleFolder);

#>

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { <#= materialModuleClassName #> } from '<#= GetFolderName(Model, materialModuleFolder, securityModuleFolder)#>';
import { <#= flexModuleClassName #> } from '<#= GetFolderName(Model, flexModuleFolder, securityModuleFolder)#>';
import { <#= securityRoutingModuleClassName #> } from '<#= GetFolderName(Model, securityRoutingModuleFolder, securityModuleFolder)#>';

import { <#= appChangePasswordComponentClassName #> } from '<#= GetFolderName(Model, appChangePasswordComponentFolder, securityModuleFolder)#>';
import { <#= appLogoutComponentClassName #> } from '<#= GetFolderName(Model, appLogoutComponentFolder, securityModuleFolder)#>';
import { <#= appLoginComponentClassName #> } from '<#= GetFolderName(Model, appLoginComponentFolder, securityModuleFolder)#>';
import { <#= appRegisterComponentClassName #> } from '<#= GetFolderName(Model, appRegisterComponentFolder, securityModuleFolder)#>';
import { <#= securityDashboardComponentClassName #> } from '<#= GetFolderName(Model, securityDashboardComponentFolder, securityModuleFolder)#>';


//
// Hint: 
// add the following line
// { path: 'authentication', loadChildren: () => import('<#= GetModuleFileName(Model, securityModuleFolder) #>').then(m => m.<#= securityModuleClassName #>) }, 
//
// to the array
// const routes: Routes = [ ... ]
//
// of the "app-routing.module.ts"-file
// 
// In the app.component.html-file you can add the following lines
// <mat-nav-list>
//  ...
//    <a mat-list-item [routerLink]="['/authentication/login']" routerLinkActive="active">Sign in</a> 
//    <a mat-list-item [routerLink]="['/authentication/logout']" routerLinkActive="active">Sign out</a> 
//    <a mat-list-item [routerLink]="['/authentication/register']" routerLinkActive="active">Registration</a> 
//    <a mat-list-item [routerLink]="['/authentication/changepassword']" routerLinkActive="active">Change Password</a> 
//  ...
// </mat-nav-list>
//
// 
//



@NgModule({
    declarations: [
        <#= appRegisterComponentClassName #>,
        <#= appLoginComponentClassName #>,
        <#= appLogoutComponentClassName #>,
        <#= appChangePasswordComponentClassName #>,
        <#= securityDashboardComponentClassName #>,
    ],
    imports: [
        CommonModule,
        <#= materialModuleClassName #>,
        <#= flexModuleClassName #>,
        <#= securityRoutingModuleClassName #>
    ],
    exports: [
        <#= appRegisterComponentClassName #>,
        <#= appLoginComponentClassName #>,
        <#= appLogoutComponentClassName #>,
        <#= appChangePasswordComponentClassName #>,
        <#= securityDashboardComponentClassName #>,
    ],
    entryComponents: [
    ]
})
export class <#= securityModuleClassName #> { }


<#+

    string GetModuleFileName(ModelViewSerializable model, string fileType) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        CommonStaffSerializable curItem = model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (curItem == null) {
            return result;
        }
        return result + curItem.FileFolder.Replace("\\","/").Replace("app/","").Replace("src/","") + "/" + GetModuleComponentFolderName(model, fileType, fileType).Replace("./","");
    }

    string GetModuleComponentFolderName(ModelViewSerializable model, string currFolder, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || string.IsNullOrEmpty(refFolder) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModuleClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".module","Module").Replace(".routing","Routing");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }

    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetEnumClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

#>
