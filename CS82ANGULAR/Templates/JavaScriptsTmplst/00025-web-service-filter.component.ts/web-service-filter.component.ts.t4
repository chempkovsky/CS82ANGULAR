<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string showAddFltItemSelector       = "show-add-flt-item";
    string showAddFltItemPropName       = "showAddFltItem";

    string showFilterSelector           = "show-filter";
    string showFilterPropName           = "showFilter";
    string inputFilterDefsSelector      = "filter-defs";
    string inputFilterDefsPropName      = "inputFilterDefs";
    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";
    string AppSettingServicePropName    = "appGlblSettings";
    string AppearancePropName           = "appearance";
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";


    Dictionary<string, string> RegExps = new Dictionary<string, string>() {
            { "RegExpGuid"       , @"/(?im)^[{(]?[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]?$/" },
            { "RegExpInteger"    , @"/^[-+]?\d+$/" },
            { "RegExpFloat"      , @"/^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/" },
            { "RegExpEmail"      , @"/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/" },
            { "RegExpCurrency"   , @"/(?=.*?\d)^\$?(([1-9]\d{0,2}(,\d{3})*)|\d+)?(\.\d{1,2})?$/" }
            };


    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";
    string filterModelFolder = "00021-web-service-filter.interface.ts";
    string filterDefModelFolder = "00022-web-service-filter-def.interface.ts";
    string filterOperatorModelFolder = "00023-web-service-filter-operator.interface.ts";
    string filterResultModelFolder = "00024-web-service-filter-rslt.interface.ts";
    string filterComponentCssFolder = "00025-web-service-filter.component.css";
    string filterComponentHtmlFolder = "00025-web-service-filter.component.html";
    string filterComponentFolder = "00025-web-service-filter.component.ts";
    string menuItemDataModelFolder = "00017-menu-item-data.interface.ts";
    string eventEmitterDataModelFolder = "00018-event-emitter-data.interface.ts";
    string eventEmitterPubModelFolder = "00019-event-emitter-pub.interface.ts";

                                
    string filterModelClassName = GetModelClassName(Model, filterModelFolder);
    string filterDefModelClassName = GetModelClassName(Model, filterDefModelFolder);
    string filterOperatorModelClassName = GetModelClassName(Model, filterOperatorModelFolder);
    string filterResultModelClassName = GetModelClassName(Model, filterResultModelFolder);
    string filterComponentClassName = GetComponentClassName(Model, filterComponentFolder);
    string menuItemDataModelClassName = GetModelClassName(Model, menuItemDataModelFolder);
    string eventEmitterDataModelClassName = GetModelClassName(Model, eventEmitterDataModelFolder);
    string eventEmitterPubModelClassName    = GetModelClassName(Model, eventEmitterPubModelFolder);

    string filterComponentSelectorCommonPart = GetComponentSelectorCommonPart(Model, filterComponentFolder);
    
    string appSettingServiceClassName   = GetServiceClassName(Model, appSettingServiceFolder);

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string OnBackBtnSelector            = "on-back-btn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";


#>
import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { FormControl, Validators, ValidatorFn, ValidationErrors } from '@angular/forms';
import { MatFormFieldAppearance } from '@angular/material/form-field';

import { <#= filterModelClassName #> } from '<#= GetFolderName(Model, filterModelFolder, filterComponentFolder)#>';
import { <#= filterDefModelClassName #> } from '<#= GetFolderName(Model, filterDefModelFolder, filterComponentFolder)#>';
import { <#= filterOperatorModelClassName #> } from '<#= GetFolderName(Model, filterOperatorModelFolder, filterComponentFolder)#>';
import { <#= filterResultModelClassName #> } from '<#= GetFolderName(Model, filterResultModelFolder, filterComponentFolder)#>';
import { <#= appSettingServiceClassName #> } from '<#= GetFolderName(Model, appSettingServiceFolder, filterComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#= GetFolderName(Model, menuItemDataModelFolder, filterComponentFolder)#>';
import { <#= eventEmitterDataModelClassName #> } from '<#= GetFolderName(Model, eventEmitterDataModelFolder, filterComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetFolderName(Model, eventEmitterPubModelFolder, filterComponentFolder)#>';


import { MatSelectChange } from '@angular/material/select';


@Component({
  selector: 'app-<#= filterComponentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, filterComponentHtmlFolder, filterComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderName(Model, filterComponentCssFolder, filterComponentFolder) #>.css']
})
export class <#= filterComponentClassName#> implements OnInit, <#= eventEmitterPubModelClassName #> {
    protected isOnInitCalled: boolean = false;
    public <#= AppearancePropName #>: MatFormFieldAppearance = 'outline';
    
    @Input('<#= captionSelector #>') <#= captionPropName #>: string = '';
    @Input('<#= showBackBtnSelector #>') <#= showBackBtnPropName #>: boolean = false;
    @Output('<#= OnBackBtnSelector #>') <#= OnBackBtnPropName #> = new EventEmitter<any>();
    <#= OnBackBtnMethodName #>() {
        this.<#= OnBackBtnPropName #>.emit(null);
    }

    public <#= OverflowPropName #>: string | null = null;   
    public  <#= MaxHeightPropName #>X: number|null = null;
    protected _<#= MaxHeightPropName #>: number|null = null;
    @Input('<#= MaxHeightPropSelector #>')
        get <#= MaxHeightPropName #>(): number|null {
            return this._<#= MaxHeightPropName #>;
        }
      set <#= MaxHeightPropName #>(inp: number|null) {
        if (!(typeof inp === 'undefined')) {
          if(!(inp === null)) {
            this.<#= MaxHeightPropName #>X = inp * this.<#= AppSettingServicePropName #>.filterHeightFactor + this.<#= AppSettingServicePropName #>.filterHeightAddition;
            this._<#= MaxHeightPropName #> = inp;
            this.<#= OverflowPropName #> = 'auto';
            if(this.isOnInitCalled) {
              this.cd.detectChanges();
            }
            return;
          }
        }
        this._<#= MaxHeightPropName #> = null;
        this.<#= MaxHeightPropName #>X = null;
        this.<#= OverflowPropName #> = null;
        if(this.isOnInitCalled) {
            this.cd.detectChanges();
        }
      }
    @Input('<#= showAddFltItemSelector #>') <#= showAddFltItemPropName #>: boolean = true;
    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= menuItemDataModelClassName #>)  {
        let e: <#= eventEmitterDataModelClassName #> = {
            id: v.id,
            sender: this,
            value: null
        }
        this.<#= onContainerMenuItemClickEmitter #>.emit(e);
    }

    protected _<#= showFilterPropName #>: boolean = true;
    @Input('<#= showFilterSelector #>') 
      get <#= showFilterPropName #>(): boolean {
        return this._<#= showFilterPropName #>;
      }
      set <#= showFilterPropName #>(inshow: boolean) {
        if (!(typeof inshow === 'undefined')) {
          if(!(inshow === null)) {
            this._<#= showFilterPropName #> = inshow;
            if(this.isOnInitCalled) {
              this.onFilterDefsChanged();
            }
          }
        }
      }

    protected _<#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>> = [];

    @Input('<#= HiddenFilterSelector #>') 
        get <#= HiddenFilterPropName #>(): Array<<#= filterResultModelClassName #>>|any {
          return this._<#= HiddenFilterPropName #>;
        }
        set <#= HiddenFilterPropName #>(inDef: Array<<#= filterResultModelClassName #>>|any) {
          if (typeof inDef === 'undefined') {
            this._<#= HiddenFilterPropName #> = [];
          } else if(!Array.isArray(inDef)) {
            this._<#= HiddenFilterPropName #> = [];
          } else {
            this._<#= HiddenFilterPropName #> = inDef as Array<<#= filterResultModelClassName #>>;
          }
          if(this.isOnInitCalled) {
            this.onFilterDefsChanged();
          }
        } 

    protected _<#= inputFilterDefsPropName #>: Array<<#= filterDefModelClassName #>> = [];

    @Input('<#= inputFilterDefsSelector #>') 
        get <#= inputFilterDefsPropName #>(): Array<<#= filterDefModelClassName #>> {
          return this._<#= inputFilterDefsPropName #>;
        }
        set <#= inputFilterDefsPropName #>(inDef: Array<<#= filterDefModelClassName #>>) {
          if (typeof inDef === 'undefined') {
            this._<#= inputFilterDefsPropName #> = [];
          } else if(!Array.isArray(inDef)) {
            this._<#= inputFilterDefsPropName #> = [];
          } else {
            this._<#= inputFilterDefsPropName #> =  inDef;
          }
          if(this.isOnInitCalled) {
            this.onFilterDefsChanged();
          }
        }


    @Output('on-apply-filter') onApplyFilter = new EventEmitter();
  
    webServiceFilterDefs: Array<<#= filterDefModelClassName #>> = [];
    webServiceOperators: Array<<#= filterOperatorModelClassName #>> = [];
    webServiceFilters: Array<<#= filterModelClassName #>> = [];

    constructor(protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, private cd: ChangeDetectorRef) { 
        this.<#= AppearancePropName #> = this.<#= AppSettingServicePropName #>.<#= AppearancePropName #>;
    }

    ngOnInit(): void {
        this.webServiceOperators = [
            {oName: 'eq', oCaption: '=='},
            {oName: 'gt', oCaption: '>='},
            {oName: 'lt', oCaption: '=<'},
            {oName: 'ne', oCaption: '<>'},
            {oName: 'lk', oCaption: 'Like'}
        ];
        this.onFilterDefsChanged();
        this.isOnInitCalled = true;
        this.cd.detectChanges();
    }

    onFilterDefsChanged(): void {
        this.webServiceFilterDefs = [{fltrName: '', fltrCaption: '--No filter--',  fltrDataType: '', fltrMaxLen: null, fltrMin: null, fltrMax: null }];
        this.<#= inputFilterDefsPropName #>.forEach(i => {
            if(this.<#= HiddenFilterPropName #>.findIndex((h: { fltrName: string; }) => { return (h.fltrName === i.fltrName); }) < 0) {
            this.webServiceFilterDefs.push({ fltrName: i.fltrName, fltrCaption: i.fltrCaption, fltrDataType: i.fltrDataType, fltrMaxLen: i.fltrMaxLen, fltrMin: i.fltrMin, fltrMax: i.fltrMax });
            }
        });    
        if(this.<#= showFilterPropName #>) {
            const fltDef: <#= filterDefModelClassName #> = this.webServiceFilterDefs[0];
            const fltOp: <#= filterOperatorModelClassName #> = this.webServiceOperators[0];

            this.webServiceFilters = [
                { fltrName: new FormControl(fltDef.fltrName), fltrDataType: fltDef.fltrDataType, 
                fltrOperator: new FormControl(fltOp.oName), fltrValue: new FormControl({ value: null, disabled: true }), 
                fltrMaxLen: fltDef.fltrMaxLen, fltrMin: fltDef.fltrMin, fltrMax: fltDef.fltrMax }
            ];
        } else {
            this.webServiceFilters = [];
        }
    }

    addFilter() {
        const fltDef: <#= filterDefModelClassName #> = this.webServiceFilterDefs[0];
        const fltOp: <#= filterOperatorModelClassName #> = this.webServiceOperators[0];

        let item: <#= filterModelClassName #> = { fltrName: new FormControl(fltDef.fltrName), fltrDataType: fltDef.fltrDataType, fltrOperator: new FormControl(fltOp.oName), 
          fltrValue: new FormControl({ value: null, disabled: true }), fltrMaxLen: fltDef.fltrMaxLen, fltrMin: fltDef.fltrMin, fltrMax: fltDef.fltrMax };
        this.webServiceFilters.push(item);
    }

    onSelectionChanged(event: MatSelectChange, flt: <#= filterModelClassName #>) {
        if ((typeof flt === 'undefined') || (typeof event === 'undefined')) return;
        if (typeof event.value === 'undefined')  return;
        if ((flt === null) || (event.value === null))  return;

        let itm: <#= filterDefModelClassName #> | any = this.webServiceFilterDefs.find((e,i,a) => {
            return (e.fltrName === event.value);
        });
        if(typeof itm === 'undefined') {
            itm = this.webServiceFilterDefs[0];
        } else if (itm === null) {
            itm = this.webServiceFilterDefs[0];
        } 

        if (!(typeof itm === 'undefined')) {
            if(!(itm === null)) {
            flt.fltrDataType = itm.fltrDataType;
            flt.fltrMaxLen = itm.fltrMaxLen;
            flt.fltrMax = itm.fltrMax;
            flt.fltrMin = itm.fltrMin;
            let validators: ValidatorFn[] = []; 

            if (!(typeof itm.fltrMaxLen === 'undefined')) {
                if (!(itm.fltrMaxLen === null)) {
                validators.push(Validators.maxLength(itm.fltrMaxLen));
                }
            }
            if (!(typeof itm.fltrMax === 'undefined')) {
                if (!(itm.fltrMax === null)) {
                validators.push(Validators.max(itm.fltrMax));
                }
            }
            if (!(typeof itm.fltrMin === 'undefined')) {
                if (!(itm.fltrMin === null)) {
                validators.push(Validators.min(itm.fltrMin));
                }
            }
            flt.fltrValue.setValidators([]);
            switch(itm.fltrDataType) {
                case '':
                    flt.fltrValue.reset({ value: null, disabled: true });
                    break;
                case 'int16':
                case 'int32':
                case 'int64':
                case 'uint16':
                case 'uint32':
                case 'uint64':
                    flt.fltrValue.reset({ value: null, disabled: false });
                    validators.push(Validators.pattern(<#= RegExps["RegExpInteger"] #>));
                    flt.fltrValue.setValidators(validators);
                    break;
                case 'double':
                case 'decimal':
                case 'single':
                    flt.fltrValue.reset({ value: null, disabled: false });
                    validators.push(Validators.pattern(<#= RegExps["RegExpFloat"] #>));
                    flt.fltrValue.setValidators(validators);
                    break;
                case 'guid':
                    flt.fltrValue.reset({ value: '', disabled: false });
                    //validators.push(Validators.pattern(<#= RegExps["RegExpGuid"] #>));
                    flt.fltrValue.setValidators(validators);
                    break;
                case 'datetime':
                    flt.fltrValue.reset({ value: null, disabled: false });
                    flt.fltrValue.setValidators(validators);
                    break;
                default:
                    flt.fltrValue.reset({ value: null, disabled: false });
                    flt.fltrValue.setValidators(validators);
                    break;
            }
            flt.fltrValue.updateValueAndValidity(); // must be called after resetting validators

            }
        }
    }

    removeFltr(wsfdDef: <#= filterModelClassName #>) {
        if(typeof wsfdDef === 'undefined') return;
        if (this.webServiceFilters.length < 2) return;
        const i = this.webServiceFilters.indexOf(wsfdDef);
        if (i >= 0) {
          this.webServiceFilters.splice(i, 1);
        }
    }

    removeAllFilters() {
        let i: number = this.webServiceFilters.length;
        if (i > 1) {
          this.webServiceFilters.splice(1, i-1);
        }
    }

    getErrorMessage(fc: FormControl): string {
        let rslt: string = 'Filter item will not be applied.';
        if (typeof fc === 'undefined') {
          return rslt;
        }
        if (fc === null) {
          return rslt;
        }
        if (fc.errors === null) return rslt;
        const errs: ValidationErrors = fc.errors as ValidationErrors;
        Object.keys(errs).forEach(k => {
          switch(k) {
            case 'max':
              rslt +=' The value must be less than ' + errs[k].max;
              break;
            case 'min':
              rslt +=' Value must be greater than ' + errs[k].min;
              break;
            case 'pattern':
              rslt +=' Icorrect format.' ;
              break;
            case 'matDatepickerMin':
              rslt +=' Value must be greater than ' + errs[k].min;
              break;
            case 'matDatepickerMax':
              rslt +=' The value must be less than ' + errs[k].max;
              break;
            case 'matDatepickerParse':
              rslt +=' Icorrect date format.' ;
              break;
            default:
              rslt +=' Icorrect format.' ;
              break;
          }
        });
        return rslt;
    }

    onApplyFilterClicked(): void {
        let result: Array<<#= filterResultModelClassName #>> = [];
        this.<#= HiddenFilterPropName #>.forEach((i: IWebServiceFilterRslt) => {
          result.push(i);
        });
        this.webServiceFilters.forEach(i => {
          if (i.fltrValue.enabled) {
            if(i.fltrValue.valid) {
              result.push({fltrName: i.fltrName.value, fltrDataType: i.fltrDataType, fltrOperator: i.fltrOperator.value, fltrValue: i.fltrValue.value});
            }
          }
        });
        this.onApplyFilter.emit(result);
    }
}

<#+
    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }

    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
#>
