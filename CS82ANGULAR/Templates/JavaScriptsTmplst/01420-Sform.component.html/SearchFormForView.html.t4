<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>

<#
    bool localize = Context.Localize;

    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";
    int percentEq100 = 99;

    string showAddFltItemSelector           = "show-add-flt-item";
    string showAddFltItemPropName           = "showAddFltItem";

    string DisplayedColumnsProperty        = "displayedColumns";
    string ActionColumnDefProperty         = "menuAction";
    string SelectColumnDefProperty         = "selectAction";
    string SelectMultColumnDefProperty     = "selectMultAction";
    string multSelectionProperty           = "multSelection";

    string OnSelectRowMethodName           = "onSelectRow";
    string MatPaginatorLen                 = "matPaginatorLen";
    string MatPaginatorPageSize            = "matPaginatorPageSize";
    string MatPaginatorPageSizeOptions     = "matPaginatorPageSizeOptions"; 
    
    string EformModePropName        = "eformMode";

    string DisplayLabelProperty     = "Name";
    string ShortNameLabelProperty   = "ShortName";
    string DisplayHintProperty      = "Prompt";

    string MainFormGroupName        = "mainFormGroup";
    string ComboSufix               = "CmbCntrl";
    string TypeaheadSufix           = "TphdCntrl";
    string TypeaheadDisplaySufix    = "DsplFn";
    string TypeaheadAddDisplaySufix = "AddDsplFn";
    string TypeaheadUpdDisplaySufix = "UpdDsplFn";
    string TypeaheadDelDisplaySufix = "DelDsplFn";
    string SearchClickSufix         = "SrchClck";

    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string HiddenFilterExPropName   = "hiddenFilterEx";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";

    string RowCommandsSelector      = "row-commands";
    string RowCommandsPropName      = "rowCommands";
    string TableCommandsSelector    = "table-commands";
    string TableCommandsPropName    = "tableCommands";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string MaxHeightExPropName          = "maxHeightEx";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";

    string externalFilterSelector               = "external-filter";
    string externalFilterPropName               = "externalFilter";
    string externalFilterRsltPropName           = "externalFilterRslt";
    string selectedRowSelector                  = "selected-row";
    string selectedRowPropName                  = "selectedRow";
    string showMultiSelectedRowSelector         = "show-multi-selected-row";
    string showMultiSelectedRowPropName         = "showMultiSelectedRow";
    string showMultiSelectedRowExPropName       = "showMultiSelectedRowEx";
    string notifyAllPropName                    = "notifyAll";
    string notifyAllSelector                    = "notify-all";


    string filterModelFolder            = "00021-web-service-filter.interface.ts";
    string filterDefModelFolder         = "00022-web-service-filter-def.interface.ts";
    string filterOperatorModelFolder    = "00023-web-service-filter-operator.interface.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string filterComponentCssFolder     = "00025-web-service-filter.component.css";
    string filterComponentHtmlFolder    = "00025-web-service-filter.component.html";
    string filterComponentFolder        = "00025-web-service-filter.component.ts";
    string menuItemDataModelFolder      = "00017-menu-item-data.interface.ts";
    string eventEmitterDataModelFolder  = "00018-event-emitter-data.interface.ts";
    string uniqFilterComponentFolder    = "00046-uniq-service-filter.component.ts";

    
    string viewInterfaceFolder      = "01100-.interface.ts";
    string viewInterfacePageFolder  = "01200-Page.interface.ts";
    string viewInterfaceFltFolder   = "01300-Filter.interface.ts";
    string viewServiceFolder        = "01400-.service.ts";

    string sformComponentFolder     = "01420-Sform.component.ts";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string OnBackBtnSelector            = "on-back-btn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string searchShowFilterPropName     = "searchShowFilter";
    string searchShowAddFltItemPropName = "searchShowAddFltItem";
    string searchOnSelectRowMethodName  = "srchOnSlctRw";
    string searchMaxHeightPropName      = "searchMaxHeight";
    string searchFilterMaxHeightPropName= "searchFilterMaxHeight";
    string scannByMode                  = "scannBy";


    string tpAheadValPropName           = "tpAheadVal";
    string tpAheadValSelector           = "tp-ahead-val";
    string tpAheadFncPropName           = "tpAheadFnc";
    string tpAheadFncSelector           = "tp-ahead-fnc";
    string tpAheadCptnPropName          = "tpAheadCptn";
    string tpAheadCptnSelector          = "tp-ahead-cptn";
    string formServicePrefix            = "frmSrv";
    string formRootService              = "frmRootSrv";
    string afterObjSelPropName          = "afterObjSel";
    string afterObjSelSelector          = "after-obj-sel";


    string filterComponentSelectorCommonPart = GetContextComponentSelectorCommonPart(Context, filterComponentFolder);
    string uniqFilterComponentSelectorCommonPart = GetContextComponentSelectorCommonPart(Context, uniqFilterComponentFolder);

    string sFormComponentClassName = GetComponentClassName(Model, sformComponentFolder);

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = GetModelUniqueKeys(Model, new List<ModelViewUniqueKeyOfVwSerializable>());
    ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
    if(pk!= null) uniqueKeys.Add(pk);

    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);

#>

<#
  if(searchSchemas != null) {
    foreach(var sch in searchSchemas) {
        ModelViewSerializable m2mModel = sch.Item1;

#>
<app-<#= uniqFilterComponentSelectorCommonPart #> *ngIf="crIMIDid === '<#= m2mModel.ViewName #>'"
    [<#= captionSelector #>]="<#= captionPropName #>" 
    (<#= OnBackBtnSelector #>)="<#= OnBackBtnMethodName #>($event)"
    [<#= showBackBtnSelector #>]="<#= showBackBtnPropName #>"
    (on-apply-filter)="onApplyFilter($event)" 
    [<#= externalFilterSelector #>]="<#= externalFilterRsltPropName #>"
    [<#= MaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
    [filter-defs]="filterDefs"  [show-filter]="<#= ShowFilterPropName #>"
    [<#= containerMenuItemsSelector #>]="<#= containerMenuItemsPropName #>"
    (<#= onContainerMenuItemClickSelector #>)="<#= onContainerMenuItemClickMethodName #>($event)"
    [<#= tpAheadValSelector #>]="<#= tpAheadValPropName + m2mModel.ViewName #>"
    [<#= tpAheadFncSelector #>]="<#= tpAheadFncPropName + m2mModel.ViewName #>"
    [<#= tpAheadCptnSelector #>]="<#= tpAheadCptnPropName + m2mModel.ViewName #>"
    (<#= afterObjSelSelector #>)="<#= afterObjSelPropName + m2mModel.ViewName #>($event)"
    [<#= notifyAllSelector #>]="false"
    ></app-<#= uniqFilterComponentSelectorCommonPart #>>
<#
    }
  }
  if (Model.IsWebApiSelectOneByPrimarykey) {
    for(int i = 0; i < uniqueKeys.Count; i++) { 
        string indErrrorText = "";
        bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
        if (!indIsCorrect) {
#>

<!--

 Could not generate fragment of code
 Primary/Unique Index Is not correct:
 <#= indErrrorText #>

 -->

<#
        } else {
            string caption = "Primary";
            if(!uniqueKeys[i].IsPrimary) {
                caption = uniqueKeys[i].UniqueKeyName;
            }

#>
<app-<#= uniqFilterComponentSelectorCommonPart #> *ngIf="crIMIDid === '<#= scannByMode + caption #>'"
    [<#= captionSelector #>]="<#= captionPropName #>" 
    (<#= OnBackBtnSelector #>)="<#= OnBackBtnMethodName #>($event)"
    [<#= showBackBtnSelector #>]="<#= showBackBtnPropName #>"
    (on-apply-filter)="onApplyFilter($event)" 
    [<#= externalFilterSelector #>]="<#= externalFilterRsltPropName #>"
    [<#= MaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
    [filter-defs]="filterDefs"  [show-filter]="<#= ShowFilterPropName #>"
    [<#= containerMenuItemsSelector #>]="<#= containerMenuItemsPropName #>"
    (<#= onContainerMenuItemClickSelector #>)="<#= onContainerMenuItemClickMethodName #>($event)"
    [<#= tpAheadValSelector #>]="<#= tpAheadValPropName + caption #>"
    [<#= tpAheadFncSelector #>]="<#= tpAheadFncPropName + caption #>"
    [<#= tpAheadCptnSelector #>]="<#= tpAheadCptnPropName + caption #>"
    (<#= afterObjSelSelector #>)="<#= afterObjSelPropName + caption #>($event)"
    [<#= notifyAllSelector #>]="true"
    ></app-<#= uniqFilterComponentSelectorCommonPart #>>
<#

        } // if (!indIsCorrect) {} else {}
    } // for(int i = 0; i < uniqueKeys.Count; i++) {} else {}
}
#>

<app-<#= filterComponentSelectorCommonPart #> *ngIf="crIMIDid === 'fullscann'"
    [<#= captionSelector #>]="<#= captionPropName #>" 
    (<#= OnBackBtnSelector #>)="<#= OnBackBtnMethodName #>($event)"
    [<#= showBackBtnSelector #>]="<#= showBackBtnPropName #>"
    (on-apply-filter)="onApplyFilter($event)" 
    [<#= externalFilterSelector #>]="<#= externalFilterRsltPropName #>"
    [<#= showAddFltItemSelector #>]="<#= showAddFltItemPropName #>"  
    [<#= MaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
    [filter-defs]="filterDefs" [hidden-filter]="<#= HiddenFilterExPropName #>" [show-filter]="<#= ShowFilterPropName #>"
    [<#= containerMenuItemsSelector #>]="<#= containerMenuItemsPropName #>"
    (<#= onContainerMenuItemClickSelector #>)="<#= onContainerMenuItemClickMethodName #>($event)"
    ></app-<#= filterComponentSelectorCommonPart #>>

<mat-progress-bar *ngIf="inQuery" mode="query"></mat-progress-bar>
<div [style.maxHeight.px]="<#= MaxHeightExPropName #>" [style.overflow-y]="<#= OverflowPropName #>" class="mat-tbl-container">

<mat-radio-group>
<table mat-table [dataSource]="dataSource" <#= matSortIfNeeded(Model) #>  >

  <ng-container matColumnDef="<#= SelectColumnDefProperty #>" sticky>
    <th mat-header-cell *matHeaderCellDef> </th>
    <td mat-cell *matCellDef="let e">
      <mat-radio-button (change)="<#= OnSelectRowMethodName #>(e)" [value]="e" [checked]="e === currentRow" ></mat-radio-button>
    </td>
  </ng-container>
  <ng-container matColumnDef="<#= SelectMultColumnDefProperty #>" sticky>
    <th mat-header-cell *matHeaderCellDef>
      <mat-checkbox (change)="$event ? masterToggle() : null"
                    [checked]="<#= multSelectionProperty #>.hasValue() && isAllSelected()"
                    [indeterminate]="<#= multSelectionProperty #>.hasValue() && !isAllSelected()">
      </mat-checkbox>
    </th>
    <td mat-cell *matCellDef="let e">
      <mat-checkbox (click)="$event.stopPropagation()"
                    (change)="$event ? <#= multSelectionProperty #>.toggle(e) : null"
                    [checked]="<#= multSelectionProperty #>.isSelected(e)">
      </mat-checkbox>
    </td>
  </ng-container>


<#
    foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in Model.UIListProperties) {
        if (!modelViewUIListPropertySerializable.IsShownInView) {
            continue;
        }
#>
<# 
    if(localize) {
#>
    <ng-container matColumnDef="<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>" >
        <th mat-header-cell *matHeaderCellDef <#= matSortHeaderIfNeeded(modelViewUIListPropertySerializable, Model) #> 
        i18n="<#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, ShortNameLabelProperty) #>@@<#= sFormComponentClassName #>.<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>-ColumnDef"><#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, ShortNameLabelProperty) #></th>
        <td mat-cell *matCellDef="let e"> {{e.<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, Model) #> <#= GetDataPipeEx2(modelViewUIListPropertySerializable, Model) #> }} </td>
    </ng-container>

<# 
    } else {
#>
    <ng-container matColumnDef="<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, Model) #>" >
        <th mat-header-cell *matHeaderCellDef <#= matSortHeaderIfNeeded(modelViewUIListPropertySerializable, Model) #> > <#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, ShortNameLabelProperty) #> </th>
        <td mat-cell *matCellDef="let e"> {{e.<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, Model) #> <#= GetDataPipeEx2(modelViewUIListPropertySerializable, Model) #> }} </td>
    </ng-container>
<# 
    }
#>

<#
    }
#>

    <ng-container matColumnDef="<#= ActionColumnDefProperty #>" stickyEnd>
        <th mat-header-cell *matHeaderCellDef>
            <button mat-icon-button [matMenuTriggerFor]="tblMenu" >
                <mat-icon>more_vert</mat-icon>
            </button>
            <mat-menu #tblMenu="matMenu">


<# 
    if(localize) {
#>
              <button mat-menu-item  (click)="onFilter()">
                <mat-icon>refresh</mat-icon>
                <span i18n="Refresh table@@<#= sFormComponentClassName #>.Refreshtable-menu">Refresh table</span>
              </button>
              <button mat-menu-item  (click)="onSettings()">
                <mat-icon>settings</mat-icon>
                <span i18n="Table columns@@<#= sFormComponentClassName #>.Tablecolumns-menu">Table columns</span>
                <span>Table columns</span>
              </button>
<# 
    } else {
#>
              <button mat-menu-item  (click)="onFilter()">
                <mat-icon>refresh</mat-icon>
                <span>Refresh table</span>
              </button>
              <button mat-menu-item  (click)="onSettings()">
                <mat-icon>settings</mat-icon>
                <span>Table columns</span>
              </button>
<# 
    }
#>
              <button mat-menu-item *ngFor="let m of tableMenuItemsData;"  [disabled]="!m.enabled" (click)="tableCommand(m.id)">
                <mat-icon color="{{m.iconColor}}">{{m.iconName}}</mat-icon>
                <span>{{m.caption}}</span>
              </button>
            </mat-menu>            
        </th>
        <td mat-cell *matCellDef="let e">
            <button mat-icon-button [matMenuTriggerFor]="rowMenu" >
                <mat-icon>more_vert</mat-icon>
            </button>

            <mat-menu #rowMenu="matMenu">
              <button mat-menu-item *ngFor="let m of <#= RowCommandsPropName #>;"  [disabled]="!m.enabled" (click)="rowCommand(e, m.id)">
                <mat-icon color="{{m.iconColor}}">{{m.iconName}}</mat-icon>
                <span>{{m.caption}}</span>
              </button>

            </mat-menu>  
          
        </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="<#= DisplayedColumnsProperty #>; sticky: true"></tr>

    <tr mat-row *matRowDef="let row; columns: <#= DisplayedColumnsProperty #>;"></tr>
</table>
</mat-radio-group>
</div>
<mat-paginator (page)="onPage($event)"  [pageIndex]="currentPageIndex" [pageSize]="currentPageSize" [length]="matPaginatorLen" [pageSize]="matPaginatorPageSize" [pageSizeOptions]="matPaginatorPageSizeOptions"> </mat-paginator> 


