<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    bool localize = Context.Localize;

    string AppearancePropName           = "appearance";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string showAddFltItemSelector       = "show-add-flt-item";
    string showAddFltItemPropName       = "showAddFltItem";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string showFilterExPropName         = "showFilterEx";
    string MaxHeightExPropName          = "maxHeightEx";

    string filterComponentFolder = "00025-web-service-filter.component.ts";
    string filterComponentClassName = GetComponentClassName(Model, filterComponentFolder);

#>

  <div>
     <div fxLayout="row" fxLayoutAlign="flex-end space-around"> 
         <kendo-label fxFlex fxLayoutAlign="flex-start space-around">{{<#= captionPropName #>}}</kendo-label>
         <button kendoButton themeColor="primary" (click)="<#= OnBackBtnMethodName #>()" *ngIf="<#= showBackBtnPropName #>" icon="arrow-left"
<# 
    if(localize) {
#>
    i18n-title="Navigate back to master@@<#= filterComponentClassName #>.Navigate-back-to-master"  title="Navigate back to master" > 
<# 
    } else {
#>
    title="Navigate back to master" > 
<# 
    }
#>
        </button>
        <span fxFlex="3%"></span>  
        <button kendoButton themeColor="primary" (click)="addFilter()" *ngIf="<#= showFilterExPropName #> && <#= showAddFltItemPropName #>" icon="filter"
<# 
    if(localize) {
#>
          i18n-title="Add filter item@@<#= filterComponentClassName #>.Add-filter-item"  title="Add filter item" > 
<# 
    } else {
#>
          title="Add filter item" > 
<# 
    }
#>
        </button>
        <span fxFlex="1%"></span>   
        <button kendoButton themeColor="warning" (click)="removeAllFilters()" *ngIf="<#= showFilterExPropName #> && <#= showAddFltItemPropName #>" icon="filter-clear"
<# 
    if(localize) {
#>
          i18n-title="Remove all filter items@@<#= filterComponentClassName #>.Remove-all-filter-items"  title="Remove all filter items" > 
<# 
    } else {
#>
          title="Remove all filter items" > 
<# 
    }
#>
        </button>
        <span fxFlex="1%"></span>  
        <button kendoButton themeColor="primary" (click)="onApplyFilterClicked()" icon="refresh"
<# 
    if(localize) {
#>
          i18n-title="Apply filter@@<#= filterComponentClassName #>.Apply-filter"  title="Apply filter" > 
<# 
    } else {
#>
          title="Apply filter" > 
<# 
    }
#>
        </button>
        <span fxFlex="2%"></span>     
        <ng-template ngFor let-item [ngForOf]="<#= containerMenuItemsPropName #>">
            <span fxFlex="1%"></span>  
            <button kendoButton [themeColor]="item.iconColor" (click)="<#= onContainerMenuItemClickMethodName #>(item)" 
                [title]="item.caption" [icon]="item.iconName"> 
            </button>
        </ng-template>            
        <span fxFlex="1%"></span>
     </div> 

    <div *ngIf="<#= showFilterExPropName #>" [style.maxHeight.em]="<#= MaxHeightExPropName #>" [style.overflow]="<#= OverflowPropName #>"> 
        <div 
            fxLayout
            fxLayout.xs="column"
            fxLayoutAlign="left"
            fxLayoutGap="1px"
            fxLayoutGap.xs="0px" *ngFor="let flt of webServiceFilters;" >
            <span fxFlex="39%" fxFlex.xs="99%">
                <span fxFlex="1%"></span>

                <kendo-formfield fxFlex="99%">
<# 
    if(localize) {
#>
                    <kendo-label i18n="Column name@@<#= filterComponentClassName #>.Column-name" >Column name</kendo-label>
<# 
    } else {
#>
                    <kendo-label>Column name</kendo-label>
<# 
    }
#>

                    <kendo-dropdownlist [fillMode]="<#= AppearancePropName #>" [formControl]="flt.fltrName" [data]="webServiceFilterDefs" textField="fltrCaption" valueField="fltrName" (selectionChange)="onSelectionChanged($event, flt)" [valuePrimitive]="true" >
                    </kendo-dropdownlist>
                </kendo-formfield>
            </span>

            <div fxFlex="59%" fxFlex.xs="99%" fxLayout="row">
                <span fxFlex="1%"></span>
                <kendo-formfield fxFlex="20%">
<# 
    if(localize) {
#>
                    <kendo-label i18n="Operator@@<#= filterComponentClassName #>.Operator" >Operator</kendo-label>
<# 
    } else {
#>
                    <kendo-label>Operator</kendo-label>
<# 
    }
#>
                    <kendo-dropdownlist [fillMode]="<#= AppearancePropName #>" [formControl]="flt.fltrOperator" [data]="webServiceOperators" textField="oCaption" valueField="oName" [valuePrimitive]="true">
                    </kendo-dropdownlist>
                </kendo-formfield>
                <span fxFlex="1%"></span>                
                <kendo-formfield *ngIf="flt.fltrDataType !== 'datetime'" fxFlex="72%">
<# 
    if(localize) {
#>
                    <kendo-label i18n="Filter value@@<#= filterComponentClassName #>.Filter-value" >Filter value</kendo-label>
<# 
    } else {
#>
                    <kendo-label>Filter value</kendo-label>
<# 
    }
#>
                    <kendo-textbox [fillMode]="<#= AppearancePropName #>" placeholder="Placeholder" [formControl]="flt.fltrValue" [maxlength]="flt.fltrMaxLen">
                    </kendo-textbox>
                    <kendo-formerror *ngIf="flt.fltrValue.invalid">{{getErrorMessage(flt.fltrValue)}}</kendo-formerror>
                    <kendo-formhint align="end" *ngIf="flt.fltrMaxLen">{{flt.fltrValue.value?.length || 0}}/{{flt.fltrMaxLen}}</kendo-formhint>
                </kendo-formfield>

                <kendo-formfield fxFlex="72%" *ngIf="flt.fltrDataType === 'datetime'">
<# 
    if(localize) {
#>
                    <kendo-label i18n="Filter value@@<#= filterComponentClassName #>.Filter-value" >Filter value</kendo-label>
<# 
    } else {
#>
                    <kendo-label>Filter value</kendo-label>
<# 
    }
#>
                    <kendo-datepicker  [fillMode]="<#= AppearancePropName #>" placeholder="Placeholder" [formControl]="flt.fltrValue" [min]="flt.fltrMin" [max]="flt.fltrMax" > 
                    </kendo-datepicker>
                    <kendo-formerror *ngIf="flt.fltrValue.invalid">{{getErrorMessage(flt.fltrValue)}}</kendo-formerror>
                </kendo-formfield>
                
                <button kendoButton fxFlex="5%" fxFlexAlign="center" fillMode="clear" themeColor="warning" rounded="full"
<# 
    if(localize) {
#>
                    i18n-title="Remove current filter item@@<#= filterComponentClassName #>.Remove-current-filter-item"  title="Remove current filter item"
<# 
    } else {
#>
                    title="Remove current filter item"
<# 
    }
#>
                    (click)="removeFltr(flt)" icon="delete" >
                 </button>
            </div>
        </div>
        
    </div>
</div>


<#+
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

#>