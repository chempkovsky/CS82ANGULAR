<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string DepthParamName               = "depth"; 
    string ActionParamName              = "mode";  
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";
    string ActionParamCancelMode        = "cancel";

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";


    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";

    string ShowErrorMethodName          = "showError";
    string OnAfterSubmitMethodName      = "onAfterSubmit";
    

    string EformModePropName            = "eformMode";
    string FormControlModelPropName     = "eformControlModel";
    string FormControlNewModelPropName  = "eformNewControlModel";
    string AppSettingServicePropName    = "appGlblSettings";
    string formRootService              = "frmRootSrv";
    string TitlePropName                = "title";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";


    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";
    string eventEmitterDataModelFolder  = "00018-event-emitter-data.interface.ts";
    string menuItemDataModelFolder      = "00017-menu-item-data.interface.ts";
    string eventEmitterPubModelFolder   = "00019-event-emitter-pub.interface.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string eformModeEnumlFolder         = "00026-eform-mode.enum.ts";
    string viewInterfaceFolder          = "01100-.interface.ts";
    string viewServiceFolder            = "01400-.service.ts";

    string uformComponentFolder         = "01504-Uform.component.ts";

    string ruCssFolder               = "01824-RU.component.css";
    string ruHtmlFolder              = "01824-RU.component.html";
    string ruComponentFolder         = "01824-RU.component.ts";


    string eventEmitterDataModelClassName   = GetModelClassName(Context, eventEmitterDataModelFolder);
    string menuItemDataModelClassName   = GetModelClassName(Context, menuItemDataModelFolder);
    string eventEmitterPubModelClassName    = GetModelClassName(Context, eventEmitterPubModelFolder);

    string eformModeEnumName = GetCommonEnumClassName(Context, eformModeEnumlFolder);
    string componentSelectorCommonPart = GetComponentSelectorCommonPart(Model, ruComponentFolder);
    string componentClassName = GetComponentClassName(Model, ruComponentFolder);
    string appSettingServiceClassName = GetCommonServiceClassName(Context, appSettingServiceFolder);
    string serviceClassName = GetServiceClassName(Model, viewServiceFolder);
    string filterResultModelClassName = GetModelClassName(Context, filterResultModelFolder);
    List<ModelViewPropertyOfVwSerializable> primKeys= GetModelPrimaryKeyProps(Model);
#>

import { Component, OnInit, Input, Output, EventEmitter, ViewChild, Inject } from '@angular/core';
import { ActivatedRoute, Router, ParamMap, UrlSegment, ActivatedRouteSnapshot } from '@angular/router';

import { <#= eformModeEnumName #> } from '<#=  GetCommonFolderName(Model, Context,  eformModeEnumlFolder, uformComponentFolder)#>';
import { <#= GetComponentClassName(Model, uformComponentFolder) #> } from '<#=  GetFolderName(Model, uformComponentFolder, ruComponentFolder) #>';
import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderName(Model, Context,  appSettingServiceFolder, ruComponentFolder)#>';
import { <#= serviceClassName #> } from '<#= GetFolderName(Model, viewServiceFolder, ruComponentFolder) #>';
import { <#= GetInterfaceName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceFolder, ruComponentFolder)#>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterResultModelFolder, ruComponentFolder)#>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  eventEmitterDataModelFolder, ruComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  menuItemDataModelFolder, ruComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderName(Model, Context, eventEmitterPubModelFolder, ruComponentFolder)#>';

@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, ruHtmlFolder, ruComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderName(Model, ruCssFolder, ruComponentFolder) #>.css']
})

export class <#= componentClassName #> implements OnInit, <#= eventEmitterPubModelClassName #> {
    <#= TitlePropName #>: string|any = 'No title';
    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= eventEmitterDataModelClassName #>)  {
        this.<#= onContainerMenuItemClickEmitter #>.emit(v);
    }


    @ViewChild(<#= GetComponentClassName(Model, eformComponentFolder) #>) childForm: <#= GetComponentClassName(Model, eformComponentFolder) #> | any;

    <#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>> = [];
    <#= EformModePropName #>: <#= eformModeEnumName #> = <#= eformModeEnumName #>.DeleteMode;
    <#= FormControlModelPropName #>: <#= GetInterfaceName(Model) #> | null = null;
    currSnapshot: ActivatedRouteSnapshot | any = null;

    constructor(protected route: ActivatedRoute, protected router: Router, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, protected <#= formRootService #>: <#= serviceClassName #>) { }
    ngOnInit() {
        if (!(typeof this.route.snapshot.data === 'undefined')) {
            if (!(this.route.snapshot.data === null)) {
                if (!(typeof this.route.snapshot.data.<#= TitlePropName #> === 'undefined')) {
                    this.<#= TitlePropName #> = this.route.snapshot.data.<#= TitlePropName #>;
                }
            }
        }
        if (this.route.snapshot.url.length < 1) {
            this.currSnapshot = this.route.snapshot.pathFromRoot[this.route.snapshot.pathFromRoot.length-2];
        } else {
            this.currSnapshot = this.route.snapshot;
        }

        let url: UrlSegment[] = this.currSnapshot.url;
        let len: number = url.length;
        if(len < 2) {
            this.onNavError();
            return;
        }
        let paramMap: ParamMap = this.currSnapshot.paramMap;
        if(!paramMap.has('<#= ActionParamName #>')) {
            this.onNavError();
            return;
        }
        let mode: string = url[len-1].path;
        if (typeof mode === 'undefined') {
            this.onNavError();
            return;
        }
        if (mode === null) {
            this.onNavError();
            return;
        }
        mode = mode.toLowerCase();
        if ('<#= ActionParamAddMode #>'.toLowerCase() === mode) {
            this.<#= EformModePropName #> = <#= eformModeEnumName #>.AddMode;
        } else if ('<#= ActionParamUpdateMode #>'.toLowerCase() === mode) {
            this.<#= EformModePropName #> = <#= eformModeEnumName #>.UpdateMode;
        } else if ('<#= ActionParamDeleteMode #>'.toLowerCase() === mode) {
            this.<#= EformModePropName #> = <#= eformModeEnumName #>.DeleteMode;
        } else {
            this.onNavError();
            return;
        }
<#
    if (Model.ForeignKeys != null) {
        if (Model.ForeignKeys.Count > 0) {
#>
        if(paramMap.has('<#= DepthParamName #>')) {
            let depth: number = parseInt(paramMap.get('<#= DepthParamName #>') as string);
            if (depth > 1) {
                let shft: number = 2;
                if (this.<#= EformModePropName #> !== <#= eformModeEnumName #>.AddMode) {
                    shft = <#= primKeys.Count + 2 #>;
                }
                if(shft >= len) {
                    this.onNavError();
                    return;
                }
                let nvgNm: string = url[len - shft].path;
                if(typeof nvgNm === 'undefined') {
                    nvgNm = '';
                }
                if(nvgNm === null) {
                    nvgNm = '';
                }
                nvgNm = nvgNm.toLowerCase();
                let hf: Array<<#= filterResultModelClassName #>> = [];
<#
            {
                bool genEls = false;
                foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in Model.ForeignKeys) {
                    if( string.IsNullOrEmpty( modelViewForeignKeySerializable.NavigationName ) || string.IsNullOrEmpty( modelViewForeignKeySerializable.ViewName )) {
                        continue;
                    }
                    if ((modelViewForeignKeySerializable.PrincipalKeyProps == null) || (modelViewForeignKeySerializable.ForeignKeyProps == null) || (modelViewForeignKeySerializable.ScalarProperties == null)) {
#>
//
//error: for the foreignkey <#= modelViewForeignKeySerializable.NavigationName #> can not find Foreign Keys and(or) Principal Keys and(or) Scalar Properties
//
<#
                        continue;
                    }
                    if (modelViewForeignKeySerializable.PrincipalKeyProps.Count != modelViewForeignKeySerializable.ForeignKeyProps.Count) {
#>
//
//error: for the foreignkey <#= modelViewForeignKeySerializable.NavigationName #> the number of properties of  ForeignKeys is not equal to the number of properties of PrincipalKeys
//
<#
                        continue;
                    }
                    if (modelViewForeignKeySerializable.PrincipalKeyProps.Count < 1) {
                        continue;
                    }
                    ModelViewSerializable masterView = GetViewByName(Context, modelViewForeignKeySerializable.ViewName);
                    if(masterView == null) {
#>
//
//error: for the foreignkey <#= modelViewForeignKeySerializable.NavigationName #> can not find View by name <#= modelViewForeignKeySerializable.ViewName #> in the context
//         no code generated for the given foreign key
//
<#
                        continue;
                    }
                    bool skipItem = false;
                    for(int i = 0; i < modelViewForeignKeySerializable.PrincipalKeyProps.Count; i++) {
                        ModelViewPropertyOfFkSerializable modelViewPropertyOfFkSerializable = 
                            GetScalarPropByPrincipalKeyProp(modelViewForeignKeySerializable, modelViewForeignKeySerializable.PrincipalKeyProps[i]);
                        if(modelViewPropertyOfFkSerializable == null) {
#>
//
//error: for the foreignkey <#= modelViewForeignKeySerializable.NavigationName #> The primary key property <#= modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName #> is not included in the View.
//         no code generated for the given foreign key
//
<#
                            skipItem = true;
                            break;
                        }
                        ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
                            GetScalarPropByOriginalPropertyNameAndForeignKeyNameChain(Model, modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName, null);
                        if ((modelViewPropertyOfVwSerializable == null) && (!modelViewPropertyOfFkSerializable.IsSelected)) {
#>
//
//warning: for the foreignkey <#= modelViewForeignKeySerializable.NavigationName #> The Foreign key property <#= modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName #> is not included in the View.
//         no code generated for the given foreign key
//
<#
                            skipItem = true;
                            break;
                        }
                        ModelViewPropertyOfVwSerializable masterProp = 
                            GetScalarPropByOriginalPropertyNameAndForeignKeyNameChain(masterView, modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName, null);
                        if (masterProp == null) {
#>
//
//warning: for the foreignkey <#= modelViewForeignKeySerializable.NavigationName #> The Foreign key property <#= modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName #> is not included in the View.
//         no code generated for the given foreign key
//
<#
                            skipItem = true;
                            break;
                        }

                    }
                    if (skipItem) {
                        continue;
                    }
                    
                    if (genEls) {
#>
                else if ('<#= modelViewForeignKeySerializable.NavigationName #>'.toLowerCase() === nvgNm) {
<#
                    } else {
#>
                if ('<#= modelViewForeignKeySerializable.NavigationName #>'.toLowerCase() === nvgNm) {
<#
                        genEls = true;
                    }
#>
                    if ( (shft + 2 + <#= modelViewForeignKeySerializable.PrincipalKeyProps.Count  #>) >= len ) {
                        this.onNavError();
                        return;
                    }

<#
                    for(int i = 0; i < modelViewForeignKeySerializable.PrincipalKeyProps.Count; i++) {
                        ModelViewPropertyOfVwSerializable masterProp = 
                            GetScalarPropByOriginalPropertyNameAndForeignKeyNameChain(masterView, modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName, null);
                        ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
                            GetScalarPropByOriginalPropertyNameAndForeignKeyNameChain(Model, modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName, null);                        
                        ModelViewPropertyOfFkSerializable modelViewPropertyOfFkSerializable = 
                            GetScalarPropByPrincipalKeyProp(modelViewForeignKeySerializable, modelViewForeignKeySerializable.PrincipalKeyProps[i]);
                        if(modelViewPropertyOfVwSerializable == null) {
                            modelViewPropertyOfVwSerializable = Model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewPropertyOfFkSerializable.ViewPropertyName).FirstOrDefault();
                        }
                        string masterName = GetTypeScriptPropertyName(masterProp, masterView);
                        string detailName = GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model);
#>
                    hf.push({
                        fltrName: '<#= detailName #>',
                        fltrDataType: '<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>', 
                        fltrOperator: 'eq',
                        fltrValue: url[len  - (shft  + <#= modelViewForeignKeySerializable.PrincipalKeyProps.Count - i #>)].path
                    });
<#
                    }
#>
                }
<#
                } // foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in Model.ForeignKeys) {
            }
#>
                this.<#= HiddenFilterPropName #> = hf;
            }
        }
<#
        } // if (Model.ForeignKeys.Count > 0) {
    } // if (Model.ForeignKeys != null) {
#>
        if (this.<#= EformModePropName #> !== <#= eformModeEnumName #>.AddMode) {
            if(<#= 1+primKeys.Count #> >= len) {
                this.onNavError();
                return;
            }
<#
    for(int i = 0 ; i < primKeys.Count; i++) {
#>
            let <#= GetPrimKeyVarName(primKeys[i]) #>: any = url[len - <#= (1+primKeys.Count) - i #>].path;
<#
    }
#>
            this.<#= formRootService #>.<#= GetOneMethodName #>(<# {int k = 0;
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { if (k > 0)  { #>, <# } 
                                    #><#= GetPrimKeyVarName(primKey) #><#
                                    k++;
                                }} #> )
                .subscribe(
                   (data: <#= GetInterfaceName(Model) #> ) => { // success path
                        if (!(typeof data === 'undefined')) {
                            if (!(data === null)) {
                                this.<#= FormControlModelPropName #> = data;
                            }
                        }
                   },
                   error => { // error path
                        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
                        this.onCancel(); // navigation is correct: onCancel is correct method here
                   } 
                ); // end of .subscribe
        }
    }
    <#= OnAfterSubmitMethodName #>(newVal: <#= GetInterfaceName(Model) #>) {
        let shft: number = 1;
        if (this.<#= EformModePropName #> !== <#= eformModeEnumName #>.AddMode) {
            shft = <#= primKeys.Count + 1 #>;
        }
        let act: string = '<#= ActionParamDeleteMode #>';
        if(this.<#= EformModePropName #> === <#= eformModeEnumName #>.AddMode) {
            act = '<#= ActionParamAddMode #>';
        } else if(this.<#= EformModePropName #> === <#= eformModeEnumName #>.UpdateMode) {
            act = '<#= ActionParamUpdateMode #>';
        }
        let qp: any = {
            <#= ActionParamName #>: act
        };
<#
        if (primKeys.Count > 0) {
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) {
#>
        qp['<#= GetTypeScriptPropertyName(primKey, Model) #>'] = newVal.<#= GetTypeScriptPropertyName(primKey, Model) #>;
<#
            }
        }
#>
        this.router.navigate(['../'.repeat(shft)], {queryParams: qp, relativeTo: this.route});
    }

    onNavError() {
        let msg = {
            message:'Incorrect Url.'
        };
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('Navigation Error', msg)
        let url: UrlSegment[] = this.currSnapshot.url;
        let len: number = url.length;
        let shft: number = 0;
        for (var i = len-1; i > -1; i--) {
            let apth: string = url[i].path;
            if(typeof apth === 'undefined') {
                apth = '';
            }
            if(apth === null) {
                apth = '';
            }
            apth = apth.toLowerCase();
<#
    if (Model.ForeignKeys != null) {
        if (Model.ForeignKeys.Count > 0) {
            foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in Model.ForeignKeys) {
#>
            if ('<#= modelViewForeignKeySerializable.NavigationName #>'.toLowerCase() === apth) {
                break;
            }
<#
            }
        }
    }
#>
            if ('<#= Model.ViewName #>'.toLowerCase() === apth) {
                break;
            }
            shft++;
        }
        if (shft >= len) {
            this.router.navigate(['/']);
        } else {
            this.router.navigate(['../'.repeat(shft)], {relativeTo: this.route});
        }
    }
    onCancel() {
        let shft: number = 1;
        let qp: any = {
            <#= ActionParamName #>: '<#= ActionParamCancelMode #>'
        };
        let url: UrlSegment[] = this.currSnapshot.url;
        let len: number = url.length;
        if (this.<#= EformModePropName #> !== <#= eformModeEnumName #>.AddMode) {
            shft = <#= primKeys.Count + 1 #>;
<#
    for(int i = 0 ; i < primKeys.Count; i++) {
#>
            qp['<#= GetTypeScriptPropertyName(primKeys[i], Model) #>'] = url[len - <#= (1+primKeys.Count) - i #>].path;
<#
    }  
#> 
        }
        this.router.navigate(['../'.repeat(shft)], {queryParams: qp, relativeTo: this.route});
    }
    onOk() {
        if (typeof this.childForm === 'undefined') return;
        if (this.childForm === null) return;
        this.childForm.doSubmit();
    }
}


<#+
    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((model == null) || (prop == null)) {
            return "Noname";
        }
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }

    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }

    string GetInterfaceName(ModelViewSerializable model) {
        if(model == null) {
            return "I";
        }
        return "I"+model.ViewName;
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetCommonEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    ModelViewPropertyOfFkSerializable GetScalarPropByPrincipalKeyProp(ModelViewForeignKeySerializable foreignKey, ModelViewKeyPropertySerializable principalKeyProp) {
        if ((foreignKey == null) || (principalKeyProp == null)) {
            return null;
        }
        if(foreignKey.ScalarProperties == null) {
            return null;
        }
        return foreignKey.ScalarProperties.Where(p => (p.OriginalPropertyName == principalKeyProp.OriginalPropertyName) && (p.ForeignKeyNameChain == foreignKey.NavigationName)).FirstOrDefault();
    }
    ModelViewSerializable GetViewByName(DbContextSerializable context, string ViewName) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
    }
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginalPropertyNameAndForeignKeyNameChain(ModelViewSerializable model, string originalPropertyName, string foreignKeyNameChain) {
        if ( (model == null) || (string.IsNullOrEmpty(originalPropertyName)) ) {
            return null;
        }
        if(string.IsNullOrEmpty(foreignKeyNameChain)) {
            return model.ScalarProperties.Where(p => (p.OriginalPropertyName == originalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain))).FirstOrDefault();
        } else {
            return model.ScalarProperties.Where(p => (p.OriginalPropertyName == originalPropertyName) && (p.ForeignKeyNameChain==foreignKeyNameChain)).FirstOrDefault();
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    
#>
