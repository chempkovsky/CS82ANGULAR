<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>

<#
    bool localize = Context.Localize;

    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";
    string AppSettingServicePropName        = "appGlblSettings";
    string GetOneByMethodNamePrefix         = "getoneby";
    string src2destMethodName               = "src2dest";
    string formRootService                  = "frmRootSrv";


    string ShowErrorMethodName                  = "showError";
    string CurrentViewNameFieldName             = "CurrentViewName";
    string ClientViewNameFieldName              = "ClientViewName";
    string DirectNavigationFieldName            = "DirectNavigation";
    string IsTopDetailFieldName                 = "IsTopDetail";
    string IsDefinedFieldName                   = "IsDefined";
    string CalcIsDefinedMethodName              = "calcIsDefined";
    string RefreshIsDefinedMethodName           = "refreshIsDefined";
    string ClientToMasterFieldsMapFieldName     = "c2mfm";

    string MasterToClientKeyFieldsMapFieldName  = "m2cKeyfm";
    string MasterToClientFieldsMapFieldName     = "m2cfm";

    string OnDetailChangedPropName              = "OnDetailChanged";
    string OnDetailHFChangedPropName            = "OnDetailHFChanged";
    string OnMasterChangedPropName              = "OnMasterChanged";
    string AfterMasterChangedPropName           = "AfterMasterChanged";
    string AfterPropsChangedPropName            = "AfterPropsChanged";
    string OnIsDefinedChangedPropName           = "OnIsDefinedChanged";
    string OnUpdatePropName                     = "OnUpdate";
    string OnAddPropName                        = "OnAdd";
    string OnDeletePropName                     = "OnDelete";
    string submitOnDetailChangedMethodName      = "submitOnDetailChanged";
    string submitOnDetailHFChangedMethodName    = "submitOnDetailHFChanged";
    string submitOnMasterChangedMethodName      = "submitOnMasterChanged";
    string LengthSuffix                         = "Length";
    string KeysSuffix                           = "Keys";
    string ValueSuffix                          = "Value";
    string ValuesSuffix                         = "Values";
    string ClearMethodName                      = "clear";
    string ClearPartiallyMethodName             = "clearPartially";
    string Interface2ValuesMethodName           = "interface2Values";
    string Values2InterfaceMethodName           = "values2Interface";
    string CurrDirectMasterNavsFieldName        = "CurrentlyDirectMasterNavs";
    string HiddenFilterFieldName                = "HiddenFilter";
    string HiddenFilterByFltRsltSuffix          = "HiddenFilterByFltRslt";
    string HiddenFilterByUndHFSuffix            = "HiddenFilterByUndHF";
    string HiddenFilterAsFltRsltSuffix          = "HiddenFilterAsFltRslt";
    string GetCllctByCurrDirMstrsMethodName     = "getCllctionByCurrDirMstrs";
    string GetCllctByFldFilterMethodName        = "getCllctionByFldFilter";
    string GetFilterByCurrDirMstrsMethodName    = "getFilterByCurrDirMstrs";
    string GetWSFltrRsltByCurrDirMstrsMethodName= "getWSFltrRsltByCurrDirMstrs";
    string IsSetFilterByCurrDirMstrsMethodName  = "isSetFilterByCurrDirMstrs";
    string UnderHiddenFilterFieldsFieldName     = "UnderHiddenFilterFields";
    string UpdateByHiddenFilterFieldsMethodName = "updateByHiddenFilterFields";
    string IsNewSuffix                          = "IsNew";
    string UIFormChainFieldName                 = "UIFormChain";
    string DoEmitEventMethodName                = "doEmitEvent";
    string RefreshMethodName                    = "refresh";
    string HiddenFilterByRowSuffix              = "HiddenFilterByRow";
    string ClearIgnorFlds                       = "clearIgnorFlds";

    string viewDatasourceClassFolder                = "01418-Datasource.class.ts";
    string viewDatasourceClassName                  = GetJavaScriptClassName(Model, viewDatasourceClassFolder);

    string appSettingServiceFolder                  = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName               = GetCommonServiceClassNameWithAnglr(AngularJsonFile, Model, Context, appSettingServiceFolder, viewDatasourceClassFolder);

    string filterResultModelFolder                  = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName               = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, filterResultModelFolder, viewDatasourceClassFolder);



    string viewModelDatasourceInterfaceFolder       = "00600-view-model-datasource.interface.ts";
    string viewModelDatasourceInterfaceClassName    = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, viewModelDatasourceInterfaceFolder, viewDatasourceClassFolder);

    string viewInterfaceFolder                      = "01100-.interface.ts";
    string viewInterfaceName                        = GetInterfaceNameWithAnglr(AngularJsonFile, Model, viewInterfaceFolder, viewDatasourceClassFolder);

    string viewInterfacePageFolder                  = "01200-Page.interface.ts";
    string viewInterfacePageName                    = GetInterfacePageNameWithAnglr(AngularJsonFile, Model, viewInterfacePageFolder, viewDatasourceClassFolder);

    string viewInterfaceFltFolder                   = "01300-Filter.interface.ts";
    string viewInterfaceFilterName                  = GetInterfaceFilterNameWithAnglr(AngularJsonFile, Model, viewInterfaceFltFolder, viewDatasourceClassFolder);

    string viewServiceFolder                        = "01400-.service.ts";
    string serviceClassName                         = GetServiceClassNameWithAnglr(AngularJsonFile, Model, viewServiceFolder, viewDatasourceClassFolder);
    
    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        
        GetModelUniqueKeys(Model, uniqueKeys);
    } 

#>
import { EventEmitter } from "@angular/core";
import { catchError, Observable, switchMap } from "rxjs";
import { of } from 'rxjs/internal/observable/of';

import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  appSettingServiceFolder, viewDatasourceClassFolder) #>';
import { <#= viewModelDatasourceInterfaceClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  viewModelDatasourceInterfaceFolder, viewDatasourceClassFolder) #>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  filterResultModelFolder, viewDatasourceClassFolder) #>';

import { <#= viewInterfaceName #> } from '<#=  GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, viewDatasourceClassFolder, Context, Model.ViewName, viewInterfaceFolder) #>';
import { <#= viewInterfacePageName #> } from '<#=  GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, viewDatasourceClassFolder, Context, Model.ViewName, viewInterfacePageFolder) #>';
import { <#= viewInterfaceFilterName #> } from '<#=  GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, viewDatasourceClassFolder, Context, Model.ViewName, viewInterfaceFltFolder) #>';
import { <#= serviceClassName #> } from '<#=  GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, viewDatasourceClassFolder, Context, Model.ViewName, viewServiceFolder) #>';

export class <#= viewDatasourceClassName #> implements <#= viewModelDatasourceInterfaceClassName #> {
    protected readonly _<#= CurrentViewNameFieldName #>: string  = '<#= Model.ViewName #>';
    protected readonly _<#= ClientViewNameFieldName #>: string | any;
    protected readonly _<#= DirectNavigationFieldName #>: string | any;
    protected _<#= IsDefinedFieldName #>: boolean = false;
    // master name, navigation names
    protected _<#= CurrDirectMasterNavsFieldName #>: string[];
    protected _<#= ClearIgnorFlds #>: string[];
    // master name, navigation name, master filed, master filed value
    protected _<#= HiddenFilterFieldName #>: {[key: string]: {[key: string]: {[key: string]: any}}} | any = {};
    protected _<#= UnderHiddenFilterFieldsFieldName #>: string[] = [];
    protected _<#= IsNewSuffix #>: boolean = true;
    protected _<#= UIFormChainFieldName #>: string = '';
    protected _<#= ValuesSuffix #>: {[key: string]: any} = {
<#
    if (Model.ScalarProperties != null) {
        List<ModelViewPropertyOfVwSerializable> primKeyProps = GetModelPrimaryKeyProps(Model);
        foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
            string defVal = IsBooleanTypeName(prop) ? "false" : "undefined";
#>
       "<#= GetTypeScriptPropertyName(prop, Model) #>": <#= defVal #> ,  //  <#= GetPropertyTypeName(prop) #>
<#

        }
    }
#>
    };

    constructor(private <#= formRootService #>: <#= serviceClassName #>, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>,
                <#= ClientViewNameFieldName #>: string | null | undefined, 
                <#= DirectNavigationFieldName #>: string | any,
                <#= CurrDirectMasterNavsFieldName #>: string[],
                <#= UIFormChainFieldName #>: string,
                <#= ClearIgnorFlds #>: string[]) {
        this._<#= ClientViewNameFieldName #> = <#= ClientViewNameFieldName #>;
        this._<#= DirectNavigationFieldName #> = <#= DirectNavigationFieldName #>;
        this._<#= CurrDirectMasterNavsFieldName #> = <#= CurrDirectMasterNavsFieldName #>;
        this._<#= UIFormChainFieldName #> = <#= UIFormChainFieldName #>;
        this._<#= ClearIgnorFlds #> = <#= ClearIgnorFlds #>;
    }

    public <#= OnDetailChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= OnMasterChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= OnDetailHFChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= AfterMasterChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= AfterPropsChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    
    public <#= OnIsDefinedChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= OnUpdatePropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= OnAddPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();
    public <#= OnDeletePropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>> = new EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>();

    public <#= DoEmitEventMethodName #>(aftrMstrChngd: boolean = false): void {
        let isDef: boolean = this.<#= CalcIsDefinedMethodName #>();
        if(this._<#= IsDefinedFieldName #> !== isDef) {
            this._<#= IsDefinedFieldName #> = isDef;
            this.<#= OnIsDefinedChangedPropName #>.emit(this);
        }
        this.<#= OnDetailChangedPropName #>.emit(this);
        this.<#= OnMasterChangedPropName #>.emit(this);
        if(aftrMstrChngd) this.<#= AfterMasterChangedPropName #>.emit(this);
        this.<#= AfterPropsChangedPropName #>.emit(this);
    }
    public get<#= HiddenFilterByRowSuffix #>(rw: <#= viewInterfaceName #>|any, nvNm: string|any): {[key: string]: {[key: string]: {[key: string]: any}}} {
        return this.<#= formRootService #>.get<#= HiddenFilterByRowSuffix #>(rw, nvNm);
    }

    public get<#= HiddenFilterByFltRsltSuffix #>(fr:  Array<<#= filterResultModelClassName #>> | any): {[key: string]: {[key: string]: {[key: string]: any}}} {
        return this.<#= formRootService #>.get<#= HiddenFilterByFltRsltSuffix #>(fr);
    }
    public get<#= HiddenFilterByUndHFSuffix #>(): Array<<#= filterResultModelClassName #>> {
        let rslt: Array<<#= filterResultModelClassName #>> = [];
        this._<#= UnderHiddenFilterFieldsFieldName #>.forEach((fnm) => {
            if (this.isSet<#= ValueSuffix #>(fnm)) {
                rslt.push({
                    fltrName: fnm,
                    fltrDataType: this.getDtTp<#= ValueSuffix #>(fnm),
                    fltrOperator: 'eq',
                    fltrValue: this.get<#= ValueSuffix #>(fnm)
                });
            }
        });
        return rslt;
    }
    public <#= RefreshIsDefinedMethodName #>(): boolean {
        this._<#= IsDefinedFieldName #> = this.<#= CalcIsDefinedMethodName #>();
        return this._<#= IsDefinedFieldName #>;
    }
    public <#= CalcIsDefinedMethodName #>(): boolean {
        for(let i in this._Values) {
            if((!this.<#= formRootService #>.dbgenerated<#= ValueSuffix #>(i)) && 
                this.<#= formRootService #>.required<#= ValueSuffix #>(i)) {
                if(!this.isSet<#= ValueSuffix #>(i)) return false;        
            }
        }
        return true;
    }
    public get<#= UIFormChainFieldName #>(): string {
        return this._<#= UIFormChainFieldName #>;
    }
    public get<#= HiddenFilterFieldName #>(): {[key: string]: {[key: string]: {[key: string]: any}}} {
        return this._<#= HiddenFilterFieldName #>;
    }
    public get<#= HiddenFilterAsFltRsltSuffix #>(): Array<<#= filterResultModelClassName #>> {
        return this.<#= formRootService #>.get<#= HiddenFilterAsFltRsltSuffix #>(this._<#= HiddenFilterFieldName #>);
    }
    public set<#= HiddenFilterFieldName #>(fltr: {[key: string]: {[key: string]: {[key: string]: any}}}): void {
        this._<#= HiddenFilterFieldName #> = fltr;
        this.set<#= UnderHiddenFilterFieldsFieldName #>();
    }
    public get<#= IsTopDetailFieldName #>(): boolean {
        return this._<#= UIFormChainFieldName #> === '';
    }
    public get<#= IsDefinedFieldName #>(): boolean {
        return this._<#= IsDefinedFieldName #>;
    }
    public get<#= CurrentViewNameFieldName #>(): string {
        return this._<#= CurrentViewNameFieldName #>;
    }
    public get<#= ClientViewNameFieldName #>(): string | any {
        return this._<#= ClientViewNameFieldName #>;
    }
    public get<#= DirectNavigationFieldName #>(): string|any {
        return this._<#= DirectNavigationFieldName #>;
    }
    public get<#= LengthSuffix #>(): number {
        return this.<#= formRootService #>.get<#= LengthSuffix #>();
    }
    public get<#= KeysSuffix #>(): string[] {
        return this.<#= formRootService #>.get<#= KeysSuffix #>();
    }
    public getDtTp<#= ValueSuffix #>(key: string): string {
        return this.<#= formRootService #>.getDtTp<#= ValueSuffix #>(key);
    }
    public get<#= ValueSuffix #>(key: string): any {
        return this._<#= ValuesSuffix #>[key];
    }
    public set<#= ValueSuffix #>(key: string, value: any): void {
        if( this.<#= formRootService #>.getDtTp<#= ValueSuffix #>(key) === 'boolean' ) {
            if(typeof value === 'undefined') { this._<#= ValuesSuffix #>[key] = false; } else { this._<#= ValuesSuffix #>[key] = value; }
        } else {
            return this._<#= ValuesSuffix #>[key] = value;
        }
    }
    public getByOrg<#= ValueSuffix #>(org: string, fkchain: string): any {
        let i: string|any = this.<#= formRootService #>.getKeyByOrg<#= ValueSuffix #>(org, fkchain);
        if(typeof i === 'undefined') return undefined;
        return this._Values[i];
    }
    public setByOrg<#= ValueSuffix #>(org: string, fkchain: string, value: any): void {
        let i: string|any = this.<#= formRootService #>.getKeyByOrg<#= ValueSuffix #>(org, fkchain);
        if(!(typeof i === 'undefined')) this._<#= ValuesSuffix #>[i] = value; 
    }
    public required<#= ValueSuffix #>(key: string): boolean {
        return this.<#= formRootService #>.required<#= ValueSuffix #>(key);
    }
    public dbgenerated<#= ValueSuffix #>(key: string): boolean {
        return this.<#= formRootService #>.dbgenerated<#= ValueSuffix #>(key);
    }
    public isInPrimkey<#= ValueSuffix #>(key: string): boolean {
        return this.<#= formRootService #>.isInPrimkey<#= ValueSuffix #>(key);
    }
    public isSet<#= ValueSuffix #>(key: string): boolean {
        let v: any = this._<#= ValuesSuffix #>[key];
        if(typeof v === 'undefined') return false;
        if (this.required<#= ValueSuffix #>(key) && (v === null)) return false;
        return true;
    }
    public clear<#= ValueSuffix #>(key: string): void {
        if( this.<#= formRootService #>.getDtTp<#= ValueSuffix #>(key) === 'boolean' ) {
            this._<#= ValuesSuffix #>[key] = false;
        } else {
            this._<#= ValuesSuffix #>[key] = undefined;
        }
    }
    public <#= ClearMethodName #>(doNotify: boolean = true): boolean {
        let hasChanged: boolean = false;
        for(let i in this._<#= ValuesSuffix #>) {
            if (!this._<#= ClearIgnorFlds #>.includes(i)) {
                if( this.<#= formRootService #>.getDtTp<#= ValueSuffix #>(i) === 'boolean' ) {
                    if (this._<#= ValuesSuffix #>[i] !== false) hasChanged = true;
                    this._<#= ValuesSuffix #>[i] = false;
                } else {
                    if (typeof this._<#= ValuesSuffix #>[i] !== 'undefined') hasChanged = true;
                    this._<#= ValuesSuffix #>[i] = undefined;
                }
            }
        }
        if(!hasChanged) return hasChanged;
        if(doNotify) this.<#= DoEmitEventMethodName #>(true);
        return hasChanged;
    }

    public isEqual(src: any, dest: any): boolean {
        if (typeof src === 'undefined') {
            return typeof dest === 'undefined';
        }
        if (typeof dest === 'undefined') {
            return false;
        }
        if (src === null) {
            return dest === null;
        }
        if(dest === null) {
            return false;
        }
        return src === dest;
    }
    public <#= Interface2ValuesMethodName #>(data: <#= viewInterfaceName #> | null, doNotify: boolean = true): boolean {
        if(typeof data === 'undefined') {
            return this.<#= ClearMethodName #>(doNotify);
        }
        if(data === null) {
            return this.<#= ClearMethodName #>(doNotify);
        }
        let hasChanged: boolean = false;
        let aftrMstrChngd: boolean = false;
<#
        if (Model.ScalarProperties != null) {
            foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
                string nvName = "";
                if(string.IsNullOrEmpty(prop.ForeignKeyName)) {
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if (fk.ForeignKeyProps.Any(p => p.OriginalPropertyName == prop.OriginalPropertyName)) {
                                nvName = fk.NavigationName;
                                break;
                            }
                        }
                    }
                } else {
                    if ((Model.ForeignKeys != null) && (prop.ForeignKeyName == prop.ForeignKeyNameChain)) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if (fk.PrincipalKeyProps.Any(p => p.OriginalPropertyName == prop.OriginalPropertyName)) {
                                nvName = fk.NavigationName;
                                break;
                            }
                        }
                    }
                }
                if(string.IsNullOrEmpty(nvName)) {
#>
        if(!this.isEqual(this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>'), data.<#= GetTypeScriptPropertyName(prop, Model) #>)) {
            this.set<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>', data.<#= GetTypeScriptPropertyName(prop, Model) #>);
            hasChanged = true;
        }
<#
                } else {
#>
        if(!this.isEqual(this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>'), data.<#= GetTypeScriptPropertyName(prop, Model) #>)) {
            this.set<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>', data.<#= GetTypeScriptPropertyName(prop, Model) #>);
            aftrMstrChngd = (this._<#= CurrDirectMasterNavsFieldName #>.indexOf('<#= nvName #>') >= 0) || aftrMstrChngd;
            hasChanged = true;
        }
<#
                }
            }
        }
#>
        if(!hasChanged) return hasChanged;
        if(doNotify) this.<#= DoEmitEventMethodName #>(aftrMstrChngd);
        return hasChanged;
    }
    public <#= Values2InterfaceMethodName #>(): <#= viewInterfaceName #> | any {
        return {
<#
        if (Model.ScalarProperties != null) {
            foreach (ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) { 
#>
                <#= GetTypeScriptPropertyName(prop, Model) #>: this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>'),
<#
            }
        }
#>
        };
    }

    public <#= submitOnDetailChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void {
        if ((typeof this._<#= ClientViewNameFieldName #> === 'undefined') || (typeof this._<#= DirectNavigationFieldName #> === 'undefined')) return;
        if ((this._<#= ClientViewNameFieldName #> === null) || (this._<#= DirectNavigationFieldName #> === null)) return;
        if(v.get<#= CurrentViewNameFieldName #>() !== this._<#= ClientViewNameFieldName #>) return;
        let clntNtChngd = true;
        let <#= ClientToMasterFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = this.<#= formRootService #>.get<#= ClientToMasterFieldsMapFieldName #>();
        if( Object.keys(<#= ClientToMasterFieldsMapFieldName #>).indexOf(this._<#= ClientViewNameFieldName #>) > -1) {
            if( Object.keys(<#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>]).indexOf(this._<#= DirectNavigationFieldName #>) > -1) {
                for(let i in <#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>][this._<#= DirectNavigationFieldName #>]) {
                    let src: any = v.get<#= ValueSuffix #>(i);
                    let dst: any = this.get<#= ValueSuffix #>(<#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>][this._<#= DirectNavigationFieldName #>][i]);
                    if (this.isEqual(src, dst)) continue;
                    clntNtChngd = false;
                    this.set<#= ValueSuffix #>(<#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>][this._<#= DirectNavigationFieldName #>][i], src);
                }
            }
        }
        if (clntNtChngd) return;
<#
        {
            List<string> errors = new List<string>();
            if (Model.IsWebApiSelectOneByPrimarykey) { 
                List<ModelViewSerializable> clVms = CollectClientToMasterFieldsMapModelViews(Model, Context, errors);
                foreach(string error in  errors) {
#>
<#= error #>
<#
                }
                bool isFirstClnt = true;

                if(clVms != null) {
                    foreach(ModelViewSerializable clVm in clVms) {
                        errors.Clear();
                        List<ModelViewForeignKeySerializable> mlFks = CollectMasterToClientFieldsMapForMasterView(clVm, Model.ViewName, errors);
                        foreach(string error in  errors) {
#>
<#= error #>
<#
                        }
                        if (mlFks != null) {
                            if (isFirstClnt) {
                                isFirstClnt = false;
#>
        if (this._<#= ClientViewNameFieldName #> === '<#= clVm.ViewName #>') {
<#
                            } else {
#>
        else if (this._<#= ClientViewNameFieldName #> === '<#= clVm.ViewName #>') {
<#
                            }
                            bool ismlFk = true;
                            foreach(ModelViewForeignKeySerializable mlFk in mlFks) {
                                if (ismlFk) {
                                    ismlFk = false;
#>
            if (this._<#= DirectNavigationFieldName #> === '<#= mlFk.NavigationName #>') {
<#
                                } else {
#>
            else if (this._<#= DirectNavigationFieldName #> === '<#= mlFk.NavigationName #>') {
<#
                                }
                                ModelViewUniqueKeyOfVwSerializable mvuk = GetIndexByEntityProps(uniqueKeys, mlFk.PrincipalKeyProps, Model);
                                if(mvuk == null) {
#>
//
// Error: For the detail = '<#= clVm.ViewName #>', master = '<#= Model.ViewName #>' and navigation name = '<#= mlFk.NavigationName #>'
//        Could not find unique or primary index in the '<#= Model.ViewName #>' to be used as a Principal Key
//        
<#
                                } else {
#>
                let isKeyCrrct = true;
                let dtFrTst: any;
<# 
                                    foreach(ModelViewPropertyOfVwSerializable prop in mvuk.UniqueKeyProperties) {
                                        if(prop.IsRequiredInView) {
#>
                if(isKeyCrrct) {
                    dtFrTst = this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>');
                    if(typeof dtFrTst === 'undefined') { 
                        isKeyCrrct = false;
                    } else if (dtFrTst === null) {
                        isKeyCrrct = false;
                    }
                }
<#
                                        }
                                    }


                                    string localRouteName = GetOneMethodName;
                                    if (!mvuk.IsPrimary) {
                    
                                        localRouteName = GetOneByMethodNamePrefix + mvuk.UniqueKeyName;
                                    }
#>
                if(isKeyCrrct) {
                    this.<#= formRootService #>.<#= localRouteName #>(
<#
                                    {
                                        int counter = 0;
                                        foreach(ModelViewPropertyOfVwSerializable prop in mvuk.UniqueKeyProperties) {
                                            if(counter > 0) { 
#>
                    ,this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                                            } else {
#>
                    this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                                                counter++;
                                            }
                                        }
                                    }
#>
                    ).subscribe({
                        next: (data: <#= viewInterfaceName #> ) => {
                            this.<#= Interface2ValuesMethodName #>(data, true);
                        },
                        error: (error) => { // error path
                            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
                            this.<#= ClearMethodName #>(true);
                        }
                    });
                } else {
                    this.<#= ClearMethodName #>(true);
                }
<#
                                }
#>
            }
<#
                            }
#>
        }
<#
                        }
                    }
                }
            }
        }
#>
    }


    public <#= submitOnDetailHFChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void {
        if ((typeof this._<#= ClientViewNameFieldName #> === 'undefined') || (typeof this._<#= DirectNavigationFieldName #> === 'undefined')) return;
        if ((this._<#= ClientViewNameFieldName #> === null) || (this._<#= DirectNavigationFieldName #> === null)) return;
        if(v.get<#= CurrentViewNameFieldName #>() !== this._<#= ClientViewNameFieldName #>) return;
        this._<#= UnderHiddenFilterFieldsFieldName #> = [];
        let <#= ClientToMasterFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = this.<#= formRootService #>.get<#= ClientToMasterFieldsMapFieldName #>();
        if( Object.keys(<#= ClientToMasterFieldsMapFieldName #>).indexOf(this._<#= ClientViewNameFieldName #>) > -1) {
            if( Object.keys(<#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>]).indexOf(this._<#= DirectNavigationFieldName #>) > -1) {
                for(let i in <#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>][this._<#= DirectNavigationFieldName #>]) {
                    if(v.is<#= UnderHiddenFilterFieldsFieldName #>(i)) {
                        let fldNm: string = <#= ClientToMasterFieldsMapFieldName #>[this._<#= ClientViewNameFieldName #>][this._<#= DirectNavigationFieldName #>][i];
                        if(!this._<#= UnderHiddenFilterFieldsFieldName #>.includes(fldNm)) {
                            this._<#= UnderHiddenFilterFieldsFieldName #>.push(fldNm);
                        }
                    }
                }
            }
        }
        this.<#= OnDetailHFChangedPropName #>.emit(this);
    }


    public <#= ClearPartiallyMethodName #>(doNotify: boolean): boolean {
        let hasChanged: boolean = false;
<#
    {
        foreach (ModelViewPropertyOfVwSerializable sclrProp in Model.ScalarProperties) { 
                if(string.IsNullOrEmpty(sclrProp.ForeignKeyName)) {
                    bool codenotadded =true;
                    if (Model.ForeignKeys != null) {
                        foreach(ModelViewForeignKeySerializable fk in Model.ForeignKeys) {
                            if (fk.ForeignKeyProps.Any(p => p.OriginalPropertyName == sclrProp.OriginalPropertyName)) {
                                codenotadded = false;
#>
        if(!this.is<#= UnderHiddenFilterFieldsFieldName #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) {
            if(this._<#= CurrDirectMasterNavsFieldName #>.indexOf('<#= fk.NavigationName #>') < 0) {
                if(this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) {
                    this.clear<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>');
                    hasChanged = true;
                }
            }
        }
<#
                            }
                        }
                    }
                    if(codenotadded) {
#>
        if(!this.is<#= UnderHiddenFilterFieldsFieldName #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) {
            if(this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) {
                this.clear<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>');
                hasChanged = true;
            }
        }
<#
                    }
                } else {
#>
        if(!this.is<#= UnderHiddenFilterFieldsFieldName #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) {
            if(this._<#= CurrDirectMasterNavsFieldName #>.indexOf(this.<#= formRootService #>.getFk<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) < 0) {
                if(this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>')) {
                    this.clear<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(sclrProp, Model) #>');
                    hasChanged = true;
                }
            }
        }
<#
                }
        }
    }

#>
        if(!hasChanged) return hasChanged;
        if(doNotify) this.<#= DoEmitEventMethodName #>(false);
        return hasChanged;
    }

    public <#= submitOnMasterChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void {
        let masterDirNav: string | any = v.get<#= DirectNavigationFieldName #>();
        let masterClnt: string | any = v.get<#= ClientViewNameFieldName #>();
        if ((typeof masterDirNav === 'undefined') || (typeof masterClnt == 'undefined')) return;
        if ((masterDirNav === null) || (masterClnt === null)) return;
        if (masterClnt !== this.get<#= CurrentViewNameFieldName #>()) return;
        let clntNtChngd = true;
        let masterVw: string | any = v.getCurrentViewName();
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.<#= formRootService #>.get<#= MasterToClientKeyFieldsMapFieldName #>();
        let <#= MasterToClientFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = this.<#= formRootService #>.get<#= MasterToClientFieldsMapFieldName #>();
        if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>).indexOf(masterVw) > -1) {
            if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>[masterVw]).indexOf(masterDirNav) > -1) {
                for(let i in <#= MasterToClientKeyFieldsMapFieldName #>[masterVw][masterDirNav]) {
                    let src: any = v.get<#= ValueSuffix #>(i);
                    let dst: any = this.get<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[masterVw][masterDirNav][i].propNm);
                    if (this.isEqual(src, dst)) continue;
                    clntNtChngd = false;
                    this.set<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[masterVw][masterDirNav][i].propNm, src);
                }
            }
        }
        if( Object.keys(<#= MasterToClientFieldsMapFieldName #>).indexOf(masterVw) > -1) {
            if( Object.keys(<#= MasterToClientFieldsMapFieldName #>[masterVw]).indexOf(masterDirNav) > -1) {
                for(let i in <#= MasterToClientFieldsMapFieldName #>[masterVw][masterDirNav]) {
                    let src: any = v.get<#= ValueSuffix #>(i);
                    if (this.isEqual(src, this.get<#= ValueSuffix #>(<#= MasterToClientFieldsMapFieldName #>[masterVw][masterDirNav][i]))) continue;
                    clntNtChngd = false;
                    this.set<#= ValueSuffix #>(<#= MasterToClientFieldsMapFieldName #>[masterVw][masterDirNav][i], src);
                }
            }
        }
        if (clntNtChngd) return;
        // clear primary and unique key props of the current ViewModel. Eliminate those associated with the current direct master props.
        if(!this.get<#= IsTopDetailFieldName #>()) {
            this.<#= ClearPartiallyMethodName #>(false);
        }
        this.<#= DoEmitEventMethodName #>(true);
    }
    
    public <#= IsSetFilterByCurrDirMstrsMethodName #>(): boolean {
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.<#= formRootService #>.get<#= MasterToClientKeyFieldsMapFieldName #>();
        for(let i in <#= MasterToClientKeyFieldsMapFieldName #>) {
            for(let j in <#= MasterToClientKeyFieldsMapFieldName #>[i]) {
                if(this._<#= CurrDirectMasterNavsFieldName #>.indexOf(j) > -1) {
                    for(let k in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                        if (<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].isMstrReq && (!this.isSet<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm))) return false; 
                    }
                }
            }
        }
        return true;
    }
    public <#= GetWSFltrRsltByCurrDirMstrsMethodName #>(): Array<<#= filterResultModelClassName #>> {
        let rslt: Array<<#= filterResultModelClassName #>> = [];
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.<#= formRootService #>.get<#= MasterToClientKeyFieldsMapFieldName #>();
        for(let i in <#= MasterToClientKeyFieldsMapFieldName #>) {
            for(let j in <#= MasterToClientKeyFieldsMapFieldName #>[i]) {
                if(this._<#= CurrDirectMasterNavsFieldName #>.indexOf(j) > -1) {
                    for(let k in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                        if (this.isSet<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm)) {
                            rslt.push({
                                fltrName: <#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm,
                                fltrDataType: this.getDtTp<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm),
                                fltrOperator: 'eq',
                                fltrValue: this.get<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm)
                            });
                        }
                    }
                }
            }
        }
        this._<#= UnderHiddenFilterFieldsFieldName #>.forEach((fnm) => {
            let fr = rslt.find(itm => itm.fltrName === fnm);
            if(typeof fr === 'undefined') {
                if (this.isSet<#= ValueSuffix #>(fnm)) {
                    rslt.push({
                        fltrName: fnm,
                        fltrDataType: this.getDtTp<#= ValueSuffix #>(fnm),
                        fltrOperator: 'eq',
                        fltrValue: this.get<#= ValueSuffix #>(fnm)
                    });
                }
            }
        });
        return rslt;
    }
    protected <#= GetFilterByCurrDirMstrsMethodName #>(): <#=  viewInterfaceFilterName #> {
        let flt: <#=  viewInterfaceFilterName #> | any = {}; // <#=  viewInterfaceFilterName #>
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.<#= formRootService #>.get<#= MasterToClientKeyFieldsMapFieldName #>();
        for(let i in <#= MasterToClientKeyFieldsMapFieldName #>) {
            for(let j in <#= MasterToClientKeyFieldsMapFieldName #>[i]) {
                if(this._<#= CurrDirectMasterNavsFieldName #>.indexOf(j) > -1) {
                    for(let k in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                        if (this.isSet<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm)) {
                            let nm: string = <#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm;
                            let op: string = nm + '<#= OperatorSufix #>';
                            if (typeof flt[nm as keyof <#=  viewInterfaceFilterName #>] === 'undefined') { 
                                flt[nm as keyof <#=  viewInterfaceFilterName #>] = [this.get<#= ValueSuffix #>(nm)]; 
                                flt[op as keyof <#=  viewInterfaceFilterName #>] = ['<#= EqualOperator #>'];
                            } else { 
                                flt[nm as keyof <#=  viewInterfaceFilterName #>].push(this.get<#= ValueSuffix #>(nm)); 
                                flt[op as keyof <#=  viewInterfaceFilterName #>].push('<#= EqualOperator #>');
                            }
                        }
                    }
                }
            }
        }
        this._<#= UnderHiddenFilterFieldsFieldName #>.forEach((nmx) => {
            let opx: string = nmx + '<#= OperatorSufix #>';
            // if (this.isSet<#= ValueSuffix #>(nmx)) {
                if (typeof flt[nmx as keyof <#=  viewInterfaceFilterName #>] === 'undefined') { 
                    flt[nmx as keyof <#=  viewInterfaceFilterName #>] = [this.get<#= ValueSuffix #>(nmx)]; 
                    flt[opx as keyof <#=  viewInterfaceFilterName #>] = ['<#= EqualOperator #>'];
                } else { 
                    flt[nmx as keyof <#=  viewInterfaceFilterName #>].push(this.get<#= ValueSuffix #>(nmx)); 
                    flt[opx as keyof <#=  viewInterfaceFilterName #>].push('<#= EqualOperator #>');
                }
            // }
        });
        return flt;
    }
    private handleError<T> (result?: T) {
        return (error: any): Observable<T> => {
          this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
          return of(result as T);
        };
    }
    // add input string to define flt.orderby prop
    public <#= GetCllctByCurrDirMstrsMethodName #>(): Observable<Array<<#= viewInterfaceName #>>> {
<#
        if (Model.IsWebApiSelectManyWithPagination) {
#>
        if (!this.<#= IsSetFilterByCurrDirMstrsMethodName #>()) {
            return of([]);
        }
        let flt: <#=  viewInterfaceFilterName #> | any =  this.<#= GetFilterByCurrDirMstrsMethodName #>();
        return this.<#= formRootService #>.<#= GetWithFilterMethodName #>(flt)
                .pipe(
                    switchMap((rslt: <#= viewInterfacePageName #>) => {
                        if (!(typeof rslt === 'undefined')) {
                           if (!(rslt === null)) {
                                if (!(typeof rslt.items === 'undefined')) {
                                    if (Array.isArray( rslt.items )) {
                                        return of(rslt.items);
                                    }
                                }
                            }
                        }
                        return of([]);
                     }),
                     catchError(this.handleError<Array<<#= viewInterfaceName #>>>([]))
                );
<#
        } else {
#>
            return of([]);
<#
        }
#>
    }
    public <#= GetCllctByFldFilterMethodName #>(fldName: string|any, fldVal: any): Observable<Array<<#= viewInterfaceName #>>> {
<#
        if (Model.IsWebApiSelectManyWithPagination) {
#>
        let isUndef: boolean = (typeof fldName === 'undefined') || (typeof fldVal === 'undefined');
        isUndef = isUndef ? isUndef : (fldVal === null);
        if(isUndef) {
            return this.<#= GetCllctByCurrDirMstrsMethodName #>();
        }
        if (!this.<#= IsSetFilterByCurrDirMstrsMethodName #>()) {
            return of([]);
        }
        let flt: <#=  viewInterfaceFilterName #> | any =  this.<#= GetFilterByCurrDirMstrsMethodName #>();
        if(typeof flt[fldName] === 'undefined') {
            flt[fldName] = [fldVal];
        } else {
            flt[fldName].push(fldVal);
        }
        if(typeof flt[fldName + '<#= OperatorSufix #>'] === 'undefined') {
            flt[fldName + '<#= OperatorSufix #>'] = ['lk'];
        } else {
            flt[fldName + '<#= OperatorSufix #>'].push('lk');
        }
        flt.orderby = fldName;
        return this.<#= formRootService #>.<#= GetWithFilterMethodName #>(flt)
                .pipe(
                    switchMap((rslt: <#= viewInterfacePageName #>) => {
                        if (!(typeof rslt === 'undefined')) {
                           if (!(rslt === null)) {
                                if (!(typeof rslt.items === 'undefined')) {
                                    if (Array.isArray( rslt.items )) {
                                        return of(rslt.items);
                                    }
                                }
                            }
                        }
                        return of([]);
                     }),
                     catchError(this.handleError<Array<<#= viewInterfaceName #>>>([]))
                );
<#
        } else {
#>
            return of([]);
<#
        }
#>
    }
<#
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {
#>

//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>
    public <#= localRouteName #>(
<# 
                {
                    int counter = 0;
                    foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                        if(counter > 0) { 
#>
                , <#= GetTypeScriptPropertyName(prop, Model) #>: <#= GetPropertyTypeScriptTypeName(prop) #> 
<#
                        } else {
#>
                  <#= GetTypeScriptPropertyName(prop, Model) #>: <#= GetPropertyTypeScriptTypeName(prop) #> 
<#
                            counter++;
                        }
                    }
                }
#>
        ): void {
            this.<#= formRootService #>.<#= localRouteName #>(
<# 
                {
                    int counter = 0;
                    foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                        if(counter > 0) { 
#>
                , <#= GetTypeScriptPropertyName(prop, Model) #>
<#
                        } else {
#>
                  <#= GetTypeScriptPropertyName(prop, Model) #>
<#
                            counter++;
                        }
                    }
                }
#>
            ).subscribe({
                next: (data: <#= viewInterfaceName #> ) => { 
                    if(!this.<#= Interface2ValuesMethodName #>(data, true)) {
                        this.<#= DoEmitEventMethodName #>(true);
                    };
                },
                error: (error) => { 
                    this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error)
                }
            });
    }
<#
            } // if (!indIsCorrect) { ... } else { ... }
        } // foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) { ... }
    } // if (Model.IsWebApiSelectOneByPrimarykey) { ... }
#>
    public <#= RefreshMethodName #>(): void {
<#
    if (Model.IsWebApiSelectOneByPrimarykey) {
        ModelViewUniqueKeyOfVwSerializable prk = GetModelPrimaryKey(Model);
        if(prk != null) {
            List<ModelViewPropertyOfVwSerializable> prmKeys = prk.UniqueKeyProperties;
#>
            if (
<#
            int cntr = 0;
            foreach(ModelViewPropertyOfVwSerializable prop in prmKeys) {
                if(cntr > 0) { 
#>
                && this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                } else {
                    cntr++;
#>
                    this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                }
            } // foreach(ModelViewPropertyOfVwSerializable prop in prmKeys) {...}else{...}
#>
            ) {
                this.<#= GetOneMethodName #>(
<#
            cntr = 0;
            foreach(ModelViewPropertyOfVwSerializable prop in prmKeys) {
                if(cntr > 0) { 
#>
                    , this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                } else {
                    cntr++;
#>
                      this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                }
            }
#>
                );
                return;
            }
<#
        } // if(prk != null) {...}
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            if (pk.IsPrimary) continue;
            string localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;

            List<ModelViewPropertyOfVwSerializable> prmKeys = pk.UniqueKeyProperties;
#>
            if (
<#
            int cntr = 0;
            foreach(ModelViewPropertyOfVwSerializable prop in prmKeys) {
                if(cntr > 0) { 
#>
                && this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                } else {
                    cntr++;
#>
                    this.isSet<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                }
            } // foreach(ModelViewPropertyOfVwSerializable prop in prmKeys) {...}else{...}
#>
            ) {
                this.<#= localRouteName #>(
<#
            cntr = 0;
            foreach(ModelViewPropertyOfVwSerializable prop in prmKeys) {
                if(cntr > 0) { 
#>
                    , this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                } else {
                    cntr++;
#>
                      this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>')
<#
                }
            }
#>
                );
                return;
            }
<#
        } // foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {...}
    } // if (Model.IsWebApiSelectOneByPrimarykey) {...}
#>
<# 
    if(localize) {
#>
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Not all Unique or Primary key properties are defined to call Refresh-method@@<#= viewDatasourceClassName + RefreshMethodName #>.Not-all-Unique-Primary:Not all Unique or Primary key properties are defined to call Refresh-method`});
<# 
    } else {
#>
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: 'Not all Unique or Primary key properties are defined to call Refresh-method'});
<# 
    }
#>
    }
    public <#= UpdateOneMethodName #>(): void {
<#
    if (Model.IsWebApiUpdate) { 
#>
        if(!this.get<#= IsDefinedFieldName #>()) {
<# 
    if(localize) {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Not all propertes are correctly defined@@<#= viewDatasourceClassName + UpdateOneMethodName #>.Not-all-propertes:Not all propertes are correctly defined`});
<# 
    } else {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: 'Not all propertes are correctly defined'});
<# 
    }
#>
            return;
        }
        let itm: <#= viewInterfaceName #> | any = this.<#= Values2InterfaceMethodName #>();
        this.<#= formRootService #>.<#= UpdateOneMethodName #>(itm).subscribe({
                next: (data: <#= viewInterfaceName #> ) => { 
                    this.<#= Interface2ValuesMethodName #>(data, false);
                    this.<#= OnUpdatePropName #>.emit(this);
                },
                error: (error) => { 
                    this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error)
                }
            });
<#
    } else {
#>

<# 
    if(localize) {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Update is not implemeted for the current ViewModel@@<#= viewDatasourceClassName + UpdateOneMethodName #>.Update-not-implemeted:Update is not implemeted for the current ViewModel`});
<# 
    } else {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http',{message: 'Update is not implemeted for the current ViewModel'});
<# 
    }
#>

<#
    } // if (Model.IsWebApiUpdate) { ... } else { ... }
#>
    }
    public <#= AddOneMethodName #>(): void {
<#
    if (Model.IsWebApiAdd) { 
#>
        if(!this.get<#= IsDefinedFieldName #>()) {
            
<# 
    if(localize) {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Not all propertes are correctly defined@@<#= viewDatasourceClassName + AddOneMethodName #>.Not-all-propertes:Not all propertes are correctly defined`});
<# 
    } else {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: 'Not all propertes are correctly defined'});
<# 
    }
#>
            return;
        }
        let itm: <#= viewInterfaceName #> | any = this.<#= Values2InterfaceMethodName #>();
        this.<#= formRootService #>.<#= AddOneMethodName #>(itm).subscribe({
                next: (data: <#= viewInterfaceName #> ) => { 
                    this.<#= Interface2ValuesMethodName #>(data, false);
                    this.<#= OnAddPropName #>.emit(this);
                },
                error: (error) => { 
                    this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error)
                }
            });
<#
    } else {
#>

<# 
    if(localize) {
#>
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Insert is not implemeted for the current ViewModel@@<#= viewDatasourceClassName + AddOneMethodName #>.Insert-not-implemeted:Insert is not implemeted for the current ViewModel`});
<# 
    } else {
#>
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: 'Insert is not implemeted for the current ViewModel'});
<# 
    }
#>

<#
    } // if (Model.IsWebApiUpdate) { ... } else { ... }
#>
    }
    public <#= DeleteOneMethodName #>(): void {
<#
    if (Model.IsWebApiDelete) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;


#>
        if(!this.get<#= IsDefinedFieldName #>()) {
<# 
    if(localize) {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Not all propertes are correctly defined@@<#= viewDatasourceClassName + DeleteOneMethodName #>.Not-all-propertes:Not all propertes are correctly defined`});
<# 
    } else {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: 'Not all propertes are correctly defined'});
<# 
    }
#>
            return;
        }
        this.<#= formRootService #>.<#= DeleteOneMethodName #>(<# 
        {
            int counter = 0;
            foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                if(counter > 0) { #>, <#} #>  this.get<#= ValueSuffix #>('<#= GetTypeScriptPropertyName(prop, Model) #>') <#
                counter++;
            }
        }
        #>).subscribe({
                next: (data: <#= viewInterfaceName #> ) => { 
                    this.<#= Interface2ValuesMethodName #>(data, false);
                    this.<#= OnDeletePropName #>.emit(this);
                },
                error: (error) => { 
                    this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error)
                }
            });
<#
        }
    } else {
#>

<# 
    if(localize) {
#>
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: $localize`:Delete is not implemeted for the current ViewModel@@<#= viewDatasourceClassName + DeleteOneMethodName #>.Delete-not-implemeted:Delete is not implemeted for the current ViewModel`});
<# 
    } else {
#>
        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message: 'Delete is not implemeted for the current ViewModel'});
<# 
    }
#>

<#
    } // if (Model.IsWebApiUpdate) { ... } else { ... }
#>
    }

    protected set<#= UnderHiddenFilterFieldsFieldName #>(): void {
        this._<#= UnderHiddenFilterFieldsFieldName #> = [];
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.<#= formRootService #>.get<#= MasterToClientKeyFieldsMapFieldName #>();
        let <#= MasterToClientFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: string}}} = this.<#= formRootService #>.get<#= MasterToClientFieldsMapFieldName #>();
        if(typeof this._<#= HiddenFilterFieldName #> === 'undefined') return;
        if(this._<#= HiddenFilterFieldName #> === null) return;
        for(let i in this._<#= HiddenFilterFieldName #>) {
            for(let j in this._<#= HiddenFilterFieldName #>[i]) {
                if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>).indexOf(i) > -1 ) {
                    if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>[i]).indexOf(j) > -1 ) {
//                        for(let k in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
//                            this._<#= UnderHiddenFilterFieldsFieldName #>.push(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm);
//                        }
                        for(let k in this._<#= HiddenFilterFieldName #>[i][j]) {
                            for(let m in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                                if (m === k) {
                                    if(!this._<#= UnderHiddenFilterFieldsFieldName #>.includes(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][m].propNm)) {
                                        this._<#= UnderHiddenFilterFieldsFieldName #>.push(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][m].propNm);
                                    }
                                    break;        
                                }
                            }
                        }


                    }
                }
//                if( Object.keys(<#= MasterToClientFieldsMapFieldName #>).indexOf(i) > -1 ) {
//                    if( Object.keys(<#= MasterToClientFieldsMapFieldName #>[i]).indexOf(j) > -1 ) {
//                        for(let k in <#= MasterToClientFieldsMapFieldName #>[i][j]) {
//                            this._<#= UnderHiddenFilterFieldsFieldName #>.push(<#= MasterToClientFieldsMapFieldName #>[i][j][k]);
//                        }
//                    }
//                }
            }
        }
        for(let i in <#= MasterToClientKeyFieldsMapFieldName #>) {
            for(let j in <#= MasterToClientKeyFieldsMapFieldName #>[i]) {
                let doins: Boolean = true;
                for(let m in <#= MasterToClientKeyFieldsMapFieldName #>[i][j]) {
                    if(!this._<#= UnderHiddenFilterFieldsFieldName #>.includes(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][m].propNm)) {
                        doins = false;
                        break;
                    }
                }
                if (doins) {
                    if( Object.keys(<#= MasterToClientFieldsMapFieldName #>).indexOf(i) > -1 ) {
                        if( Object.keys(<#= MasterToClientFieldsMapFieldName #>[i]).indexOf(j) > -1 ) {
                            for(let k in <#= MasterToClientFieldsMapFieldName #>[i][j]) {
                                if(!this._<#= UnderHiddenFilterFieldsFieldName #>.includes(<#= MasterToClientFieldsMapFieldName #>[i][j][k])) {
                                    this._<#= UnderHiddenFilterFieldsFieldName #>.push(<#= MasterToClientFieldsMapFieldName #>[i][j][k]);
                                }
                            }
                        }
                    }
                }
            }
        }
        this.<#= OnDetailHFChangedPropName #>.emit(this);
    }
    public is<#= UnderHiddenFilterFieldsFieldName #>(fld: string|any): boolean {
        if(typeof fld === 'undefined') return false;
        if(fld === null) return false;
        return this._<#= UnderHiddenFilterFieldsFieldName #>.indexOf(fld) > -1;
    }
    public <#= UpdateByHiddenFilterFieldsMethodName #>(doNotify: boolean = true): boolean {
        let hasChanged: boolean = false;
        let aftrMstrChngd: boolean = false;
        if(typeof this._<#= HiddenFilterFieldName #> === 'undefined') return hasChanged;
        if(this._<#= HiddenFilterFieldName #> === null) return hasChanged;
        let <#= MasterToClientKeyFieldsMapFieldName #>: {[key: string]: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}}} = this.<#= formRootService #>.get<#= MasterToClientKeyFieldsMapFieldName #>();
        for(let i in this._<#= HiddenFilterFieldName #>) {
            if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>).indexOf(i) > -1 ) {
                for(let j in this._<#= HiddenFilterFieldName #>[i]) {
                    if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>[i]).indexOf(j) > -1 ) {
                        for(let k in this._<#= HiddenFilterFieldName #>[i][j]) {
                            if( Object.keys(<#= MasterToClientKeyFieldsMapFieldName #>[i][j]).indexOf(k) > -1 ) {
                                let src: any = this._<#= HiddenFilterFieldName #>[i][j][k];
                                if (!this.isEqual(this.get<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm), this._<#= HiddenFilterFieldName #>[i][j][k])) {
                                    this.set<#= ValueSuffix #>(<#= MasterToClientKeyFieldsMapFieldName #>[i][j][k].propNm, this._<#= HiddenFilterFieldName #>[i][j][k]);
                                    aftrMstrChngd = (this._<#= CurrDirectMasterNavsFieldName #>.indexOf(j) >= 0) || aftrMstrChngd;
                                    hasChanged = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if(!hasChanged) return hasChanged;
        if(doNotify) this.<#= DoEmitEventMethodName #>(aftrMstrChngd);
        return hasChanged;
    }
    public get<#= IsNewSuffix #>(): boolean {
        return this._<#= IsNewSuffix #>;
    }
    public set<#= IsNewSuffix #>(v: boolean): void {
        this._<#= IsNewSuffix #> = v;
    }
    public isReadonly<#= ValueSuffix #>(key: string): boolean {
        let rslt: boolean = this.dbgenerated<#= ValueSuffix #>(key);
        if(!rslt) rslt = this.is<#= UnderHiddenFilterFieldsFieldName #>(key);
        if ((!rslt) && (!this.get<#= IsNewSuffix #>())) {
            rslt = this.<#= formRootService #>.isInPrimkey<#= ValueSuffix #>(key);
        }
        return rslt;
    }
}

