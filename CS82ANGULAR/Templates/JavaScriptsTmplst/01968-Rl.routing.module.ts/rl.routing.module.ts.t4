<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#
    bool localize = Context.Localize;

    string rlComponentLazyRoutingModuleFolder       = "01968-Rl.routing.module.ts";
    string rlComponentLazyRoutingModuleClassName    = GetModuleClassName(Model, rlComponentLazyRoutingModuleFolder);

    string appSettingServiceFolder                  = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName               = GetCommonServiceClassNameWithAnglr(AngularJsonFile, Model, Context, appSettingServiceFolder, rlComponentLazyRoutingModuleFolder);

    string rlComponentFolder                        = "01920-Rlist.component.ts";
    string rlComponentClassName                     = GetComponentClassNameWithAnglr(AngularJsonFile, Model, rlComponentFolder, rlComponentLazyRoutingModuleFolder);


    string OutletNmPropName             = "outletNm";
    string HiddenFilterPrefix           = "hf";
    string IdPrefix                     = "id";
    string VPrefix                      = "View";
    string APrefix                      = "Add";
    string UPrefix                      = "Upd";
    string DPrefix                      = "Del";
    string DepthParamName               = "depth"; 
    string uidParamName                 = "uid"; 
    string OutletNamePrefix             = "loltnm";
    string OutletParent                 = "oltParent";
    string IsDetailPropName             = "isdtl";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";
    string ShowFilterPropName           = "showFilter";
    string TitlePropName                = "title";
    string RDLMPrefix                   = "RDLM";
    string NavPrefix                    = "np";
    string routeShowFilterPropName      = "sf";
    string routeDepthParamName          = "dp"; 
    string routeFilterMaxHeightPropName = "fh";
    string routeOutletParent            = "oltp";
    string routeOutletNmPropName        = "oltn";

    string rvLazyModuleFolder           = "01970-Rv-lazy.routing.module.ts";
    string raLazyModuleFolder           = "01972-Ra-lazy.routing.module.ts";
    string ruLazyModuleFolder           = "01974-Ru-lazy.routing.module.ts";
    string rdLazyModuleFolder           = "01976-Rd-lazy.routing.module.ts";
    string rlLazyModuleFolder           = "01968-Rl.routing.module.ts";

    string routeDataViewNamePropName        = "vn";
    string routeDataViewActionPropName      = "va";
    string routeDataShowMultiSelectPropName = "ms";
    string routeMaxHeightPropName           = "mh";

    string rvlzFrases                       = "rllz" + Model.ViewName;

    string OutletNameValue = OutletNamePrefix + Model.ViewName;
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> tmpSearchSchema = null;

    // Model, url, depth
    List<Tuple<ModelViewSerializable, string, int>> nodes = new List<Tuple<ModelViewSerializable, string, int>>();
    List<string> viewNames = GetDetailViews(Model, Context, null);
    List<string> detailViewNames = new List<string>();
    foreach(string viewName in viewNames) {
        ModelViewSerializable detailView = GetViewByName(Context, viewName);
        string newPath = OutletNameValue + "2" + viewName + "/:" + HiddenFilterPrefix + "102";
        List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
        detailViewNames.Clear();
        bool isM2m = false;
        if(IsTableMatchesIndex(detailView)) {
            if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                    isM2m = true;
                }
            }
        }
        foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
            if(isM2m) {
                // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                if (tmpSearchSchema != null) {
                    int  cnt = 0;
                    if(tmpSearchSchema.Item5 == null) continue;
                    if(tmpSearchSchema.Item5.Count != 1) continue;
                    if(tmpSearchSchema.Item4 != null) continue;
                    if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                    ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
                    string newPathEx = OutletNameValue + "2" + viewToNavigate.ViewName + "/:" + HiddenFilterPrefix + "102";
                    if (!detailViewNames.Any(v => v == viewToNavigate.ViewName)) {
                        nodes.Add(new Tuple<ModelViewSerializable, string, int>(viewToNavigate, newPathEx, 2));
                        detailViewNames.Add(viewToNavigate.ViewName);
                    }
                    continue;
                }
            }

            if (!detailViewNames.Any(v => v == detailView.ViewName)) {
                nodes.Add(new Tuple<ModelViewSerializable, string, int>(detailView, newPath, 2));
                detailViewNames.Add(detailView.ViewName);
            }
        }
    }

#>



import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { <#= appSettingServiceClassName + "Activator" #> } from '<#= GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  appSettingServiceFolder, rlComponentLazyRoutingModuleFolder) #>';
import { <#= rlComponentClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, rlComponentFolder, rlComponentLazyRoutingModuleFolder) #>';

const <#= rvlzFrases #>: {[key:string]: string} = {
<#
{
    List<string> frviewNames = new List<string>();
    if(localize) {
        for(int k = nodes.Count-1; k > -1; k--) {
            Tuple<ModelViewSerializable, string, int> node = nodes[k];
            ModelViewSerializable aModel = node.Item1;
            if(frviewNames.Any(p => p == aModel.ViewName)) continue;
            frviewNames.Add(aModel.ViewName);
#>
        '<#= "View" + aModel.ViewName #>': $localize`:View <#= aModel.PluralTitle #>@@<#= rvlzFrases #>.<#= "View" +aModel.ViewName #>:View <#= aModel.Title#>`,
        '<#= "Add" + aModel.ViewName #>': $localize`:Add <#= aModel.Title #>  @@<#= rvlzFrases #>.<#= "Add" + aModel.ViewName #>:Add <#= aModel.Title#>`,
        '<#= "Update" + aModel.ViewName #>': $localize`:Update <#= aModel.Title #>  @@<#= rvlzFrases #>.<#= "Update" + aModel.ViewName #>:Update <#= aModel.Title#>`,
        '<#= "Delete" + aModel.ViewName #>': $localize`:Delete <#= aModel.Title #>  @@<#= rvlzFrases #>.<#= "Delete" + aModel.ViewName #>:Delete <#= aModel.Title#>`,
        '<#= "List" + aModel.ViewName #>': $localize`:<#= aModel.PluralTitle #>  @@<#= rvlzFrases #>.<#= "List" + aModel.ViewName #>:<#= aModel.PluralTitle#>`,
<#
        }
    } else {
        for(int k = nodes.Count-1; k > -1; k--) {
            Tuple<ModelViewSerializable, string, int> node = nodes[k];
            ModelViewSerializable aModel = node.Item1;
            if(frviewNames.Any(p => p == aModel.ViewName)) continue;
            frviewNames.Add(aModel.ViewName);
#>
        '<#= "View" + aModel.ViewName #>': 'View <#= aModel.PluralTitle #>',
        '<#= "Add" + aModel.ViewName #>': 'Add <#= aModel.Title #>',
        '<#= "Update" + aModel.ViewName #>': 'Update <#= aModel.Title #>',
        '<#= "Delete" + aModel.ViewName #>': 'Delete <#= aModel.Title #>',
        '<#= "List" + aModel.ViewName #>': 'Delete <#= aModel.PluralTitle #>',
<#
        }
    }
}
#>
} 


const routes: Routes = [
 {
    path: '',
    component: <#= rlComponentClassName #>,
    canActivate: [<#= appSettingServiceClassName + "Activator" #>],
    children: [


<#
{
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;

        string fileNm_rl  = null;
        string rlLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == rlLazyModuleFolder)) {
            fileNm_rl  = GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, rlComponentLazyRoutingModuleFolder, Context, aModel.ViewName, rlLazyModuleFolder);
            rlLazyModuleImport = GenerateLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rlLazyModuleFolder, Model, rlComponentLazyRoutingModuleFolder);
        }

        string fileNm_rv  = null;
        string rvLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == rvLazyModuleFolder)) {
            fileNm_rv  = GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, rlComponentLazyRoutingModuleFolder, Context, aModel.ViewName, rvLazyModuleFolder);
            rvLazyModuleImport = GenerateLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rvLazyModuleFolder, Model, rlComponentLazyRoutingModuleFolder);
        }

        string fileNm_ra  = null;
        string raLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == raLazyModuleFolder)) {
            fileNm_ra  = GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, rlComponentLazyRoutingModuleFolder, Context, aModel.ViewName, raLazyModuleFolder);
            raLazyModuleImport = GenerateLoadChildrenImportWithAnglr(AngularJsonFile, aModel, raLazyModuleFolder, Model, rlComponentLazyRoutingModuleFolder);
        }

        string fileNm_ru  = null;
        string ruLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == ruLazyModuleFolder)) {
            fileNm_ru  = GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, rlComponentLazyRoutingModuleFolder, Context, aModel.ViewName, ruLazyModuleFolder);
            ruLazyModuleImport = GenerateLoadChildrenImportWithAnglr(AngularJsonFile, aModel, ruLazyModuleFolder, Model, rlComponentLazyRoutingModuleFolder);
        }

        string fileNm_rd  = null;
        string rdLazyModuleImport = null;
        if(aModel.CommonStaffs.Any(c => c.FileType == rdLazyModuleFolder)) {
            fileNm_rd  = GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, rlComponentLazyRoutingModuleFolder, Context, aModel.ViewName, rdLazyModuleFolder);
            rdLazyModuleImport = GenerateLoadChildrenImportWithAnglr(AngularJsonFile, aModel, rdLazyModuleFolder, Model, rlComponentLazyRoutingModuleFolder);
        }

#>

//
// Info: Root Master View  [<#= Model.ViewName #>] 
// Info: Detail View  [<#= aModel.ViewName #>] 
//
<#

        if(aModel.IsWebApiSelectManyWithPagination) {
            if(!string.IsNullOrEmpty(fileNm_rl) && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rlLazyModuleFolder)))) {

            

                if(aModel.IsWebApiSelectOneByPrimarykey) {
                    if(!string.IsNullOrEmpty(fileNm_rv) && (!string.IsNullOrEmpty( GetModuleClassName(aModel, rvLazyModuleFolder)))) {
#>
    { 
//        outlet: '<#=  OutletNameValue #>',
//        path: '<#= OutletNameValue + "2" + VPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() + "/:" + IdPrefix + (CurrDepth+100).ToString() #>', 
        path: '<#= node.Item2 + "/" + VPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() + "/:" + IdPrefix + (CurrDepth+100).ToString() #>', 
        <#= rvLazyModuleImport #>,
        data: { <#= IsDetailPropName #>: true, <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'v', /* <#= routeOutletParent #>: '<#= OutletNameValue + "2" + aModel.ViewName #>', <#= routeOutletNmPropName #>: '<#=  OutletNameValue #>', */ <#= NavPrefix #>: '', /* <#= routeShowFilterPropName #>: true, */  <#= TitlePropName #>: <#= rvlzFrases #>['<#= "View" + aModel.ViewName #>'], <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + (CurrDepth+100).ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + (CurrDepth+100).ToString() #>', <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>},
        canActivate: [<#= appSettingServiceClassName + "Activator" #>],
    },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the component [<#= rvLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectOneByPrimarykey is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }




                if(aModel.IsWebApiAdd) {
                    if(!string.IsNullOrEmpty(fileNm_ra) && (!string.IsNullOrEmpty(GetModuleClassName(aModel, raLazyModuleFolder)))) {
#>
    { 
//        outlet: '<#=  OutletNameValue #>',
//        path: '<#= OutletNameValue + "2" + APrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() #>', 
        path: '<#= node.Item2 + "/" + APrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() #>', 
        <#= raLazyModuleImport #>,
        data: { <#= IsDetailPropName #>: true, <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'a', /* <#= routeOutletParent#>: '<#= OutletNameValue + "2" + aModel.ViewName #>', <#= routeOutletNmPropName #>: '<#=  OutletNameValue #>', */ <#= NavPrefix #>: '', /* <#= routeShowFilterPropName #>: true, */  <#= TitlePropName #>: <#= rvlzFrases #>['<#= "Add" + aModel.ViewName #>'], <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + (CurrDepth+100).ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>},
        canActivate: [<#= appSettingServiceClassName + "Activator" #>],
    },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the component [<#= raLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiAdd) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiAdd is set to false
//
<#
                } // if(aModel.IsWebApiAdd) { ... } else { ... }




                if(aModel.IsWebApiUpdate) {
                    if(!string.IsNullOrEmpty(fileNm_ru) && (!string.IsNullOrEmpty(GetModuleClassName(aModel, ruLazyModuleFolder)))) {
#>
    { 
//        outlet: '<#=  OutletNameValue #>',
//        path: '<#= OutletNameValue + "2" + UPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() + "/:" + IdPrefix + (CurrDepth+100).ToString() #>', 
        path: '<#= node.Item2 + "/" + UPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() + "/:" + IdPrefix + (CurrDepth+100).ToString() #>', 
        <#= ruLazyModuleImport #>,
        data: { <#= IsDetailPropName #>: true, <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'u', /* <#= routeOutletParent#>: '<#= OutletNameValue + "2" + aModel.ViewName #>', <#= routeOutletNmPropName #>: '<#=  OutletNameValue #>', */  <#= NavPrefix #>: '', /* <#= routeShowFilterPropName #>: true, */  <#= TitlePropName #>: <#= rvlzFrases #>['<#= "Update" + aModel.ViewName #>'], <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + (CurrDepth+100).ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + (CurrDepth+100).ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>},
        canActivate: [<#= appSettingServiceClassName + "Activator" #>],
    },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the component [<#= ruLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiUpdate) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiUpdate is set to false
//
<#
                } // if(aModel.IsWebApiUpdate) { ... } else { ... }




                if(aModel.IsWebApiDelete) {
                    if(!string.IsNullOrEmpty(fileNm_rd) && (!string.IsNullOrEmpty(GetModuleClassName(aModel, rdLazyModuleFolder)))) {
#>
    { 
//        outlet: '<#=  OutletNameValue #>',
//        path: '<#= OutletNameValue + "2" + DPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() + "/:" + IdPrefix + (CurrDepth+100).ToString() #>', 
        path: '<#= node.Item2 + "/" + DPrefix + aModel.ViewName + "/:" + HiddenFilterPrefix + (CurrDepth+100).ToString() + "/:" + IdPrefix + (CurrDepth+100).ToString() #>', 
        <#= rdLazyModuleImport #>,
        data: { <#= IsDetailPropName #>: true, <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'd', /* <#= routeOutletParent#>: '<#= OutletNameValue + "2" + aModel.ViewName #>', <#= routeOutletNmPropName #>: '<#=  OutletNameValue #>', */ <#= NavPrefix #>: '', /* <#= routeShowFilterPropName #>: true, */  <#= TitlePropName #>: <#= rvlzFrases #>['<#= "Delete" + aModel.ViewName #>'], <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + (CurrDepth+100).ToString() #>',  <#= IdPrefix #>: '<#= IdPrefix + (CurrDepth+100).ToString() #>',  <#= routeDepthParamName #>: <#= CurrDepth.ToString() #>},
        canActivate: [<#= appSettingServiceClassName + "Activator" #>],
    },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the component [<#= rdLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiDelete) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiDelete is set to false
//
<#
                } // if(aModel.IsWebApiDelete) { ... } else { ... }

#>
    { 
//        outlet: '<#=  OutletNameValue #>',
        path: '<#= node.Item2 #>', 
        <#= rlLazyModuleImport #>,
        data: { <#= IsDetailPropName #>: true, <#=routeDataViewNamePropName #>: '<#= aModel.ViewName #>', <#= routeDataViewActionPropName #>: 'l', <#= routeDataShowMultiSelectPropName #>: true,  /* <#= routeOutletNmPropName #>: '<#=  OutletNameValue #>', */ <#= NavPrefix #>: '', <#= routeFilterMaxHeightPropName #>: 2, <#= routeMaxHeightPropName #>: 10, <#= routeShowFilterPropName #>: true,  <#= TitlePropName #>: <#= rvlzFrases #>['<#= "List" + aModel.ViewName #>'], <#= HiddenFilterPrefix #>: '<#= HiddenFilterPrefix + (node.Item3+100).ToString() #>',  <#= routeDepthParamName #>: <#= node.Item3.ToString() #>, <#= uidParamName #>: '<#= Guid.NewGuid().ToString("N") #>' },
        canActivate: [<#= appSettingServiceClassName + "Activator" #>],
    },

<#

            } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the component [<#= rlLazyModuleFolder #>] has not been generated yet
//
<#
            }
        } else { // if(aModel.IsWebApiSelectManyWithPagination) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectManyWithPagination is set to false
//
<#
        } // if(aModel.IsWebApiSelectManyWithPagination) { } else { ... }
    }

}
#>


    ]
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class <#= rlComponentLazyRoutingModuleClassName #> { }


