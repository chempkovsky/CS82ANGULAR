<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    bool localize = Context.Localize;

    string AppearancePropName           = "appearance";
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string showAddFltItemSelector       = "show-add-flt-item";
    string showAddFltItemPropName       = "showAddFltItem";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";

    string appLoginComponentFolder      = "00140-app-glbl-login.component.ts";
    string appLoginComponentClassName   = GetComponentClassName(Model, appLoginComponentFolder);

#>

<kendo-card width>
    <kendo-card-header>
        <h1 kendoCardTitle>{{title}}</h1>
    </kendo-card-header>
    <kendo-card-body>

        <div [formGroup]="loginFormGroup" (ngSubmit)="doSubmit()" fxLayout="column wrap">
            <kendo-formfield>
<# 
    if(localize) {
#>
                <kendo-label i18n="User name@@<#= appLoginComponentClassName #>.User-name-label">User name</kendo-label>
                <kendo-textbox [fillMode]="appearance" i18n-placeholder="Email@@<#= appLoginComponentClassName #>.User-name-placeholder" placeholder="User name" formControlName="username">
                </kendo-textbox>
<# 
    } else {
#>
                <kendo-label>User name</kendo-label>
                <kendo-textbox [fillMode]="appearance" placeholder="User name..." formControlName="username">
                </kendo-textbox>
<# 
    }
#>
                <kendo-formerror *ngIf="loginFormGroup.controls['username'].invalid">{{getErrorMessage(loginFormGroup.controls['username'])}}</kendo-formerror>
<# 
    if(localize) {
#>
                <kendo-formhint align="end" i18n="Enter User name@@<#= appLoginComponentClassName #>.Enter-User-name-hint">Enter User name</kendo-formhint>
<# 
    } else {
#>
                <kendo-formhint align="end">Enter User name</kendo-formhint>
<# 
    }
#>
            </kendo-formfield>
            <kendo-formfield>
<# 
    if(localize) {
#>
                <kendo-label i18n="Password@@<#= appLoginComponentClassName #>.Password-label">Password</kendo-label>
                <div fxLayout="row"> 
                    <input kendoTextBox i18n-placeholder="Password@@<#= appLoginComponentClassName #>.Password-placeholder" placeholder="Password" formControlName="password" [type]="pwdhide ? 'password' : 'text'">
<# 
    } else {
#>
                <kendo-label>Password</kendo-label>
                <div fxLayout="row"> 
                    <input kendoTextBox placeholder="Password" formControlName="password" [type]="pwdhide ? 'password' : 'text'">
<# 
    }
#>

                    <button kendoButton  [icon]="pwdhide ? 'eye' : 'cancel'" (click)="pwdhide = !pwdhide"  >
                    </button>
                </div> 

                <kendo-formerror *ngIf="loginFormGroup.controls['password'].invalid">{{getErrorMessage(loginFormGroup.controls['password'])}}</kendo-formerror>
<# 
    if(localize) {
#>
                <kendo-formhint align="end" i18n="Enter Password@@<#= appLoginComponentClassName #>.Enter-Password-hint">Enter Password</kendo-formhint>
<# 
    } else {
#>
                <kendo-formhint align="end">Enter Password</kendo-formhint>
<# 
    }
#>
            </kendo-formfield>
        </div>

    </kendo-card-body>
    <kendo-card-actions orientation="horizontal">
<# 
    if(localize) {
#>
        <button kendoButton (click)="onCancel()" cdkFocusInitial i18n="Canceld@@Cancel.Cancel">Cancel</button>
        <button kendoButton (click)="doSubmit()" i18n="Ok@@Ok.Ok">Ok</button>
<# 
    } else {
#>
        <button kendoButton (click)="onCancel()" cdkFocusInitial>Cancel</button>
        <button kendoButton (click)="doSubmit()">Ok</button>
<# 
    }
#>
    </kendo-card-actions>
</kendo-card>

<#+

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

#>
