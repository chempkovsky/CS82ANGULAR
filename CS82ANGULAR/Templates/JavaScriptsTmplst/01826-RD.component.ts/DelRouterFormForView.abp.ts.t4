<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#
    bool localize = Context.Localize;

    string HiddenFilterPrefix           = "hf";
    string IdPrefix                     = "id";
    string VPrefix                      = "View";
    string APrefix                      = "Add";
    string UPrefix                      = "Upd";
    string DelPrefix                    = "Del";
    string DPrefix                      = "Del";

    string NavPrefix                    = "np";
    string OutletNmPropName             = "outletNm";
    string OutletParent                 = "oltParent";
    string IsDetailPropName             = "isdtl";
    string routeShowFilterPropName      = "sf";
    string routeDepthParamName          = "dp"; 
    string routeOutletParent            = "oltp";
    string routeOutletNmPropName        = "oltn";

    string HiddenFilterAsFltRsltSuffix  = "HiddenFilterAsFltRslt";
    string DepthParamName               = "depth"; 
    string ActionParamName              = "mode";  
    string ItemParamName                = "item";  

    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";

    string OnAfterSubmitMethodName      = "onAfterSubmit";

    string FormControlModelPropName     = "eformControlModel";
    string FormControlNewModelPropName  = "eformNewControlModel";
    string AppSettingServicePropName    = "appGlblSettings";
    string formRootService              = "frmRootSrv";
    string TitlePropName                = "title";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";
    string frasesPropName                       = "frases";

    string rdCssFolder                  = "01826-RD.component.css";
    string rdHtmlFolder                 = "01826-RD.component.html";
    string rdComponentFolder            = "01826-RD.component.ts";
    string componentClassName           = GetComponentClassName(Model, rdComponentFolder);
    string componentSelectorCommonPart  = GetComponentSelectorCommonPart(Model, rdComponentFolder);


    string appSettingServiceFolder              = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName           = GetCommonServiceClassNameWithAnglr(AngularJsonFile, Model, Context, appSettingServiceFolder, rdComponentFolder);

    string eventEmitterDataModelFolder          = "00018-event-emitter-data.interface.ts";
    string eventEmitterDataModelClassName       = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterDataModelFolder, rdComponentFolder);

    string menuItemDataModelFolder              = "00017-menu-item-data.interface.ts";
    string menuItemDataModelClassName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, menuItemDataModelFolder, rdComponentFolder);

    string eventEmitterPubModelFolder           = "00019-event-emitter-pub.interface.ts";
    string eventEmitterPubModelClassName        = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, rdComponentFolder);

    string filterResultModelFolder              = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, filterResultModelFolder, rdComponentFolder);

    string viewInterfaceFolder                  = "01100-.interface.ts";
    string viewInterfaceName                    = GetInterfaceNameWithAnglr(AngularJsonFile, Model, viewInterfaceFolder, rdComponentFolder);

    string viewServiceFolder                    = "01400-.service.ts";
    string serviceClassName                     = GetServiceClassNameWithAnglr(AngularJsonFile, Model, viewServiceFolder, rdComponentFolder);

    string dformComponentFolder                 = "01506-Dform.component.ts";
    string dformComponentClassName              = GetComponentClassNameWithAnglr(AngularJsonFile, Model, dformComponentFolder, rdComponentFolder);

    string DlgSrvPrefix                         = "dlgSrv";
    string apiName                              = AbpFirstItemOfNameSpace(Model.WebApiServiceDefaultProjectNameSpace);

    List<ModelViewPropertyOfVwSerializable> primKeys= GetModelPrimaryKeyProps(Model);
#>

import { Component, OnInit, Input, Output, EventEmitter, ViewChild, Inject } from '@angular/core';
import { ActivatedRoute, Router, ParamMap, UrlSegment, ActivatedRouteSnapshot } from '@angular/router';
<# 
    if(localize) {
#>
import { LocalizationService } from '@abp/ng.core';
<# 
    }
#>

import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  appSettingServiceFolder, rdComponentFolder)#>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  filterResultModelFolder, rdComponentFolder) #>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  eventEmitterDataModelFolder, rdComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  menuItemDataModelFolder, rdComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, rdComponentFolder)#>';

import { <#= viewInterfaceName #> } from '<#=  GetFolderNameWithAnglr(AngularJsonFile, Model, viewInterfaceFolder, rdComponentFolder) #>';
import { <#= serviceClassName #> } from '<#=  GetFolderNameWithAnglr(AngularJsonFile, Model, viewServiceFolder, rdComponentFolder) #>';
import { <#= dformComponentClassName #> } from '<#=  GetFolderNameWithAnglr(AngularJsonFile, Model, dformComponentFolder, rdComponentFolder) #>';

@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, rdHtmlFolder, rdComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderName(Model, rdCssFolder, rdComponentFolder) #>.css']
})

export class <#= componentClassName #> implements OnInit, <#= eventEmitterPubModelClassName #> {
<# 
    if(localize) {
#>
    <#= frasesPropName #>: {[key:string]: string}  = {
        '<#= TitlePropName #>': this.L.instant({
            key: '<#= apiName #>::<#= Model.ViewName #>:DeleteTitle',
            defaultValue: "Delete <#= Model.Title #>"
        }) 
    };
<# 
    } else {
#>
    <#= frasesPropName #>: {[key:string]: string}  = {
        '<#= TitlePropName #>': 'Delete <#= Model.Title #>',
    };
<# 
    } 
#>
    <#= TitlePropName #>: string|any = this.<#= frasesPropName #>['<#= TitlePropName #>'];
    <#= NavPrefix #>: string|any = '';
    <#= OutletNmPropName #> : string = 'primary';
    <#= OutletParent #>: string = '';
    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= eventEmitterDataModelClassName #>)  {
        this.<#= onContainerMenuItemClickEmitter #>.emit(v);
    }
    <#= HiddenFilterPrefix #>: string = '<#= HiddenFilterPrefix + "1" #>';
    <#= IdPrefix #>: string = '<#= IdPrefix + "1" #>';
    <#= DepthParamName #>: number = 1;
    @ViewChild(<#= dformComponentClassName #>) childForm: <#= dformComponentClassName #> | any;
    <#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>> = [];
    <#= FormControlModelPropName #>: <#= viewInterfaceName #> | null = null;
    constructor(protected route: ActivatedRoute, protected router: Router, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, 
<# 
    if(localize) {
#>
        private L: LocalizationService, 
<# 
    }
#>
        protected <#= formRootService #>: <#= serviceClassName #>) { 
    }
    <#= IsDetailPropName #>: boolean = false;
    ngOnInit() {
        if (!(typeof this.route.snapshot.data === 'undefined')) {
            if (!(this.route.snapshot.data === null)) {
<# 
    if(localize) {
#>
                this.<#= TitlePropName #> = this.<#= frasesPropName #>['<#= TitlePropName #>'];
<# 
    } else {
#>
                if (!(typeof this.route.snapshot.data['<#= TitlePropName #>'] === 'undefined')) {
                    this.<#= TitlePropName #> = this.route.snapshot.data['<#= TitlePropName #>'];
                }
<# 
    }
#>
                if (!(typeof this.route.snapshot.data['<#= routeDepthParamName #>'] === 'undefined')) {
                    this.<#= DepthParamName #> = this.route.snapshot.data['<#= routeDepthParamName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= HiddenFilterPrefix #>'] === 'undefined')) {
                    this.<#= HiddenFilterPrefix #> = this.route.snapshot.data['<#= HiddenFilterPrefix #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= IdPrefix #>'] === 'undefined')) {
                    this.<#= IdPrefix #> = this.route.snapshot.data['<#= IdPrefix #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= NavPrefix #>'] === 'undefined')) {
                    this.<#= NavPrefix #> = this.route.snapshot.data['<#= NavPrefix #>'];
                }
/*
                if (!(typeof this.route.snapshot.data['<#= routeOutletNmPropName #>'] === 'undefined')) {
                    this.<#= OutletNmPropName #> = this.route.snapshot.data['<#= routeOutletNmPropName #>'];
                }
*/
                if (!(typeof this.route.snapshot.data['<#= IsDetailPropName #>'] === 'undefined')) {
                    this.<#= IsDetailPropName #> = this.route.snapshot.data['<#= IsDetailPropName #>'];
                }
/*
                if (!(typeof this.route.snapshot.data['<#= routeOutletParent #>'] === 'undefined')) {
                    this.<#= OutletParent #> = this.route.snapshot.data['<#= routeOutletParent #>'];
                }
*/
            }
        }
        if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
            this.<#= HiddenFilterPropName #> = this.<#= formRootService #>.get<#= HiddenFilterAsFltRsltSuffix #>(JSON.parse(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]));
        }
        if (!(typeof this.route.snapshot.params[this.<#= IdPrefix #>] === 'undefined')) {
            this.<#= FormControlModelPropName #> =  JSON.parse(this.route.snapshot.params[this.<#= IdPrefix #>]);
        }
    }
    <#= OnAfterSubmitMethodName #>(newVal: <#= viewInterfaceName #>) {
<#
        if(primKeys != null) {
#>      
        let flt: any = {};
<#
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { 
#>      
        flt['<#= GetTypeScriptPropertyName(primKey, Model) #>'] = newVal.<#= GetTypeScriptPropertyName(primKey, Model) #>;
<#
            }
#>      
        let qp: any = {
            <#= ActionParamName #>: '<#= DPrefix #>',
            <#= ItemParamName  #>:  JSON.stringify(flt)
        };
<#

        } else {
#>
        let qp: any = {
            <#= ActionParamName #>: '<#= DPrefix #>',
            <#= ItemParamName  #>:  JSON.stringify(newVal)
        };
<#
        }
#>
        this.router.navigate(['../../../'], {queryParams: qp, relativeTo: this.route});
/*
        if(this.<#= OutletNmPropName #> === 'primary') {
            this.router.navigate(['../../../'], {queryParams: qp, relativeTo: this.route});
        } else {
            let qp0: string[] = [];
            qp0.push(this.<#= OutletParent #>);
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp0.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>])
            } else {
                qp0.push(JSON.stringify({}));
            }
            this.router.navigate([{outlets: { [this.<#= OutletNmPropName #>]: null}}], {relativeTo: this.route.parent!.parent}).then(
                ()=> {
                    this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: qp0 }}], {relativeTo: this.route.parent!.parent})
                }
            );
        }
*/
    }

    onCancel() {
        this.router.navigate(['../../../'], {relativeTo: this.route});
/*
        if(this.<#= OutletNmPropName #> === 'primary') {
            this.router.navigate(['../../../'], {relativeTo: this.route});
        } else {
            let qp: string[] = [];
            qp.push(this.<#= OutletParent #>);
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>])
            } else {
                qp.push(JSON.stringify({}));
            }
            this.router.navigate([{outlets: { [this.<#= OutletNmPropName #>]: null}}], {relativeTo: this.route.parent!.parent}).then(
                ()=> {
                    this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: qp }}], {relativeTo: this.route.parent!.parent})
                }
            );
        }
*/
    }
    onOk() {
        if (typeof this.childForm === 'undefined') return;
        if (this.childForm === null) return;
        this.childForm.doSubmit();
    }
}


