<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string materialModuleFolder         = "00010-app-material.module.ts";
    string flexModuleFolder             = "00011-app-flex-layout.module.ts";
    string filterModuleFolder           = "00050-web-service-filter.module.ts";


    string searchModuleFolder           = "01450-S.module.ts";
    string viewformModuleFolder         = "01550-V.module.ts";
    string addformModuleFolder          = "01552-A.module.ts";
    string updformModuleFolder          = "01554-U.module.ts";
    string delformModuleFolder          = "01556-D.module.ts";


    string rvComponentFolder            = "01820-RV.component.ts";
    string raComponentFolder            = "01822-RA.component.ts";
    string ruComponentFolder            = "01824-RU.component.ts";
    string rdComponentFolder            = "01826-RD.component.ts";
    string rlistComponentFolder         = "01920-Rlist.component.ts";


    string rlFormModuleFolder           = "01958-Rl.module.ts";
//    string rvFormModuleFolder           = "01950-Rv.module.ts";
//    string raFormModuleFolder           = "01952-Ra.module.ts";
//    string ruFormModuleFolder           = "01954-Ru.module.ts";
//    string rdFormModuleFolder           = "01956-Rd.module.ts";

    string flexModuleClassName          = GetContextModuleClassName(Context, flexModuleFolder);
    string materialModuleClassName      = GetContextModuleClassName(Context, materialModuleFolder);
    string filterModuleClassName        = GetContextModuleClassName(Context, filterModuleFolder);

    string searchModuleClassName        = GetModuleClassName(Model, searchModuleFolder);

    string viewformModuleClassName      = null;//GetModuleClassName(Model, viewformModuleFolder);
    string addformModuleClassName       = null;//GetModuleClassName(Model, addformModuleFolder);
    string updformModuleClassName       = null;//GetModuleClassName(Model, updformModuleFolder);
    string delformModuleClassName       = null;//GetModuleClassName(Model, delformModuleFolder);


    string rvFormModuleClassName        = null;//GetModuleClassName(Model, rvFormModuleFolder);
    string raFormModuleClassName        = null;//GetModuleClassName(Model, raFormModuleFolder);
    string ruFormModuleClassName        = null;//GetModuleClassName(Model, ruFormModuleFolder);
    string rdFormModuleClassName        = null;//GetModuleClassName(Model, rdFormModuleFolder);
    string rlFormModuleClassName        = GetModuleClassName(Model, rlFormModuleFolder);


    string rvComponentClassName = null;//GetComponentClassName(Model, rvComponentFolder);
    string raComponentClassName = null;//GetComponentClassName(Model, raComponentFolder);
    string ruComponentClassName = null;//GetComponentClassName(Model, ruComponentFolder);
    string rdComponentClassName = null;//GetComponentClassName(Model, rdComponentFolder);
    string rlComponentClassName = GetComponentClassName(Model, rlistComponentFolder);



#>

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';

import { <#=  flexModuleClassName #> } from '<#=  GetCommonFolderName(Model, Context,  flexModuleFolder, rlFormModuleFolder)#>';
import { <#=  materialModuleClassName #> } from '<#=  GetCommonFolderName(Model, Context,  materialModuleFolder, rlFormModuleFolder)#>';



<#
    if(!string.IsNullOrEmpty(rlComponentClassName)) {
#>
import { <#=  searchModuleClassName #> } from '<#= GetFolderName(Model, searchModuleFolder, rlFormModuleFolder) #>';
import { <#=  rlComponentClassName #> } from '<#= GetFolderName(Model, rlistComponentFolder, rlFormModuleFolder) #>';
<#
    }
    if(!string.IsNullOrEmpty(rvComponentClassName)) {
#>
import { <#=  rvComponentClassName #> } from '<#=  GetFolderName(Model, rvComponentFolder, rlFormModuleFolder) #>';
<#
    }
    if(!string.IsNullOrEmpty(raComponentClassName)) {
#>
import { <#=  raComponentClassName #> } from '<#=  GetFolderName(Model, raComponentFolder, rlFormModuleFolder) #>';
<#
    }
    if(!string.IsNullOrEmpty(ruComponentClassName)) {
#>
import { <#=  ruComponentClassName #> } from '<#=  GetFolderName(Model, ruComponentFolder, rlFormModuleFolder) #>';
<#
    }
    if(!string.IsNullOrEmpty(rdComponentClassName)) {
#>
import { <#=  rdComponentClassName #> } from '<#=  GetFolderName(Model, rdComponentFolder, rlFormModuleFolder) #>';
<#
    }
#>


<#
    if(!string.IsNullOrEmpty(viewformModuleClassName)) {
#>
import { <#=  viewformModuleClassName #> } from '<#=  GetFolderName(Model, viewformModuleFolder, rlFormModuleFolder) #>';
<#
    }
    if(!string.IsNullOrEmpty(addformModuleClassName)) {
#>
import { <#=  addformModuleClassName #> } from '<#=  GetFolderName(Model, addformModuleFolder, rlFormModuleFolder) #>';
<#
    }
    if(!string.IsNullOrEmpty(delformModuleClassName)) {
#>
import { <#=  delformModuleClassName #> } from '<#=  GetFolderName(Model, delformModuleFolder, rlFormModuleFolder) #>';
<#
    }
#>





@NgModule({
    declarations: [
<#
    if(!string.IsNullOrEmpty(rvComponentClassName)) {
#>
        <#=  rvComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(raComponentClassName)) {
#>
        <#=  raComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(ruComponentClassName)) {
#>
        <#=  ruComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(rdComponentClassName)) {
#>
        <#=  rdComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(rlComponentClassName)) {
#>
        <#=  rlComponentClassName #>,
<#
    }
#>

    ],
    imports: [
        CommonModule,
        RouterModule,
        // BrowserModule,
        <#= materialModuleClassName #>,
        <#= flexModuleClassName #>,
        // <#= filterModuleClassName #>,
<#
    if(!string.IsNullOrEmpty(rlComponentClassName)) {
#>
        <#=  searchModuleClassName #>,
<#
    }
#>



<#
    if(!string.IsNullOrEmpty(viewformModuleClassName)) {
#>
        <#=  viewformModuleClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(addformModuleClassName)) {
#>
        <#=  addformModuleClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(updformModuleClassName)) {
#>
        <#=  updformModuleClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(delformModuleClassName)) {
#>
        <#=  delformModuleClassName #>,
<#
    }
#>


    ],
    exports: [
<#
    if(!string.IsNullOrEmpty(rvComponentClassName)) {
#>
        <#=  rvComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(raComponentClassName)) {
#>
        <#=  raComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(ruComponentClassName)) {
#>
        <#=  ruComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(rdComponentClassName)) {
#>
        <#=  rdComponentClassName #>,
<#
    }
    if(!string.IsNullOrEmpty(rlComponentClassName)) {
#>
        <#=  rlComponentClassName #>,
<#
    }
#>
    ],
    entryComponents: [
    ]
})
export class <#= rlFormModuleClassName #> { }


<#+
    ModelViewSerializable GetViewByName(DbContextSerializable context, string ViewName) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
    }
    string GetCrossComponentFolderName(ModelViewSerializable model, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetContextModuleClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".module","Module").Replace(".routing","Routing");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModuleClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".module","Module").Replace(".routing","Routing");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }
    List<string> GetSearchDialogViewsList(ModelViewSerializable model, DbContextSerializable context, List<string> sdViewsDict)
    {
        if ((model == null) || (context == null) || (sdViewsDict == null)) {
            return sdViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return sdViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! sdViewsDict.Contains(viewNameForSel) ) {
                            sdViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return sdViewsDict;
    }


#>
