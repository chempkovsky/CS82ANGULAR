<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>

<#
    bool localize = Context.Localize;
    string frasesPropName           = "frases";
    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";
    int percentEq100 = 99;

    
    string ButtonDisable            = "BttnDsnbl";

    string MainFormGroupName        = "mainFormGroup";
    string ComboSufix               = "CmbCntrl";
    string TypeaheadSufix           = "TphdCntrl";
    string TypeaheadDisplaySufix    = "DsplFn";
    string SearchClickSufix         = "SrchClck";
    string AppearancePropName       = "appearance";
    string captionPropName          = "caption";

    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";

    string viewformComponentFolder      = "01500-Vform.component.ts";
    string componentClassName = GetComponentClassName(Model, viewformComponentFolder);

    int typeAheadNo = 0;
    int dateTmPickNo = 0;

    int XXXCnt      = 0;
    int XXX2Cnt     = 0;
    int XXX3Cnt     = 0;
    int XXX1Wdth    = 0;
    int[] XXX2Wdth  = new int[] {0, 0};
    int[] XXX3Wdth = new int[] {0, 0};
    int InputTypeId = 3;

#>
     <div fxLayout="row" fxLayoutAlign="flex-end space-around" style="margin-bottom: 12px;"> 
        <kendo-label fxFlex fxLayoutAlign="flex-start space-around">{{<#= captionPropName #>}}</kendo-label>
        <ng-template ngFor let-item [ngForOf]="<#= containerMenuItemsPropName #>">
            <span fxFlex="1%"></span>  
            <button kendoButton (click)="<#= onContainerMenuItemClickMethodName #>(item)" 
                [themeColor]="item.iconColor"
                [icon]="item.iconColor"
                [title]="item.caption"> 
            </button>     
        </ng-template>            
        <span fxFlex="1%"></span>
     </div> 
    <div [formGroup]="<#= MainFormGroupName #>" (ngSubmit)="doSubmit()" fxLayout="row wrap" fxLayoutAlign="space-between" style="margin: 0 15px;">
<#

    bool isNewLine = false;
    for(int i = 0; i < Model.UIFormProperties.Count; i++) {
        ModelViewUIFormPropertySerializable 
                modelViewUIFormPropertySerializable = Model.UIFormProperties[i];
        if (isNewLine || i == 0) {
            isNewLine = false;
            for (int k = i; k < Model.UIFormProperties.Count; k++) {
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenDelete != InputTypeEnum.Hidden)) {
                    XXXCnt++;
                }
                if (Model.UIFormProperties[k].IsNewLineAfter) break;
            }
            if(XXXCnt == 0) {
                    XXX1Wdth = percentEq100;
                    XXX2Wdth[0] = percentEq100;
                    XXX2Wdth[1] = percentEq100;
                    XXX3Wdth[0] = percentEq100;
                    XXX3Wdth[1] = percentEq100;
            } else {
                XXX1Wdth = 100 / XXXCnt;
                XXX2Cnt = XXXCnt >> 1; 
                if (XXX2Cnt < 1) { 
                    XXX2Wdth[0] = percentEq100;
                } else {
                    XXX2Wdth[0] = 100 / XXX2Cnt;
                }
                XXX2Wdth[1] = 100 / (XXXCnt - XXX2Cnt);

                XXX3Cnt = XXXCnt / 3;
                if(XXX3Cnt < 1) {
                    XXX3Wdth[0] = percentEq100;
                    XXX3Wdth[1] = percentEq100;
                } else {
                    if(XXX3Cnt == 1) {                    
                        XXX3Wdth[0] = percentEq100;
                    } else {
                        XXX3Wdth[0] = 100 / XXX3Cnt;
                    }
                    XXX3Cnt = XXX3Cnt * 3;
                    if ((XXXCnt - XXX3Cnt) > 1) {
                        XXX3Wdth[1] = 100 / (XXXCnt - XXX3Cnt);
                    } else {
                        XXX3Wdth[1] = percentEq100;
                    }
                }
            }
            XXXCnt = 0;
        }

        if (modelViewUIFormPropertySerializable.IsShownInView) {
                if (XXX1Wdth == 100) {
                    XXX1Wdth = percentEq100;
                }
                if (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Hidden) {
#>
                <input type="hidden"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
<#
                }
                if (modelViewUIFormPropertySerializable.InputTypeWhenDelete != InputTypeEnum.Hidden) {
                    if(modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) {
#>
                <input type="hidden"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                <kendo-formfield  fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#= percentEq100.ToString() #>">
                    <kendo-label>{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-label']}}</kendo-label>
                    <kendo-dropdownlist [fillMode]="<#= AppearancePropName #>" 
                        [formControl]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>"
                        [fillMode]="<#= AppearancePropName #>"
                        [data]="<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>"
                        valueField
                        textField="<#= GetComboControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, InputTypeId) #>">
                    </kendo-dropdownlist>
                    <kendo-formerror *ngIf="<#= GetExpressionForControlInvalid(modelViewUIFormPropertySerializable, Model, ComboSufix) #>">{{getErrorMessage(<#=  GetExpressionForFormControl(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)}}</kendo-formerror>
                    <kendo-formhint align="end">{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-hint']}}</kendo-formhint>
                </kendo-formfield>
<#
                    } /// if(modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) {}
                    else if(modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) {
#>
                <input type="hidden"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                <kendo-formfield  fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#= percentEq100.ToString() #>">
                    <kendo-label>{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-label']}}</kendo-label>
                    <kendo-dropdownlist [fillMode]="<#= AppearancePropName #>" 
                        [formControl]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>"
                        [fillMode]="<#= AppearancePropName #>"
                        [data]="<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>"
                        valueField
                        [filterable]="true"
                        (opened)="<#= GetExpressionForControlListOpen(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(true)"
                        (closed)="<#= GetExpressionForControlListOpen(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>(false)"
                        (filterChange)="<#= GetExpressionForControlListFilter(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>($event)"
                        textField="<#= GetTypeaheadControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, InputTypeId) #>">
                    </kendo-dropdownlist>
                    <kendo-formerror *ngIf="<#= GetExpressionForControlInvalid(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>">{{getErrorMessage(<#=  GetExpressionForFormControl(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)}}</kendo-formerror>
                    <kendo-formhint align="end">{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-hint']}}</kendo-formhint>
                </kendo-formfield>
<#
                        typeAheadNo++;
                    } /// if(modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead) {}
                    else  
                    {
                            bool hasButton = HasButton(modelViewUIFormPropertySerializable.InputTypeWhenDelete);
#>
                <kendo-formfield  fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#=  GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#=  GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#=  percentEq100.ToString() #>">
<#
                            if(!IsBooleanInput(modelViewUIFormPropertySerializable, Model)) {
#>
                    <kendo-label>{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-label']}}</kendo-label>
<#
                                if(hasButton) {
#>
                    <div fxLayout="row"> 
<#
                                }
                            }
                            if (IsDateInput(modelViewUIFormPropertySerializable, Model)) {
                                if (hasButton || (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.ReadOnly)) {
#>
                    <kendo-datepicker [fillMode]="<#= AppearancePropName #>" [placeholder]="<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-placeholder']"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" [readonly]="true"></kendo-datepicker>
<#
                                } else {
#>
                    <kendo-datepicker [fillMode]="<#= AppearancePropName #>" [placeholder]="<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-placeholder']" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>"></kendo-datepicker>
<#
                                }
                                dateTmPickNo++;
                            } else {
                                if(IsMemoInput(modelViewUIFormPropertySerializable, Model)) {
                                    if (hasButton || (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.ReadOnly)) {
#>
                    <kendo-textarea [fillMode]="<#= AppearancePropName #>" [placeholder]="<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-placeholder']" formControlName="<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" [readonly]="true"></kendo-textarea>
<#
                                    } else {
#>
                    <kendo-textarea [fillMode]="<#= AppearancePropName #>" [placeholder]="<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-placeholder']" formControlName="<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>"></kendo-textarea>
<#
                                    }
                                } else {
                                    if( IsBooleanInput(modelViewUIFormPropertySerializable, Model) ) {
#>
                    <div class="k-checkbox-wrap">
<#
                                        if (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.ReadOnly) { 
#>
                        <input type="checkbox" kendoCheckBox formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>"  [attr.disabled]="true" > 
<#
                                        } else {
#>
                        <input type="checkbox" kendoCheckBox formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" > 
<#
                                        }
#>
                        <kendo-label class="k-checkbox-label" >{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-label']}}</kendo-label>
                    </div>
<#
                                    }
                                    else
				                    {
                                        if (hasButton || (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.ReadOnly)) { 
#>
                    <kendo-textbox [fillMode]="<#= AppearancePropName #>" <#= GetFormatters(modelViewUIFormPropertySerializable, Model) #> [placeholder]="<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-placeholder']" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" [readonly]="true">
                    </kendo-textbox>
<#
                                        } else {
#>
                    <kendo-textbox [fillMode]="<#= AppearancePropName #>" <#= GetFormatters(modelViewUIFormPropertySerializable, Model) #> [placeholder]="<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-placeholder']" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                    </kendo-textbox>
<#
                                        }
                                    }
                                }
                            }
                            if(!IsBooleanInput(modelViewUIFormPropertySerializable, Model)) {
                                if(hasButton) {
#>
                        <button kendoButton  themeColor="primary"  icon="search" (click)="<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>()" [disabled]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>"  >
                        </button>
                    </div> 
<#
                                }
                            }
#>
                    <kendo-formerror *ngIf="<#=  GetExpressionForInvalid(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>">{{getErrorMessage(<#=  GetExpressionForFormControl(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)}}</kendo-formerror>
                    <kendo-formhint align="end">{{<#= frasesPropName #>['<#= modelViewUIFormPropertySerializable.ViewPropertyName #>-hint']}}</kendo-formhint>
                </kendo-formfield>
<#
                    } // if (!((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) || (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead))) {}
                    XXXCnt++;

                } // if (modelViewUIFormPropertySerializable.InputTypeWhenDelete != InputTypeEnum.Hidden) {
        } // if (modelViewUIFormPropertySerializable.IsShownInView) {

        if(modelViewUIFormPropertySerializable.IsNewLineAfter) {
#>
                <hr fxFlex="100"/>
<#
            isNewLine = true;
            XXXCnt = 0;
        }

            }   // for(int i = 0; i < Model.UIFormProperties.Count; i++) {

#> 
    </div>
