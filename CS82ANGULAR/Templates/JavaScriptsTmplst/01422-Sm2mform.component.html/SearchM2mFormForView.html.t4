<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>

<#
    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";
    int percentEq100 = 99;

    string showAddFltItemSelector           = "show-add-flt-item";
    string showAddFltItemPropName           = "showAddFltItem";

    string DisplayedColumnsProperty        = "displayedColumns";
    string ActionColumnDefProperty         = "menuAction";
    string SelectColumnDefProperty         = "selectAction";
    string SelectMultColumnDefProperty     = "selectMultAction";
    string multSelectionProperty           = "multSelection";

    string OnSelectRowMethodName           = "onSelectRow";
    string MatPaginatorLen                 = "matPaginatorLen";
    string MatPaginatorPageSize            = "matPaginatorPageSize";
    string MatPaginatorPageSizeOptions     = "matPaginatorPageSizeOptions"; 
    string ActionParamChangeMode           = "Change";
    
    string EformModePropName        = "eformMode";

    string DisplayLabelProperty     = "Name";
    string ShortNameLabelProperty   = "ShortName";
    string DisplayHintProperty      = "Prompt";

    string MainFormGroupName        = "mainFormGroup";
    string ComboSufix               = "CmbCntrl";
    string TypeaheadSufix           = "TphdCntrl";
    string TypeaheadDisplaySufix    = "DsplFn";
    string TypeaheadAddDisplaySufix = "AddDsplFn";
    string TypeaheadUpdDisplaySufix = "UpdDsplFn";
    string TypeaheadDelDisplaySufix = "DelDsplFn";
    string SearchClickSufix         = "SrchClck";

    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";

    string RowCommandsSelector      = "row-commands";
    string RowCommandsPropName      = "rowCommands";
    string TableCommandsSelector    = "table-commands";
    string TableCommandsPropName    = "tableCommands";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";

    string externalFilterSelector               = "external-filter";
    string externalFilterPropName               = "externalFilter";
    string externalFilterRsltPropName           = "externalFilterRslt";


    string filterModelFolder            = "00021-web-service-filter.interface.ts";
    string filterDefModelFolder         = "00022-web-service-filter-def.interface.ts";
    string filterOperatorModelFolder    = "00023-web-service-filter-operator.interface.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string filterComponentCssFolder     = "00025-web-service-filter.component.css";
    string filterComponentHtmlFolder    = "00025-web-service-filter.component.html";
    string filterComponentFolder        = "00025-web-service-filter.component.ts";
    string menuItemDataModelFolder      = "00017-menu-item-data.interface.ts";
    string eventEmitterDataModelFolder  = "00018-event-emitter-data.interface.ts";
    string uniqFilterComponentFolder    = "00046-uniq-service-filter.component.ts";

    
    string viewInterfaceFolder      = "01100-.interface.ts";
    string viewInterfacePageFolder  = "01200-Page.interface.ts";
    string viewInterfaceFltFolder   = "01300-Filter.interface.ts";
    string viewServiceFolder        = "01400-.service.ts";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string OnBackBtnSelector            = "on-back-btn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";


    string filterComponentSelectorCommonPart = GetContextComponentSelectorCommonPart(Context, filterComponentFolder);
    string uniqFilterComponentSelectorCommonPart = GetContextComponentSelectorCommonPart(Context, uniqFilterComponentFolder);

    Tuple<ModelViewSerializable, ModelViewForeignKey, ModelViewUniqueKeySerializable, ModelViewSerializable, ModelViewForeignKey> masters = GetM2mMasters(Model, Context);
    if(masters == null) {
        throw new Exception(
" For the " + Model.ViewName + "Could not find two foreign keys with the following requirements. \n"+
" 1. The first foreign key must meet the following requirements: \n" +
" 1.1. The foreign key properties must be very first properties of the primary key for the given View. \n" +
" 1.2. Referenced View of the first foreign key must have unique key in addition to the primary key \n" +
" 2. The second foreign key must meet the following requirements: \n" +
" 2.2. The foreign key properties must be the properties of the primary key for the given View.  \n" +
" 2.3. Referenced View of the second foreign key must have the properties with the same names as the unique key properties mentioned in the (1.2) \n"+
" 3. For all three views the entity properties participating in the foreign key mentioned above must have projection into View properties. \n" +
" 4. Unique key properties of 1.2. must have projection into View properties. \n"
        );
    }
    ModelViewSerializable master2Model = masters.Item4;

#>

<app-<#= uniqFilterComponentSelectorCommonPart #> *ngIf="curIndexMenuItemsData.id === '<#= ActionParamChangeMode#>Primary'"
    [<#= captionSelector #>]="<#= captionPropName #>" 
    (<#= OnBackBtnSelector #>)="<#= OnBackBtnMethodName #>($event)"
    [<#= showBackBtnSelector #>]="<#= showBackBtnPropName #>"
    (on-apply-filter)="onApplyFilter($event)" 
    [<#= externalFilterSelector #>]="<#= externalFilterRsltPropName #>"
    [<#= MaxHeightPropSelector #>]="<#= FilterMaxHeightPropName #>"  
    [filter-defs]="filterDefs"  [show-filter]="<#= ShowFilterPropName #>"
    [<#= containerMenuItemsSelector #>]="<#= containerMenuItemsPropName #>"
    (<#= onContainerMenuItemClickSelector #>)="<#= onContainerMenuItemClickMethodName #>($event)"
    ></app-<#= uniqFilterComponentSelectorCommonPart #>>


<mat-progress-bar *ngIf="inQuery" mode="query"></mat-progress-bar>
<div [style.maxHeight.px]="<#= MaxHeightPropName #>X" [style.overflow-y]="<#= OverflowPropName #>" class="mat-tbl-container">

<mat-radio-group>
<table mat-table [dataSource]="dataSource" <#= matSortIfNeeded(master2Model) #>  >

  <ng-container matColumnDef="<#= SelectColumnDefProperty #>" sticky>
    <th mat-header-cell *matHeaderCellDef> </th>
    <td mat-cell *matCellDef="let e">
      <mat-radio-button (change)="<#= OnSelectRowMethodName #>(e)" [value]="e" [checked]="e === currentRow" ></mat-radio-button>
    </td>
  </ng-container>
  <ng-container matColumnDef="<#= SelectMultColumnDefProperty #>" sticky>
    <th mat-header-cell *matHeaderCellDef>
      <mat-checkbox (change)="$event ? masterToggle() : null"
                    [checked]="<#= multSelectionProperty #>.hasValue() && isAllSelected()"
                    [indeterminate]="<#= multSelectionProperty #>.hasValue() && !isAllSelected()">
      </mat-checkbox>
    </th>
    <td mat-cell *matCellDef="let e">
      <mat-checkbox (click)="$event.stopPropagation()"
                    (change)="$event ? <#= multSelectionProperty #>.toggle(e) : null"
                    [checked]="<#= multSelectionProperty #>.isSelected(e)">
      </mat-checkbox>
    </td>
  </ng-container>


<#
    foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in master2Model.UIListProperties) {
        if (!modelViewUIListPropertySerializable.IsShownInView) {
            continue;
        }
#>
    <ng-container matColumnDef="<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, master2Model) #>" >
        <th mat-header-cell *matHeaderCellDef <#= matSortHeaderIfNeeded(modelViewUIListPropertySerializable, master2Model) #> > <#= GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, master2Model, ShortNameLabelProperty) #> </th>
        <td mat-cell *matCellDef="let e"> {{e.<#= GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, master2Model) #> <#= GetDataPipeEx2(modelViewUIListPropertySerializable, master2Model) #> }} </td>
    </ng-container>
<#
    }
#>

    <ng-container matColumnDef="<#= ActionColumnDefProperty #>" stickyEnd>
        <th mat-header-cell *matHeaderCellDef>
            <button mat-icon-button [matMenuTriggerFor]="tblMenu" >
                <mat-icon>more_vert</mat-icon>
            </button>
            <mat-menu #tblMenu="matMenu">
              <button mat-menu-item  (click)="onFilter()">
                <mat-icon>refresh</mat-icon>
                <span>Refresh table</span>
              </button>
              <button mat-menu-item  (click)="onSettings()">
                <mat-icon>settings</mat-icon>
                <span>Table columns</span>
              </button>
              <button mat-menu-item *ngFor="let m of tableMenuItemsData;"  [disabled]="!m.enabled" (click)="tableCommand(m.id)">
                <mat-icon color="{{m.iconColor}}">{{m.iconName}}</mat-icon>
                <span>{{m.caption}}</span>
              </button>
            </mat-menu>            
        </th>
        <td mat-cell *matCellDef="let e">
            <button mat-icon-button [matMenuTriggerFor]="rowMenu" >
                <mat-icon>more_vert</mat-icon>
            </button>

            <mat-menu #rowMenu="matMenu">
              <button mat-menu-item *ngFor="let m of <#= RowCommandsPropName #>;"  [disabled]="!m.enabled" (click)="rowCommand(e, m.id)">
                <mat-icon color="{{m.iconColor}}">{{m.iconName}}</mat-icon>
                <span>{{m.caption}}</span>
              </button>

            </mat-menu>  
          
        </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="<#= DisplayedColumnsProperty #>; sticky: true"></tr>

    <tr mat-row *matRowDef="let row; columns: <#= DisplayedColumnsProperty #>;"></tr>
</table>
</mat-radio-group>
</div>
<mat-paginator (page)="onPage($event)"  [pageIndex]="currentPageIndex" [pageSize]="currentPageSize" [length]="matPaginatorLen" [pageSize]="matPaginatorPageSize" [pageSizeOptions]="matPaginatorPageSizeOptions"> </mat-paginator> 


<#+

    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    String GetJavaScriptServiceName(ModelViewSerializable model) {
        string  result = model.ViewName + "Service";
        return result.First().ToString().ToUpper() + result.Substring(1);
    }
    string GetPropertyTypeScriptTypeName(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetJavaScriptToStringMethod(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.datetime": 
                result =  ".toString()"; // .toDateString()
                break;
            case "system.guid":
            case "system.string":
                result =  "";
                break;
            default:
                result =  ".toString()";
                break;
        }
        return result;
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetTypeScriptPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    string GetTypeScriptPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    string GetAtributeNamedValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName, string attrProp) {
        if ((sclrProp != null) && (!(string.IsNullOrEmpty(attrProp)))) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (p.PropName == attrProp)).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeUnNamedValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetDataPipe(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result= "";
        if ((prop == null) || (model == null)) {
            return result;
        }
        string attrVal = GetAtributeUnNamedValue(prop, "DataType");
        if(string.IsNullOrEmpty(attrVal)) {
            return result;
        }
        attrVal = attrVal.ToLower();
        if(attrVal.Contains("currency")) {
            return " | currency";
        }
        if(attrVal.Contains("datetime")) {
            return " |  date:'medium'";
        }
        if(attrVal.Contains("date")) {
            return " | date: 'mediumDate'";
        }
        if(attrVal.Contains("time")) {
            return " |  date:'shortTime'";
        }
        return result;
    }
    string GetDataPipeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if((model == null) ||(prop==null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetDataPipe(sclrProp, model);
    }
    string GetTypeScriptPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForFormControl(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string mainFormGroupName) {
        return mainFormGroupName + ".controls['" + GetTypeScriptPropertyNameEx(prop, model) + "']";
    }
    string GetExpressionForInvalid(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string mainFormGroupName) {
        return GetExpressionForFormControl(prop, model, mainFormGroupName) + ".invalid";
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }
    string GetExpressionForControlInvalid(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + ".invalid";
    }

    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }
    string GetComboControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, mv);
    }
    string GetTypeaheadControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, model);
    }


    string GetFormControlHiddenCondition(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string eformModePropName) {
        if ((prop.InputTypeWhenAdd == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenDelete == InputTypeEnum.Hidden)) {
            return "";
        }
        string result= "*ngIf = \"";
        bool setOr = false;
        if (prop.InputTypeWhenAdd == InputTypeEnum.Hidden) {
            result = result + "(" + eformModePropName + "==1)";
            setOr = true;
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==2)";
            setOr = true;
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==3)";
        }
        return result + "\"";
    }
    int GetGreaterThanPercent(int currCnt, int maxCnt, int[] wdths, int inPercentEq100) {
        int result = wdths[1];
        if (currCnt < maxCnt) {
            return wdths[0];
        }
        if (result == 100) {
            result = inPercentEq100;
        }
        return result;
    }
    string GetDisplayAttributeValueString(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    bool HasButton(InputTypeEnum inputType) {
        if (inputType == InputTypeEnum.SearchDialog) {
            return true;
        }
        return false;
    }
    bool IsDateInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName);
    }
    bool IsMemoInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        if (!("System.String".Equals(sclrProp.UnderlyingTypeName) || "String".Equals(sclrProp.UnderlyingTypeName))) {
            return false;
        }
        if(sclrProp.Attributes != null) {
            if(sclrProp.Attributes.Where(a => (a.AttrName == "MaxLength") || (a.AttrName == "StringLength")).Any()) {
                return false;
            }
        }
        if(sclrProp.FAPIAttributes != null) {
            if(sclrProp.FAPIAttributes.Where(a => a.AttrName == "HasMaxLength").Any()) {
                return false;
            }
        }
        return true;
    }


    string GetCommonEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    bool hasMatSort(ModelViewSerializable model) {
        if (model == null) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if(model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting)) {
                    return true;
                }
            }
        }
        return false;
    }
    string matSortIfNeeded(ModelViewSerializable model) {
        if(hasMatSort(model)) {
            return "matSort (matSortChange)=\"onSort($event)\"";
        }
        return "";
    }
    bool hasMatSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string matSortHeaderIfNeeded(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if(hasMatSortHeader(modelViewUIListPropertySerializable, model)) {
            return "mat-sort-header";
        }
        return "";
    }
    string GetContextComponentSelectorCommonPart(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) {
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewPropertyOfVwSerializable aprop = model.AllProperties.Where(p => p.OriginalPropertyName == origPropName).FirstOrDefault();
        if(aprop == null) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => (p.OriginalPropertyName == origPropName) && string.IsNullOrEmpty(p.ForeignKeyName));
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyName == fk.NavigationName) && (p.ForeignKeyName == p.ForeignKeyNameChain));
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, ModelViewSerializable, ModelViewForeignKeySerializable> GetM2mMasters(ModelViewSerializable model, DbContextSerializable context) {
        if ((model == null) || (context == null)) return null;
        if ((model.ForeignKeys == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) return null;
        if (model.PrimaryKeyProperties.Count < 2) return null;
        foreach(ModelViewForeignKeySerializable fk1 in model.ForeignKeys) {
            if ((fk1.ForeignKeyProps == null) || (fk1.PrincipalKeyProps == null)) continue;
            if ((fk1.PrincipalKeyProps.Count != fk1.ForeignKeyProps.Count) || (fk1.ForeignKeyProps.Count >= model.PrimaryKeyProperties)  || (fk1.ForeignKeyProps.Count < 1))  continue;
            bool passed = false;
            for(int i = 0; i < fk1.ForeignKeyProps.Count; i++) {
                passed = fk1.ForeignKeyProps[i].OriginalPropertyName == model.PrimaryKeyProperties[i].OriginalPropertyName;
                if(!passed) break;
                ModelViewPropertyOfVwSerializable sp01 = GetScalarPropByOriginaPropName(model.PrimaryKeyProperties[i].OriginalPropertyName, model);
                passed = sp01 != null;
                if(!passed) break;
            }
            if(!passed) continue; 
            ModelViewSerializable m1 = context.ModelViews.Where(p => p.ViewName == fk1.ViewName).FirstOrDefault();
            if (m1 == null) continue; 
            if ((m1.PrimaryKeyProperties == null) || (m1.UniqueKeys == null) || (m1.AllProperties == null)) continue; 
            if ((m1.PrimaryKeyProperties.Count != fk1.ForeignKeyProps.Count) || (m1.UniqueKeys.Count < 1) || (m1.AllProperties.Count < 1)) continue; 
            for(int i = 0; i < m1.PrimaryKeyProperties.Count; i++) {
                passed = m1.PrimaryKeyProperties[i].OriginalPropertyName == fk1.PrincipalKeyProps[i].OriginalPropertyName;
                if(!passed) break;
                ModelViewPropertyOfVwSerializable sp02 = GetScalarPropByOriginaPropName(m1.PrimaryKeyProperties[i].OriginalPropertyName, m1);
                passed = sp02 != null;
                if(!passed) break;
            }
            if(!passed) continue;

            foreach(ModelViewForeignKeySerializable fk2 in model.ForeignKeys) {
                if(fk2 == fk1) continue;
                if ((fk2.ForeignKeyProps == null) || (fk2.PrincipalKeyProps == null)) continue;
                if ((fk2.PrincipalKeyProps.Count != fk2.ForeignKeyProps.Count) || (fk2.ForeignKeyProps.Count >= model.PrimaryKeyProperties)  || (fk2.ForeignKeyProps.Count < 1))  continue;
                foreach(ModelViewKeyPropertySerializable fkp in fk2.ForeignKeyProps) {
                    passed = model.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName);
                    if(!passed) break;
                    ModelViewPropertyOfVwSerializable sp03 = GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, model);
                    passed = sp03 != null;
                    if(!passed) break;
                }
                if (!passed) continue;
                ModelViewSerializable m2 = context.ModelViews.Where(p => p.ViewName == fk2.ViewName).FirstOrDefault();
                if (m2 == null) continue; 
                if ((m2.ScalarProperties == null) || (m2.PrimaryKeyProperties == null)) continue; 
                if ((m2.ScalarProperties.Count < 1) || (m2.PrimaryKeyProperties.Count < 1)) continue; 
                foreach(ModelViewKeyPropertySerializable pkp in fk2.PrincipalKeyProps) {
                    passed = m2.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == pkp.OriginalPropertyName);
                    if(!passed) break;
                    ModelViewPropertyOfVwSerializable sp04 = GetScalarPropByOriginaPropName(pkp.OriginalPropertyName, m2);
                    passed = sp04 != null;
                    if(!passed) break;
                }
                if (!passed) continue;
                passed = false;
                foreach(ModelViewUniqueKeySerializable uk in m1.UniqueKeys) {
                    passed = uk.UniqueKeyProperties != null;
                    if(!passed) continue;
                    foreach(ModelViewKeyPropertySerializable ukp in uk.UniqueKeyProperties) {
                        ModelViewPropertyOfVwSerializable sp05 = GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, m1);
                        passed = sp05 != null;
                        if(!passed) break;
                        passed = m2.ScalarProperties.Any(p => p.ViewPropertyName == sp05.ViewPropertyName)
                        if(!passed) break;
                    }
                    if (!passed) continue;
                    return new Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, ModelViewUniqueKeySerializable, ModelViewSerializable, ModelViewForeignKeySerializable>(m1,fk1,uk,m2,fk2);
                }
            }
        }
        return null;
    }

#>
