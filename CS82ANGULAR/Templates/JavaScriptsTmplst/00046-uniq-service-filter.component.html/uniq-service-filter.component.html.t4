<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#
    bool localize = Context.Localize;


    string AppearancePropName           = "appearance";
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string fltrFlxPropName         = "fltrFlx";
    string fltrMdPropName          = "fltrMd";
    string fltrSmPropName          = "fltrSm";
    string fltrXsPropName          = "fltrXs";

    string tpAheadVarsPropName          = "tpAheadVars";
    string tpAheadCptnPropName          = "tpAheadCptn";

    string showFilterExPropName         = "showFilterEx";
    string MaxHeightExPropName          = "maxHeightEx";

    string uniqFilterComponentFolder        = "00046-uniq-service-filter.component.ts";
    string uniqFilterComponentClassName = GetComponentClassName(Model, uniqFilterComponentFolder);

#>

<div fxLayout="row" fxLayoutAlign="flex-end space-around"> 
    <label fxFlex fxLayoutAlign="flex-start space-around">{{<#= captionPropName #>}}</label>
    <button mat-icon-button color="primary" (click)="<#= OnBackBtnMethodName #>()" *ngIf="<#= showBackBtnPropName #>"
<# 
    if(localize) {
#>
    i18n-matTooltip="Navigate back to master@@<#= uniqFilterComponentClassName #>.Navigate-back-to-master"  matTooltip="Navigate back to master"> 
<# 
    } else {
#>
    matTooltip="Navigate back to master"> 
<# 
    }
#>
    <mat-icon>arrow_back</mat-icon>
</button>         
<span fxFlex="4%"></span>  
<button mat-icon-button color="primary" (click)="onApplyFilterClicked()" 
<# 
    if(localize) {
#>
    i18n-matTooltip="Apply filter@@<#= uniqFilterComponentClassName #>.Apply-filter"  matTooltip="Apply filter"> 
<# 
    } else {
#>
    matTooltip="Apply filter"> 
<# 
    }
#>

    
    <mat-icon   >refresh</mat-icon>
</button>      
<span fxFlex="2%"></span>     
<ng-template ngFor let-item [ngForOf]="<#= containerMenuItemsPropName #>">
    <span fxFlex="1%"></span>  
    <button mat-icon-button [color]="item.iconColor" (click)="<#= onContainerMenuItemClickMethodName #>(item)" 
        [matTooltip]="item.caption"> 
        <mat-icon>{{item.iconName}}</mat-icon>
    </button>     
</ng-template>            
<span fxFlex="1%"></span>
</div> 

<div *ngIf="<#= showFilterExPropName #>" [style.maxHeight.em]="<#= MaxHeightExPropName #>" [style.overflow]="<#= OverflowPropName #>"> 
    <div fxLayout="row wrap" fxLayoutAlign="space-between" style="margin: 0 15px;">
        <div *ngFor="let flt of webServiceFilters;let i = index" [fxFlex.gt-md]="flt.<#= fltrMdPropName #>" [fxFlex.gt-sm]="flt.<#= fltrSmPropName #>" [fxFlex.gt-xs]="flt.<#= fltrXsPropName #>" [fxFlex]="flt.<#= fltrFlxPropName #>">
<#
    for(int iii = 0; iii < 7;iii++) {
#>
            <ng-template [ngIf]="(flt.fltrDataType !==  'datetime') && (flt.fltrDataType !==  'bool')  && (flt.fltrDataType !==  'boolean')  && (i === <#= iii #>)">
                <mat-form-field  [appearance]="<#= AppearancePropName #>" fxFlex="100">
                    <mat-label>{{flt.fltrCaption}}</mat-label>
                    <input type="text" placeholder="{{flt.fltrCaption}}" matInput [formControl]="flt.fltrValue" [matAutocomplete]="tpAhead<#= iii #>">
                    <mat-autocomplete autoActiveFirstOption #tpAhead<#= iii #>="matAutocomplete" >
                        <mat-option *ngFor="let v of (<#= tpAheadVarsPropName #><#= iii #> | async);" [value]="v">{{ <#= tpAheadCptnPropName #>(v,<#= iii #>) }}</mat-option>
                    </mat-autocomplete>
                    <mat-error *ngIf="flt.fltrValue.invalid">{{getErrorMessage(flt.fltrValue)}}</mat-error>
                    <mat-hint align="end" *ngIf="flt.fltrMaxLen">{{flt.fltrValue.value?.length || 0}}/{{flt.fltrMaxLen}}</mat-hint>
                </mat-form-field>
            </ng-template>
<#
    }
#>

            <ng-template [ngIf]="flt.fltrDataType === 'boolean' || flt.fltrDataType === 'bool'">
                <mat-form-field [appearance]="<#= AppearancePropName #>" fxFlex="100">
                    <input matInput style="display: none">
                    <mat-checkbox [formControl]="flt.fltrValue"> {{flt.fltrCaption}} </mat-checkbox>
                </mat-form-field>
            </ng-template>

            <ng-template [ngIf]="flt.fltrDataType === 'datetime'">
                <mat-form-field [appearance]="<#= AppearancePropName #>" fxFlex="100">
                    <mat-label>{{flt.fltrCaption}}</mat-label>
                    <input matNativeControl [matDatepicker]="apicker"  placeholder="{{flt.fltrCaption}}" [formControl]="flt.fltrValue" [min]="flt.fltrMin" [max]="flt.fltrMax" > 
                    <mat-datepicker-toggle matSuffix [for]="apicker"></mat-datepicker-toggle>
                    <mat-datepicker #apicker></mat-datepicker>
                    <mat-error *ngIf="flt.fltrValue.invalid">{{getErrorMessage(flt.fltrValue)}}</mat-error>
                </mat-form-field>
            </ng-template>
        </div>
    </div>
</div>

