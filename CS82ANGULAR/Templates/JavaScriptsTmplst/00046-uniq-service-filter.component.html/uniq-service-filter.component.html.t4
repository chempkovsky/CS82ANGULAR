<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string AppearancePropName           = "appearance";
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string fltrFlxPropName         = "fltrFlx";
    string fltrMdPropName          = "fltrMd";
    string fltrSmPropName          = "fltrSm";
    string fltrXsPropName          = "fltrXs";


#>

<div fxLayout="row" fxLayoutAlign="flex-end space-around"> 
    <label fxFlex fxLayoutAlign="flex-start space-around">{{<#= captionPropName #>}}</label>
    <button mat-icon-button color="primary" (click)="<#= OnBackBtnMethodName #>()" *ngIf="<#= showBackBtnPropName #>"
    matTooltip="Navigate back to master"> 
    <mat-icon>arrow_back</mat-icon>
</button>         
<span fxFlex="4%"></span>  
<button mat-icon-button color="primary" (click)="onApplyFilterClicked()" 
    matTooltip="Apply filter"> 
    <mat-icon   >refresh</mat-icon>
</button>      
<span fxFlex="2%"></span>     
<ng-template ngFor let-item [ngForOf]="<#= containerMenuItemsPropName #>">
    <span fxFlex="1%"></span>  
    <button mat-icon-button [color]="item.iconColor" (click)="<#= onContainerMenuItemClickMethodName #>(item)" 
        [matTooltip]="item.caption"> 
        <mat-icon>{{item.iconName}}</mat-icon>
    </button>     
</ng-template>            
<span fxFlex="1%"></span>
</div> 

<div *ngIf="showFilter" [style.maxHeight.em]="<#= MaxHeightPropName #>X" [style.overflow]="<#= OverflowPropName #>"> 
    <div fxLayout="row wrap" fxLayoutAlign="space-between" style="margin: 0 15px;">
        <div *ngFor="let flt of webServiceFilters;" [fxFlex.gt-md]="flt.<#= fltrMdPropName #>" [fxFlex.gt-sm]="flt.<#= fltrSmPropName #>" [fxFlex.gt-xs]="flt.<#= fltrXsPropName #>" [fxFlex]="flt.<#= fltrFlxPropName #>">
            <ng-template [ngIf]="flt.fltrDataType !==  'datetime'">
                <mat-form-field  [appearance]="<#= AppearancePropName #>" fxFlex="100">
                    <mat-label>{{flt.fltrCaption}}</mat-label>
                    <input  matInput placeholder="{{flt.fltrCaption}}" [formControl]="flt.fltrValue" [maxlength]="flt.fltrMaxLen">
                    <mat-error *ngIf="flt.fltrValue.invalid">{{getErrorMessage(flt.fltrValue)}}</mat-error>
                    <mat-hint align="end" *ngIf="flt.fltrMaxLen">{{flt.fltrValue.value?.length || 0}}/{{flt.fltrMaxLen}}</mat-hint>
                </mat-form-field>
            </ng-template>
            <ng-template [ngIf]="flt.fltrDataType === 'datetime'">
                <mat-form-field [appearance]="<#= AppearancePropName #>" fxFlex="100">
                    <mat-label>{{flt.fltrCaption}}</mat-label>
                    <input matNativeControl [matDatepicker]="apicker"  placeholder="{{flt.fltrCaption}}" [formControl]="flt.fltrValue" [min]="flt.fltrMin" [max]="flt.fltrMax" > 
                    <mat-datepicker-toggle matSuffix [for]="apicker"></mat-datepicker-toggle>
                    <mat-datepicker #apicker></mat-datepicker>
                    <mat-error *ngIf="flt.fltrValue.invalid">{{getErrorMessage(flt.fltrValue)}}</mat-error>
                </mat-form-field>
            </ng-template>
        </div>
    </div>
</div>