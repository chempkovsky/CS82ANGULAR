<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    string viewModelPrimaryInterfaceFolder      = "00600-view-model-primary.interface.ts";
    string viewModelPrimaryInterfaceClassName   = GetModelClassName(Model, viewModelPrimaryInterfaceFolder);

    string CurrentViewNameFieldName         = "CurrentViewName";
    string ClientViewNameFieldName          = "ClientViewName";
    string DirectNavigationFieldName        = "DirectNavigation";
    string IsTopDetailFieldName             = "IsTopDetail";
    string IsDefinedFieldName               = "IsDefined";
    string ValuesFieldName                  = "Values";
    string ClientToMasterFieldsMapFieldName = "ClientToMasterFieldsMap";
    string MasterToClientFieldsMapFieldName = "MasterToClientFieldsMap";
    string OnDetailChangedPropName          = "OnDetailChanged";
    string OnMasterChangedPropName          = "OnMasterChanged";
    string OnIsDefinedChangedPropName       = "OnIsDefinedChanged";
    string submitOnDetailChangedMethodName  = "submitOnDetailChanged";
    string submitOnMasterChangedMethodName  = "submitOnMasterChanged";
    string LengthFieldName                  = "Length";
    string KeysFieldName                    = "Keys";
    string ValueFieldName                   = "Value";
    string ClearMethodName                  = "clear";


#>

import { EventEmitter } from "@angular/core";

export interface <#= viewModelPrimaryInterfaceClassName #> {
    get<#= CurrentViewNameFieldName #>(): string;
    get<#= ClientViewNameFieldName #>(): string | any;
    get<#= DirectNavigationFieldName #>(): string | any;
    get<#= IsTopDetailFieldName #>(): boolean;
    get<#= IsDefinedFieldName #>(): boolean;
    get<#= LengthFieldName #>(): number;
    get<#= KeysFieldName #>(): string[];
    get<#= ValueFieldName #>(key: string): any;
//    set<#= ValueFieldName #>(key: string, value: any): void;
//    <#= ClearMethodName #>(): void;
    <#= OnDetailChangedPropName #>: EventEmitter<<#= viewModelPrimaryInterfaceClassName #>>;
    <#= OnMasterChangedPropName #>: EventEmitter<<#= viewModelPrimaryInterfaceClassName #>>;
    <#= OnIsDefinedChangedPropName #>: EventEmitter<<#= viewModelPrimaryInterfaceClassName #>>;
    <#= submitOnDetailChangedMethodName #>(v: <#= viewModelPrimaryInterfaceClassName #>): void;
    <#= submitOnMasterChangedMethodName #>(v: <#= viewModelPrimaryInterfaceClassName #>): void
}

<#+
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
#>