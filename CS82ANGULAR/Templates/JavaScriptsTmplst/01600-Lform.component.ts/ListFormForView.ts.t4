<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string OperatorSufix        = "Oprtr";
    string EqualOperator        = "eq";

    string ActionParamViewMode          = "view";
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";

    // WebApi service's method names

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";
    string src2destMethodName       = "src2dest";


    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string showAddFltItemSelector   = "show-add-flt-item";
    string showAddFltItemPropName   = "showAddFltItem";
    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string CanViewSelector          = "can-view";
    string CanViewPropName          = "canView";
    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";


    Dictionary<string, string> RegExps = new Dictionary<string, string>() {
            { "RegExpGuid"       , @"/(?im)^[{(]?[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]?$/" },
            { "RegExpInteger"    , @"/^[-+]?\d+$/" },
            { "RegExpFloat"      , @"/^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/" },
            { "RegExpEmail"      , @"/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/" },
            { "RegExpCurrency"   , @"/(?=.*?\d)^\$?(([1-9]\d{0,2}(,\d{3})*)|\d+)?(\.\d{1,2})?$/" }
            };

    string ComboSufix               = "CmbCntrl";
    string ButtonSufix              = "BttnItm";
    string TypeaheadSufix           = "TphdCntrl";

    string TypeaheadAddDisplaySufix = "AddDsplFn";
    string TypeaheadUpdDisplaySufix = "UpdDsplFn";
    string TypeaheadDelDisplaySufix = "DelDsplFn";

    string SearchClickSufix         = "SrchClck";

    string formServicePrefix        = "frmSrv";
    string formRootService          = "frmRootSrv";

    string MainFormGroupName        = "mainFormGroup";

    string EformModeSelector        = "eform-mode";
    string EformModePropName        = "eformMode";

    string selectedRowSelector        = "selected-row";
    string selectedRowPropName        = "selectedRow";

    string currentRowPropName        = "currentRow";
    string OnSelectRowMethodName     = "onSelectRow";

    
    string FormControlModelSelector     = "eform-control-model";
    string FormControlModelPropName     = "eformControlModel";
    string FormControlNewModelPropName  = "eformNewControlModel";
    

    string RowCommandsSelector      = "row-commands";
    string RowCommandsPropName      = "rowCommands";
    string TableCommandsSelector    = "table-commands";
    string TableCommandsPropName    = "tableCommands";

    string OnRowCommandSelector         = "on-row-command";
    string OnRowCommandPropName         = "onRowCommand";
    string OnTableCommandSelector       = "on-table-command";
    string OnTableCommandPropName       = "onTableCommand";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";

    List<string> FKViewsDict =  GetFKViewsList(Model, Context, new List<string>());
    if (! FKViewsDict.Contains(Model.ViewName) ) {
        FKViewsDict.Add(Model.ViewName);
    }

    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";

    string eventEmitterDataModelFolder  = "00018-event-emitter-data.interface.ts";
    string menuItemDataModelFolder      = "00017-menu-item-data.interface.ts";
    string eventEmitterPubModelFolder   = "00019-event-emitter-pub.interface.ts";
    string itemHeightDataModelFolder    = "00016-item-height-data.interface.ts";

    string filterModelFolder            = "00021-web-service-filter.interface.ts";
    string filterDefModelFolder         = "00022-web-service-filter-def.interface.ts";
    string filterOperatorModelFolder    = "00023-web-service-filter-operator.interface.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string filterComponentCssFolder     = "00025-web-service-filter.component.css";
    string filterComponentHtmlFolder    = "00025-web-service-filter.component.html";
    string filterComponentFolder        = "00025-web-service-filter.component.ts";


    string messageDialogInterfaceFolder = "00037-message-dialog.interface.ts";
    string messageDialogComponentFolder = "00038-message-dialog.component.ts";


    string viewInterfaceFolder          = "01100-.interface.ts";
    string viewInterfacePageFolder      = "01200-Page.interface.ts";
    string viewInterfaceFltFolder       = "01300-Filter.interface.ts";
    string viewServiceFolder            = "01400-.service.ts";



    string sformComponentFolder         = "01420-Sform.component.ts";


    string viewInterfaceVDlgFolder      = "01510-Vdlg.interface.ts";
    string vdlgComponentFolder          = "01520-Vdlg.component.ts";

    string viewInterfaceADlgFolder      = "01512-Adlg.interface.ts";
    string adlgComponentFolder          = "01522-Adlg.component.ts";

    string viewInterfaceUDlgFolder      = "01514-Udlg.interface.ts";
    string udlgComponentFolder          = "01524-Udlg.component.ts";

    string viewInterfaceDDlgFolder      = "01516-Ddlg.interface.ts";
    string ddlgComponentFolder          = "01526-Ddlg.component.ts";


    string lformCssFolder               = "01600-Lform.component.css";
    string lformHtmlFolder              = "01600-Lform.component.html";
    string lformComponentFolder         = "01600-Lform.component.ts";

    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string showMultiSelectedRowSelector = "show-multi-selected-row";
    string showMultiSelectedRowPropName = "showMultiSelectedRow";
    string multiSelectedRowSelector     = "multi-selected-row";
    string multiSelectedRowPropName     = "multiSelectedRow";
    string onMultiSelectedRowPropName   = "onMultiSelectedRow";
    string currentMultiRowPropName      = "currentMultiRow";

    string ActionColumnDefProperty      = "menuAction";
    string SelectColumnDefProperty      = "selectAction";
    string DisplayedColumnsProperty     = "displayedColumns";
    string MatPaginatorPageSize         = "10";
    string MatPaginatorPageSizeOptions  = "[10, 25, 50, 100]";

    string AppSettingServicePropName            = "appGlblSettings";
    string appSettingServiceClassName           = GetCommonServiceClassName(Context, appSettingServiceFolder);


    string componentSelectorCommonPart = GetComponentSelectorCommonPart(Model, lformComponentFolder);

    string serviceClassName = GetServiceClassName(Model, viewServiceFolder);
    string componentClassName = GetComponentClassName(Model, lformComponentFolder);
    string searchComponentClassName = GetComponentClassName(Model, sformComponentFolder);

    string messageDialogComponentClassName = GetContextComponentClassName(Context, messageDialogComponentFolder);
    string messageDialogInterfaceName = GetModelClassName(Context, messageDialogInterfaceFolder);

    string filterModelClassName = GetModelClassName(Context, filterModelFolder);
    string filterDefModelClassName = GetModelClassName(Context, filterDefModelFolder);
    string filterOperatorModelClassName = GetModelClassName(Context, filterOperatorModelFolder);
    string filterResultModelClassName = GetModelClassName(Context, filterResultModelFolder);
    string filterComponentClassName = GetContextComponentClassName(Context, filterComponentFolder);

    string eventEmitterDataModelClassName   = GetModelClassName(Context, eventEmitterDataModelFolder);
    string menuItemDataModelClassName   = GetModelClassName(Context, menuItemDataModelFolder);
    string eventEmitterPubModelClassName    = GetModelClassName(Context, eventEmitterPubModelFolder);
    string itemHeightDataModelClassName   = GetModelClassName(Context, itemHeightDataModelFolder);


    string vdlgComponentClassName = GetComponentClassName(Model, vdlgComponentFolder);
    string adlgComponentClassName = GetComponentClassName(Model, adlgComponentFolder);
    string udlgComponentClassName = GetComponentClassName(Model, udlgComponentFolder);
    string ddlgComponentClassName = GetComponentClassName(Model, ddlgComponentFolder);

#>
import { Component, OnInit, Input, Output, EventEmitter, ViewChild, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { FormControl, Validators, ValidatorFn } from '@angular/forms';
import { MatSelectChange } from '@angular/material/select';
import { MatDialog } from '@angular/material/dialog';
import { firstValueFrom } from 'rxjs';

import { MatPaginator, PageEvent } from '@angular/material/paginator';
import { MatSort, Sort } from '@angular/material/sort';
import { MatRow } from '@angular/material/table';
import { ProgressBarMode } from '@angular/material/progress-bar';


import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderName(Model, Context,  appSettingServiceFolder, lformComponentFolder)#>';
import { <#= filterModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterModelFolder, lformComponentFolder)#>';
import { <#= filterDefModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterDefModelFolder, lformComponentFolder)#>';
import { <#= filterOperatorModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterOperatorModelFolder, lformComponentFolder)#>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterResultModelFolder, lformComponentFolder)#>';
// import { <#= filterComponentClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterComponentFolder, lformComponentFolder)#>';
import { <#= searchComponentClassName #> } from '<#=  GetFolderName(Model, sformComponentFolder, lformComponentFolder) #>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  eventEmitterDataModelFolder, lformComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  menuItemDataModelFolder, lformComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderName(Model, Context, eventEmitterPubModelFolder, lformComponentFolder)#>';
import { <#= itemHeightDataModelClassName #> } from '<#= GetCommonFolderName(Model, Context, itemHeightDataModelFolder, lformComponentFolder)#>';
import { <#= messageDialogInterfaceName #> } from '<#=  GetCommonFolderName(Model, Context,  messageDialogInterfaceFolder, lformComponentFolder)#>';
import { <#= messageDialogComponentClassName #> } from '<#=  GetCommonFolderName(Model, Context,  messageDialogComponentFolder, lformComponentFolder)#>';


<# 
    {
        string viewNm = Model.ViewName;
#>
import { <#= GetInterfaceName(Model) #> } from '<#=  GetCrossComponentFolderName(Model, lformComponentFolder, Context, viewNm, viewInterfaceFolder) #>';
import { <#= GetInterfacePageName(Model) #> } from '<#= GetCrossComponentFolderName(Model, lformComponentFolder, Context, viewNm, viewInterfacePageFolder) #>';
import { <#= GetInterfaceFilterName(Model) #> } from '<#=  GetCrossComponentFolderName(Model, lformComponentFolder, Context, viewNm, viewInterfaceFltFolder) #>';
import { <#= GetServiceClassName(Model, viewServiceFolder) #> } from '<#=  GetCrossComponentFolderName(Model, lformComponentFolder, Context, viewNm, viewServiceFolder) #>';
<# 
    }
#>

<#
    if(Model.IsWebApiSelectOneByPrimarykey) {
#>
import { <#=  GetInterfaceVDlgName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceVDlgFolder, lformComponentFolder)#>';
import { <#=  vdlgComponentClassName #> } from '<#= GetFolderName(Model, vdlgComponentFolder, lformComponentFolder) #>';
<#
    }
    if(Model.IsWebApiAdd) {
#>
import { <#=  GetInterfaceADlgName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceADlgFolder, lformComponentFolder)#>';
import { <#=  adlgComponentClassName #> } from '<#= GetFolderName(Model, adlgComponentFolder, lformComponentFolder) #>';
<#
    }
    if(Model.IsWebApiUpdate) {
#>
import { <#=  GetInterfaceUDlgName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceUDlgFolder, lformComponentFolder)#>';
import { <#=  udlgComponentClassName #> } from '<#= GetFolderName(Model, udlgComponentFolder, lformComponentFolder) #>';
<#
    }
    if(Model.IsWebApiDelete) {
#>
import { <#=  GetInterfaceDDlgName(Model) #> } from '<#= GetFolderName(Model, viewInterfaceDDlgFolder, lformComponentFolder)#>';
import { <#=  ddlgComponentClassName #> } from '<#= GetFolderName(Model, ddlgComponentFolder, lformComponentFolder) #>';
<#
    }
#>

@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, lformHtmlFolder, lformComponentFolder)#>.html',
  styleUrls: ['<#=  GetFolderName(Model, lformCssFolder, lformComponentFolder)#>.css']
})
export class <#= componentClassName #> implements OnInit, AfterViewInit, <#= eventEmitterPubModelClassName #>, <#= itemHeightDataModelClassName #> {

    @Input('<#= showMultiSelectedRowSelector #>') <#= showMultiSelectedRowPropName #>: boolean = true;

    @Output('<#= multiSelectedRowSelector #>') <#= multiSelectedRowPropName #>: EventEmitter<Array<<#= GetInterfaceName(Model) #>>> = new EventEmitter<Array<<#= GetInterfaceName(Model) #>>>();
    <#= onMultiSelectedRowPropName #>(e: Array<<#= GetInterfaceName(Model) #>>): void {
        this.<#= multiSelectedRowPropName #>.emit(e);
    }

    @Input('<#= captionSelector #>') <#= captionPropName #>: string = '<#= Model.Title #>';

    @Input('<#= FilterMaxHeightPropSelector #>')  <#= FilterMaxHeightPropName #>: number | any = null;
    @Input('<#= MaxHeightPropSelector #>') <#= MaxHeightPropName #>: number | any = null;

    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= eventEmitterDataModelClassName #>)  {
        this.<#= onContainerMenuItemClickEmitter #>.emit(v);
    }


    isOnInitCalled: boolean = false;
    @Input('<#= ShowFilterSelector #>') <#= ShowFilterPropName #>: boolean = true;
    @Input('<#= showAddFltItemSelector #>') <#= showAddFltItemPropName #>: boolean = true;

    protected _<#= RowCommandsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    @Input('<#= RowCommandsSelector #>')  
        get <#= RowCommandsPropName #>():Array<<#= menuItemDataModelClassName #>> {
            return this._<#= RowCommandsPropName #>;
        }
        set <#= RowCommandsPropName #>(v :Array<<#= menuItemDataModelClassName #>>) {
            if (typeof v === 'undefined') {
                this._<#= RowCommandsPropName #> = [];
            } else if (!Array.isArray(v)) {
                this._<#= RowCommandsPropName #> = [];
            } else {
                this._<#= RowCommandsPropName #> =  v;
            }
            if(this.isOnInitCalled) {
                this.onRowMenuItemsData();
                this.cd.detectChanges();
            }
        }

    protected _<#= TableCommandsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    @Input('<#= TableCommandsSelector #>')  
        get <#= TableCommandsPropName #>(): Array<<#= menuItemDataModelClassName #>> {
            return this._<#= TableCommandsPropName #>;
        }
        set <#= TableCommandsPropName #>(v :Array<<#= menuItemDataModelClassName #>>) {
            if (typeof v === 'undefined') {
                this._<#= TableCommandsPropName #> = [];
            } else if (!Array.isArray(v)) {
                this._<#= TableCommandsPropName #> = [];
            } else {
                this._<#= TableCommandsPropName #> =  v;
            }
            if(this.isOnInitCalled) {
                this.onTableMenuItemsData();
                this.cd.detectChanges();
            }
        }
    

    @Input('<#= HiddenFilterSelector #>') <#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>>|any = [];


    public <#= currentRowPropName #>: <#= GetInterfaceName(Model) #> | null = null;
    @Output('<#= selectedRowSelector #>') <#= selectedRowPropName #>: EventEmitter<<#= GetInterfaceName(Model) #>> = new EventEmitter<<#= GetInterfaceName(Model) #>>();

    protected _<#= CanViewPropName #>: boolean = true;
    @Input('<#= CanViewSelector #>') 
        get <#= CanViewPropName #>(): boolean|any {
            return this._<#= CanViewPropName #>;
        }
        set <#= CanViewPropName #>(v: boolean|any) {
<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
#>
            if(typeof v === 'undefined') return;
            if(v === null) return;
            if (v !== this._<#= CanViewPropName #>) {
                this._<#= CanViewPropName #> = v;
                if(this.isOnInitCalled) {
                    this.tableMenuItemsData[0].enabled = v;
                    this.cd.detectChanges();
                }
            }
<# 
    }
#>
        }

    protected _<#= CanAddPropName #>: boolean = true;
    @Input('<#= CanAddSelector #>') 
        get <#= CanAddPropName #>(): boolean|any {
            return this._<#= CanAddPropName #>;
        }
        set <#= CanAddPropName #>(v: boolean|any) {
<# 
    if (Model.IsWebApiAdd) { 
#>
            if(typeof v === 'undefined') return;
            if(v === null) return;
            if (v !== this._<#= CanAddPropName #>) {
                this._<#= CanAddPropName #> = v;
                if(this.isOnInitCalled) {
                    this.tableMenuItemsData[0].enabled = v;
                    this.cd.detectChanges();
                }
            }
<# 
    }
#>
        }
    
    protected _<#= CanUpdPropName #>: boolean = true;
    @Input('<#= CanUpdSelector #>') 
        get <#= CanUpdPropName #>(): boolean|any {
            return this._<#= CanUpdPropName #>;
        }
        set <#= CanUpdPropName #>(v: boolean|any) {
<# 
    if (Model.IsWebApiUpdate) { 
#>

            if(typeof v === 'undefined') return;
            if(v === null) return;
            if (v !== this._<#= CanUpdPropName #>) {
                this._<#= CanUpdPropName #> = v;
                if(this.isOnInitCalled) {
                    this.rowMenuItemsData[0].enabled = v;
                    this.cd.detectChanges();
                }
            }
<# 
    }
#>
        }

    protected _<#= CanDelPropName #>: boolean = true;
    @Input('<#= CanDelSelector #>') 
        get <#= CanDelPropName #>(): boolean|any {
            return this._<#= CanDelPropName #>;
        }
        set <#= CanDelPropName #>(v: boolean|any) {
<# 
    if (Model.IsWebApiDelete) { 
#>
            if(typeof v === 'undefined') return;
            if(v === null) return;
            if (v !== this._<#= CanDelPropName #>) {
                this._<#= CanDelPropName #> = v;
                if(this.isOnInitCalled) {
                    this.rowMenuItemsData[1].enabled = v;
                    this.cd.detectChanges();
                }
            }
<# 
    }
#>
        }


    rowMenuItemsData = [
          {id: '<#= ActionParamUpdateMode #>', caption: 'Modify Item', iconName: 'edit', iconColor: 'primary', enabled: true},
          {id: '<#= ActionParamDeleteMode #>', caption: 'Delete Item', iconName: 'delete_forever', iconColor: 'warn', enabled: true},
          {id: '<#= ActionParamViewMode #>', caption: 'View Item', iconName: 'preview', iconColor: 'primary', enabled: true},
        ];
    tableMenuItemsData = [
        {id: '<#= ActionParamAddMode #>', caption: 'Add Item', iconName: 'create', iconColor: 'primary', enabled: true},
        {id: '<#= ActionParamDeleteMode #>', caption: 'Delete Selected', iconName: 'delete_forever', iconColor: 'warn', enabled: true},
      ];

    constructor(private  <#= formRootService #>: <#= serviceClassName #>, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, public dialog: MatDialog, private cd: ChangeDetectorRef) {
    }
    permMask: number = 0;
    ngOnInit() {
        this.permMask = this.<#= AppSettingServicePropName #>.getViewModelMask('<#= Model.ViewName #>');
    
        this.onRowMenuItemsData();
        this.onTableMenuItemsData();
        this.isOnInitCalled = true;
    }

    onRowMenuItemsData() {
        let tmp: Array<<#= menuItemDataModelClassName #>> = [
          {id: '<#= ActionParamUpdateMode #>', caption: 'Modify Item', iconName: 'edit', iconColor: 'primary', enabled: true },
          {id: '<#= ActionParamDeleteMode #>', caption: 'Delete Item', iconName: 'delete_forever', iconColor: 'warn', enabled: true},
          {id: '<#= ActionParamViewMode #>', caption: 'View Item', iconName: 'preview', iconColor: 'primary', enabled: true },
        ];
        tmp = tmp.concat(this._<#= RowCommandsPropName #>);
        tmp[0].enabled = this._<#= CanUpdPropName #> && ((this.permMask & 4) === 4)  <# if (!Model.IsWebApiUpdate) { #> && false <# } #>;
        tmp[1].enabled = this._<#= CanDelPropName #> && ((this.permMask & 2) === 2) <# if (!Model.IsWebApiDelete) { #> && false <# } #>;
        tmp[2].enabled = this._<#= CanViewPropName #> <# if (!Model.IsWebApiSelectOneByPrimarykey) { #> && false <# } #>;
        this.rowMenuItemsData = tmp;
    }
    onTableMenuItemsData() {
        let tmp: Array<<#= menuItemDataModelClassName #>> = [
            {id: '<#= ActionParamAddMode #>', caption: 'Add Item', iconName: 'create', iconColor: 'primary', enabled: true},
            {id: '<#= ActionParamDeleteMode #>', caption: 'Delete Item', iconName: 'delete_forever', iconColor: 'warn', enabled: true},
        ];
        tmp = tmp.concat(this._<#= TableCommandsPropName #>);
        tmp[0].enabled = this._<#= CanAddPropName #> && ((this.permMask & 8) === 8) <# if (!Model.IsWebApiAdd) { #> && false <# } #>;
        tmp[1].enabled = this._<#= CanDelPropName #> && ((this.permMask & 2) === 2) <# if (!Model.IsWebApiDelete) { #> && false <# } #>;
        this.tableMenuItemsData = tmp;
    }
    
    ngAfterViewInit() {
    }    


    <#= OnSelectRowMethodName #>(e: <#= GetInterfaceName(Model) #>|any) {
        this.<#= selectedRowPropName #>.emit(e);
    }


    onView(e: <#= GetInterfaceName(Model) #>) {
<#
    if(Model.IsWebApiSelectOneByPrimarykey) {
#>
        let locdata: <#=  GetInterfaceVDlgName(Model) #> = {
            title: 'View item',
            <#= HiddenFilterPropName #>: this.<#= HiddenFilterPropName #>,
            <#= FormControlModelPropName #>: e,
            <#= FormControlNewModelPropName #>: null
        };
        let w: string = this.<#= AppSettingServicePropName #>.getDialogWidth('<#= Model.ViewName #>');
        let mw: string = this.<#= AppSettingServicePropName #>.getDialogMaxWidth('<#= Model.ViewName #>');
        let dialogRef = this.dialog.open(<#=  vdlgComponentClassName #>, {
              data: locdata,
              maxWidth: mw,
              width: w,
            });
        dialogRef.afterClosed().subscribe(rslt => {
        });
<#
    }
#>
    }


    onAdd(sender: <#= searchComponentClassName #>) {
<#
    if(Model.IsWebApiAdd) {
#>
        let locdata: <#=  GetInterfaceADlgName(Model) #> = {
            title: 'Add item',
            <#= HiddenFilterPropName #>: this.<#= HiddenFilterPropName #>,
            <#= FormControlModelPropName #>: null,
            <#= FormControlNewModelPropName #>: null
        };
        let w: string = this.<#= AppSettingServicePropName #>.getDialogWidth('<#= Model.ViewName #>');
        let mw: string = this.<#= AppSettingServicePropName #>.getDialogMaxWidth('<#= Model.ViewName #>');
        let dialogRef = this.dialog.open(<#=  adlgComponentClassName #>, {
              data: locdata,
              maxWidth: mw,
              width: w,
            });
        dialogRef.afterClosed().subscribe(rslt => {
            if (!(typeof rslt === 'undefined')) {
                if (!(rslt === null)) {
                    if (!( typeof rslt.<#= FormControlNewModelPropName #> === 'undefined') ) {
                        if (!( rslt.<#= FormControlNewModelPropName #> === null) ) {
                            if (!Array.isArray(sender.dataSource)) {
                                sender.dataSource = [];
                            }
                            sender.dataSource.splice(0, 0, rslt.eformNewControlModel);
                            sender.dataSource = sender.dataSource.slice(0);
                            let isNDef = true;
                            if (!(typeof sender.currentRow === 'undefined')) {
                                if (!(sender.currentRow === null)) {
                                    isNDef = false;
                                }
                            }
                            if(isNDef) {
                                sender.<#= OnSelectRowMethodName #>(rslt.eformNewControlModel);
                            }
                        }
                    }
                }
            }
        });
<#
    }
#>
    }

    onEdit(e: <#= GetInterfaceName(Model) #>) {
<#
    if(Model.IsWebApiUpdate) {
#>
        let locdata: <#=  GetInterfaceUDlgName(Model) #> = {
            title: 'Modify item',
            <#= HiddenFilterPropName #>: this.<#= HiddenFilterPropName #>,
            <#= FormControlModelPropName #>: e,
            <#= FormControlNewModelPropName #>: null
        };
        let w: string = this.<#= AppSettingServicePropName #>.getDialogWidth('<#= Model.ViewName #>');
        let mw: string = this.<#= AppSettingServicePropName #>.getDialogMaxWidth('<#= Model.ViewName #>');
        let dialogRef = this.dialog.open(<#=  udlgComponentClassName #>, {
              data: locdata,
              maxWidth: mw,
              width: w,
            });
        dialogRef.afterClosed().subscribe(rslt => {
            if (!(typeof rslt === 'undefined')) {
                if (!(rslt === null)) {
                    if (!((typeof rslt.<#= FormControlModelPropName #> === 'undefined') || (typeof rslt.<#= FormControlNewModelPropName #> === 'undefined'))) {
                        if (!((rslt.<#= FormControlModelPropName #> === null) || (rslt.<#= FormControlNewModelPropName #> === null))) {
                            this.<#= formRootService #>.<#= src2destMethodName #>(rslt.<#= FormControlNewModelPropName #>, rslt.<#= FormControlModelPropName #>);
                        }
                    }
                }
            }
        });
<#
    }
#>
    }

    onDelete(e: <#= GetInterfaceName(Model) #> , sender: <#= searchComponentClassName #> ) {
<#
    if(Model.IsWebApiDelete) {
#>
        let locdata: <#=  GetInterfaceDDlgName(Model) #> = {
            title: 'Delete item',
            <#= HiddenFilterPropName #>: this.<#= HiddenFilterPropName #>,
            <#= FormControlModelPropName #>: e,
            <#= FormControlNewModelPropName #>: null
        };
        let w: string = this.<#= AppSettingServicePropName #>.getDialogWidth('<#= Model.ViewName #>');
        let mw: string = this.<#= AppSettingServicePropName #>.getDialogMaxWidth('<#= Model.ViewName #>');
        let dialogRef = this.dialog.open(<#=  ddlgComponentClassName #>, {
              data: locdata,
              maxWidth: mw,
              width: w,
            });
        dialogRef.afterClosed().subscribe(rslt => {
            if (!(typeof rslt === 'undefined')) {
                if (!(rslt === null)) {
                    if (!((typeof rslt.<#= FormControlModelPropName #> === 'undefined') || (typeof rslt.<#= FormControlNewModelPropName #> === 'undefined'))) {
                        if (!((rslt.<#= FormControlModelPropName #> === null) || (rslt.<#= FormControlNewModelPropName #> === null))) {
                            if (!Array.isArray(sender.dataSource)) {
                                sender.dataSource = [];
                            }
                            let i: number = sender.dataSource.indexOf(rslt.<#= FormControlModelPropName #>);
                            if (i > -1) {
                                if (!(sender.currentRow === null)) {
                                    if (sender.currentRow === rslt.eformControlModel) {
                                        if (i > 0) {
                                            sender.<#= OnSelectRowMethodName #>(sender.dataSource[i-1]);
                                        } else if (i < sender.dataSource.length-1) {
                                            sender.<#= OnSelectRowMethodName #>(sender.dataSource[i+1]);
                                        } else {
                                            sender.<#= OnSelectRowMethodName #>(null);
                                        }
                                    }
                                }
                                sender.dataSource.splice(i, 1);
                                sender.dataSource = sender.dataSource.slice(0);
                            } 
                        }
                    }
                }
            }
        });
<#
    }
#>
    }

    @Output('on-row-command') onRowCommand: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Output('on-table-command') onTableCommand: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();

    onDeleteMultiple(sender: <#= searchComponentClassName #>) {
<#
    if(Model.IsWebApiDelete) {
#>
        let locdata: <#=  messageDialogInterfaceName #> = {
            title: 'Delete Items',
            message: 'Delete Selected Items ?',
            iconname: 'warning',
            iconcolor: 'warn'
        };
        let dialogRef = this.dialog.open(<#=  messageDialogComponentClassName #>, {
              data: locdata,
            });
        dialogRef.afterClosed().subscribe(async rslt => {
            if (typeof rslt === 'undefined') return;
            if (rslt === null) return;
            let currRowsCp: Array<<#= GetInterfaceName(Model) #>> = sender.<#= currentMultiRowPropName #>.slice();
            let deletedRows: Array<<#= GetInterfaceName(Model) #>> = [];
            for(let row of currRowsCp) {
                try {
                    // let data: <#= GetInterfaceName(Model) #>  =  
                    await firstValueFrom<<#= GetInterfaceName(Model) #>>(this.<#= formRootService #>.<#= DeleteOneMethodName #>(<# 
                    {
                        int counter = 0;
                        List<ModelViewPropertyOfVwSerializable> primKeys = GetPrimaryKeyProps(Context, Model.ViewName);
                        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                            if(counter > 0) { #>, <#} #>  row.<#= GetTypeScriptPropertyName(prop, Model) #> <#
                            counter++;
                        }
                    }#>));
                    deletedRows.push(row);
                } catch (error) {
                    this.appGlblSettings.showError('http', error)
                }
            }
            sender.deselectRows(deletedRows);
            deletedRows.forEach((r: <#= GetInterfaceName(Model) #>) => {
                let i: number = sender.dataSource.indexOf(r); 
                if(i > -1) sender.dataSource.splice(i, 1);
            });
            sender.dataSource = sender.dataSource.slice(0);
            if ((deletedRows.indexOf( sender.<#= currentRowPropName #>  as <#= GetInterfaceName(Model) #>) > -1) && (sender.dataSource.length > 0)) sender.<#= OnSelectRowMethodName #>(sender.dataSource[0]);
        });
<#
    }
#>
    }

    rowCommand(v: <#= eventEmitterDataModelClassName #>) {
        if(v.id === '<#= ActionParamUpdateMode #>') {
            this.onEdit(v.value);
        } else if(v.id === '<#= ActionParamDeleteMode #>') {
            this.onDelete(v.value, v.sender);
        } else if(v.id === '<#= ActionParamViewMode #>') {
            this.onView(v.value);
        } else {
            this.onRowCommand.emit(v);
        }
    }
    tableCommand(v: <#= eventEmitterDataModelClassName #>) {
        if(v.id === '<#= ActionParamAddMode #>') {
           this.onAdd( v.sender );
        } else if (v.id === '<#= ActionParamDeleteMode #>') {
            this.onDeleteMultiple( v.sender );
        } else {
            this.onTableCommand.emit(v);
        }
    }
}


<#+

    string GetDisplayedColumns(ModelViewSerializable model) {
        string result= "";
        if (model == null) {
            return result; 
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return result; 
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if (result == "") {
                    result = "'" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                } else {
                    result += ", '" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                }
                if (modelViewUIListPropertySerializable.IsNewLineAfter) {
                    break;
                }
            }
        }
        return result;
    }
    bool hasMatSort(ModelViewSerializable model) {
        if (model == null) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if(model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting)) {
                    return true;
                }
            }
        }
        return false;
    }
    string matSortIfNeeded(ModelViewSerializable model) {
        if(hasMatSort(model)) {
            return "matSort";
        }
        return "";
    }
    bool hasMatSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string matSortHeaderIfNeeded(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if(hasMatSortHeader(modelViewUIListPropertySerializable, model)) {
            return "mat-sort-header";
        }
        return "";
    }
    string GetContextComponentClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    string GetContextComponentSelectorCommonPart(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }

    string GetInputTypeToEnumName(int inputType) {
        switch(inputType) {
            case 1:
                return "AddMode";
            case 2:
                return "UpdateMode";
            default:
                return "DeleteMode";
        }
    }
    InputTypeEnum GetInputTypeWhenXXX(ModelViewUIFormPropertySerializable prop, int inputType) {
        switch(inputType) {
            case 1:
                return prop.InputTypeWhenAdd;
            case 2:
                return prop.InputTypeWhenUpdate;
            default:
                return prop.InputTypeWhenDelete;
        }
    }

    string GetInterfaceEDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Edlg";
    }
    string GetInterfaceVDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Vdlg";
    }
    string GetInterfaceADlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Adlg";
    }
    string GetInterfaceDDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Ddlg";
    }
    string GetInterfaceUDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Udlg";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceName(model);
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfacePageNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfacePageName(model);
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetInterfaceFilterNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceFilterName(model);
    }
    string GetPropertyTypeScriptTypeName(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetJavaScriptToStringMethod(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.datetime": 
                result =  ".toString()"; // .toDateString()
                break;
            case "system.guid":
            case "system.string":
                result =  "";
                break;
            default:
                result =  ".toString()";
                break;
        }
        return result;
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetTypeScriptPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    string GetTypeScriptPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }

    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date('" + propValue + "')";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMinValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMinValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date('" + propValue + "')";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }



    List<string> GetValidators(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, Dictionary<string, string> regExps) {
        List<string> result = new List<string>();
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) {
            return result;
        }
        if(sclrProp.IsRequiredInView) {
            result.Add("Validators.required");
        }
        bool hasCurrencyAttr = false;
        if(sclrProp.Attributes != null) {
            hasCurrencyAttr = sclrProp.Attributes.Any(a => a.AttrName == "DataType" && a.VaueProperties.Any(p => p.PropValue == "DataType.Currency"));
        }
        string propValue = null;
        switch( sclrProp.UnderlyingTypeName.ToLower() ) {
            case "system.int16":
            case "system.int32":
            case "system.int64":
            case "system.uint16":
            case "system.uint32":
            case "system.uint64":
                if (hasCurrencyAttr) {
                    result.Add("Validators.pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add("Validators.pattern("+ regExps["RegExpInteger"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.guid":
                result.Add("Validators.pattern("+ regExps["RegExpGuid"] +")");
                break;
            case "system.double":
            case "system.decimal":
            case "system.single":
                if (hasCurrencyAttr) {
                    result.Add("Validators.pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add("Validators.pattern("+ regExps["RegExpFloat"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.string":
                propValue = GetUnNamedAtributeValue(sclrProp, "StringLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetUnNamedAtributeValue(sclrProp, "MaxLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetUnNamedAtributeValue(sclrProp, "MinLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.minLength("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.datetime":
                // mat-datepicker has special min/max validation: [min] [max]
                break;
        }
        return result;
    }
    bool HasCombo(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  (prop.InputTypeWhenAdd == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenDelete == InputTypeEnum.Combo);
    }
    bool HasButton(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog);
    }
    bool HasTypeahead(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
    }
    bool HasInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return HasCombo(prop, model) ||  HasButton(prop, model) || HasTypeahead(prop, model);
    }
    bool HasInitMethodForInputMode(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, int inputType) {
        switch(inputType) {
            case 1:
                return
                    (prop.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead);
                break;
            case 2:
                return
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead);
                break;
            case 3:
                return
                    (prop.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
                break;
        }
        return false;
    }
    bool HasModelInitMethodForInputMode(ModelViewSerializable model, int inputType) {
        if (model == null) {
            return false;
        }
        if (model.UIFormProperties == null) {
            return false;
        }
        foreach(ModelViewUIFormPropertySerializable prop in model.UIFormProperties) {
            if(HasInitMethodForInputMode(prop, model, inputType)) {
                return true;
            }
        }
        return false;
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }

    string GetExpressionForOnFilterTypeaheadControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string typeaheadSufix) {
        return  "OnFilter" + GetExpressionForControlList(prop, model, typeaheadSufix);
    }
    string GetExpressionForOnUpdateComboControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string comboSufix) {
        return  "OnUpdate" + GetExpressionForControlList(prop, model, comboSufix);
    }
    string GetExpressionForOnValChangedMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnValChanged" + GetTypeScriptPropertyNameEx(prop, model);
    }
    string GetTypeScriptPropertyNameWithSufixBase(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyName(prop, model) + sufix;
    }
    string GetTypeScriptPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForOnInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnInit" + GetTypeScriptPropertyNameEx(prop, model);
    }


    List<string> CollectComboListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Combo)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Array<" + GetInterfaceName(mv) + ">");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectButtonItemInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add( GetInterfaceName(mv) );
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)  {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectTypeaheadListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Observable<Array<" + GetInterfaceName(mv) + ">>");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Observable<Array<" + GetInterfaceName(mv) + ">>";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Observable<Array<" + GetInterfaceName(mv) + ">>";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    string GetFormControlHiddenCondition(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string eformModePropName) {
        if ((prop.InputTypeWhenAdd == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenDelete == InputTypeEnum.Hidden)) {
            return "";
        }
        string result= "*ngIf = \"";
        bool setOr = false;
        if (prop.InputTypeWhenAdd == InputTypeEnum.Hidden) {
            result = result + "(" + eformModePropName + "==1)";
            setOr = true;
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==2)";
            setOr = true;
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==3)";
        }
        return result + "\"";
    }
    int GetGreaterThanPercent(int currCnt, int maxCnt, int[] wdths) {
        if (currCnt < maxCnt) {
            return wdths[0];
        }
        return wdths[1];
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    bool IsDateInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName);
    }
    string GetCommonEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetCrossComponentFolderName(ModelViewSerializable model, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    
    string GetServiceClassNameEx(DbContextSerializable context, string ViewName, string fileType) {
        if ((context == null) || string.IsNullOrEmpty(ViewName) || string.IsNullOrEmpty(fileType)) {
            return "";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null) {
            return "";
        }
        return GetServiceClassName(model, fileType);
    }

    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) { 
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => 
                (p.OriginalPropertyName == origPropName) && 
                string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if ((fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1)) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => 
                        (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && 
                        (p.ForeignKeyName == fk.NavigationName) && 
                        (p.ForeignKeyName == p.ForeignKeyNameChain)
                    ).FirstOrDefault();
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }

    string GetPrimKeyFilterForFindIndexMethod(DbContextSerializable context, string ViewName, string srcPrefix, string destPrefix) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "false";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null)
        {
            return "false";
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null))
        {
            return "false";
        }
        string result = "";
        foreach(ModelViewKeyPropertySerializable keyProp in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(keyProp.OriginalPropertyName, model);
            if (modelViewPropertyOfVwSerializable != null) {
                string proName = GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, model);
                if(result != "") {
                    result += " && ";
                }
                result += "("+ srcPrefix + "." + proName + " === " + destPrefix + "." + proName + ")";
            }
        }
        if (result == "") {
            return "false";
        }
        return result;
    }

    string GetControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, mv);
    }

    ModelViewSerializable
        GetViewForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        if ((prop == null) || (model == null) || (context == null)) {
            return null;
        }
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
    }

    string GetViewNameForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        ModelViewSerializable mv =
            GetViewForControlList(prop, model, context, inputType);
        if (mv == null)
        {
            return "NoName";
        }
        return mv.ViewName;
    }

    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyName))).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }

    List<ModelViewPropertyOfVwSerializable> GetPrimaryKeyProps(DbContextSerializable context, string viewName) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return result;
        }
        return GetModelPrimaryKeyProps( context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault() );
    }


    List<string> GetFKViewsList(ModelViewSerializable model, 
                                     DbContextSerializable context,
                                     List<string> fkViewsDict)
    {
        if ((model == null) || (context == null) || (fkViewsDict == null)) {
            return fkViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return fkViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return fkViewsDict;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDirectMasters(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string viewNameForSel = GetViewNameForControlList(prop, model, context, inputType);
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return result;
        }
        ModelViewSerializable modelViewSerializable = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (modelViewSerializable == null)
        {
            return result;
        }
        if (modelViewSerializable.ForeignKeys == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            foreignKeyNameChain = "";
        } else {
            foreignKeyNameChain += ".";
        }
        foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in modelViewSerializable.ForeignKeys) {
            if (!string.IsNullOrEmpty(modelViewForeignKeySerializable.ViewName)) {
                string fltFKNameChain = foreignKeyNameChain + modelViewForeignKeySerializable.NavigationName;
                List<ModelViewUIFormPropertySerializable> propLst = null;
                switch(inputType) {
                    case 1:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 2:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 3:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    default:
                        break;
                }
                if (propLst != null) {
                    result.AddRange(propLst);
                }
            }
        }
        return result;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDependentScalarProps(ModelViewUIFormPropertySerializable prop,
                                ModelViewSerializable model, 
                                DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ((prop == null) || (model == null) || (context == null)) {
            return result;
        }
        if (model.UIFormProperties == null)  {
            return result;
        }
        if(!HasInitMethodForInputMode(prop, model, inputType)) {
            return result;
        }
        string currentPropChain = string.IsNullOrEmpty(prop.ForeignKeyNameChain) ? "" : prop.ForeignKeyNameChain;
        List<ModelViewUIFormPropertySerializable> masters = GetDirectMasters(prop, model, context, inputType);
        foreach(ModelViewUIFormPropertySerializable dependentProp in model.UIFormProperties) {
            if(prop.ViewPropertyName == dependentProp.ViewPropertyName) {
                result.Add(dependentProp);
                continue;
            }
            if(HasInitMethodForInputMode(dependentProp, model, inputType)) {
                continue;
            }
            string dependentPropChain = string.IsNullOrEmpty(dependentProp.ForeignKeyNameChain) ? "" :  dependentProp.ForeignKeyNameChain;
            if(dependentPropChain == currentPropChain) {
                result.Add(dependentProp);
                continue;
            }
            string locCurrentPropChain = currentPropChain;
            if (!string.IsNullOrEmpty(locCurrentPropChain)) locCurrentPropChain += ".";
            if (!dependentPropChain.StartsWith(locCurrentPropChain)) {
                continue;
            }
            if (!masters.Where(p => dependentPropChain.StartsWith(p.ForeignKeyNameChain)).Any()) {
                result.Add(dependentProp);
            }
        }
        return result;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        string fltFKNameChain  = string.Join(".", foreignKeys, 0, foreignKeys.Length - 1);
        List<ModelViewUIFormPropertySerializable> propLst = null;
        switch(inputType) {
            case 1:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 2:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 3:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                break;
            default:
                break;
        }
        if (propLst != null) {
            return propLst;
        }
        return result;
    }

    bool MustHaveDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context) {
        bool result = false;
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        return true;
    }

    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }

    ModelViewPropertyOfVwSerializable GetOnValChangeViewPropName(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable, ModelViewUIFormPropertySerializable dependentScalarProp, int inputType) {
        if(dependentScalarProp == null) {
            return null;
        }
        ModelViewSerializable view = GetViewForControlList(modelViewUIFormPropertySerializable, model, context, inputType);
        if(view == null) {
            return null;
        }
        string foreignKeyNameChain = 
            string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain) ? "" : modelViewUIFormPropertySerializable.ForeignKeyNameChain;
        
        
        string dependentForeignKeyNameChain = 
            (string.IsNullOrEmpty(dependentScalarProp.ForeignKeyNameChain) ? "" : dependentScalarProp.ForeignKeyNameChain);
        if (foreignKeyNameChain == dependentForeignKeyNameChain) {
            dependentForeignKeyNameChain = "";
        } else {
            if (foreignKeyNameChain != "") {
              foreignKeyNameChain += ".";
              dependentForeignKeyNameChain = dependentForeignKeyNameChain.Replace(foreignKeyNameChain, "");
            }
        }
        if (string.IsNullOrEmpty(dependentForeignKeyNameChain)) {
            return
                view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
        }
        return
            view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && (p.ForeignKeyNameChain == dependentForeignKeyNameChain)).FirstOrDefault();
    }
    
    bool HasOnValChangedMethod(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable) {
        bool result = false;
        for (int inputType = 1 ; inputType < 4; inputType++) {
            result = 
                (GetDirectDetails(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0) ||
                (GetDependentScalarProps(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0);
            if (result) {
                return result;
            }
        }
        return result;
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }


#>
