<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#


    string filterResultModelFolder                  = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName               = GetModelClassName(Model, filterResultModelFolder);

    string viewModelDatasourceInterfaceFolder       = "00600-view-model-datasource.interface.ts";
    string viewModelDatasourceInterfaceClassName    = GetModelClassName(Model, viewModelDatasourceInterfaceFolder);


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";

    string CurrentViewNameFieldName             = "CurrentViewName";
    string ClientViewNameFieldName              = "ClientViewName";
    string DirectNavigationFieldName            = "DirectNavigation";
    string IsTopDetailFieldName                 = "IsTopDetail";
    string IsDefinedFieldName                   = "IsDefined";
    string ValueSuffix                          = "Value";
    string IsNewSuffix                          = "IsNew";

    string ClientToMasterFieldsMapFieldName     = "clientToMasterFieldsMap";
    string MasterToClientFieldsMapFieldName     = "masterToClientFieldsMap";

    string OnDetailChangedPropName              = "OnDetailChanged";
    string OnMasterChangedPropName              = "OnMasterChanged";
    string OnIsDefinedChangedPropName           = "OnIsDefinedChanged";
    string OnUpdatePropName                     = "OnUpdate";
    string OnAddPropName                        = "OnAdd";
    string OnDeletePropName                     = "OnDelete";
    string AfterMasterChangedPropName           = "AfterMasterChanged";
    string AfterPropsChangedPropName            = "AfterPropsChanged";
    string submitOnDetailChangedMethodName      = "submitOnDetailChanged";
    string submitOnMasterChangedMethodName      = "submitOnMasterChanged";
    string DoEmitEventMethodName                = "doEmitEvent";
    string RefreshIsDefinedMethodName           = "refreshIsDefined";

    string LengthSuffix                         = "Length";
    string KeysSuffix                           = "Keys";
    string CalcIsDefinedMethodName              = "calcIsDefined";
    string ClearMethodName                      = "clear";
    string ClearPartiallyMethodName             = "clearPartially";


    string HiddenFilterByFltRsltSuffix          = "HiddenFilterByFltRslt";
    string UnderHiddenFilterFieldsFieldName     = "UnderHiddenFilterFields";
    string UpdateByHiddenFilterFieldsMethodName = "updateByHiddenFilterFields";

    string UIFormChainFieldName                 = "UIFormChain";
    string HiddenFilterFieldName                = "HiddenFilter";

    string IsSetFilterByCurrDirMstrsMethodName  = "isSetFilterByCurrDirMstrs";


#>

import { EventEmitter } from "@angular/core";
import { <#= filterResultModelClassName #> } from '<#= GetFolderName(Model, filterResultModelFolder, viewModelDatasourceInterfaceFolder)#>';

export interface <#= viewModelDatasourceInterfaceClassName #> {
    get<#= HiddenFilterByFltRsltSuffix #>(fr:  Array<<#= filterResultModelClassName #>> | any): {[key: string]: {[key: string]: {[key: string]: any}}};
    get<#= UIFormChainFieldName #>(): string;
    get<#= HiddenFilterFieldName #>(): {[key: string]: {[key: string]: {[key: string]: any}}}
    set<#= HiddenFilterFieldName #>(fltr: {[key: string]: {[key: string]: {[key: string]: any}}}): void;
    get<#= CurrentViewNameFieldName #>(): string;
    get<#= ClientViewNameFieldName #>(): string | any;
    get<#= DirectNavigationFieldName #>(): string | any;
    get<#= IsTopDetailFieldName #>(): boolean;
    get<#= IsDefinedFieldName #>(): boolean;
    get<#= LengthSuffix #>(): number;
    get<#= KeysSuffix #>(): string[];
    get<#= ValueSuffix #>(key: string): any;
    set<#= ValueSuffix #>(key: string, value: any): void;
    required<#= ValueSuffix #>(key: string): boolean;
    dbgenerated<#= ValueSuffix #>(key: string): boolean;
    isInPrimkey<#= ValueSuffix #>(key: string): boolean;
    isSet<#= ValueSuffix #>(key: string): boolean; 
    clear<#= ValueSuffix #>(key: string): void;
    <#= ClearMethodName #>(doNotify: boolean): boolean;
    isEqual(src: any, dest: any): boolean;

    <#= OnDetailChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnMasterChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= AfterMasterChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= AfterPropsChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;

    <#= OnIsDefinedChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnUpdatePropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnAddPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnDeletePropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= ClearPartiallyMethodName #>(doNotify: boolean): boolean;
    <#= submitOnDetailChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void;
    <#= submitOnMasterChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void;
    <#= CalcIsDefinedMethodName #>(): boolean;
    <#= DoEmitEventMethodName #>(aftrMstrChngd: boolean): void;

    <#= RefreshIsDefinedMethodName #>(): boolean;
    <#= IsSetFilterByCurrDirMstrsMethodName #>(): boolean;
    <#= UpdateOneMethodName #>(): void;
    <#= AddOneMethodName #>(): void;
    <#= DeleteOneMethodName #>(): void;
//    set<#= UnderHiddenFilterFieldsFieldName #>(): void;
    is<#= UnderHiddenFilterFieldsFieldName #>(fld: string|any): boolean;
    <#= UpdateByHiddenFilterFieldsMethodName #>(doNotify: boolean): boolean;
    get<#= IsNewSuffix #>(): boolean;
    set<#= IsNewSuffix #>(v: boolean): void;
    isReadonly<#= ValueSuffix #>(key: string): boolean;

}

