<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#


    string filterResultModelFolder                  = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName               = GetModelClassName(Model, filterResultModelFolder);

    string viewModelDatasourceInterfaceFolder       = "00600-view-model-datasource.interface.ts";
    string viewModelDatasourceInterfaceClassName    = GetModelClassName(Model, viewModelDatasourceInterfaceFolder);


    string GetAllMethodName                 = "getall";
    string GetWithFilterMethodName          = "getwithfilter";
    string GetOneMethodName                 = "getone";
    string UpdateOneMethodName              = "updateone";
    string AddOneMethodName                 = "addone";
    string DeleteOneMethodName              = "deleteone";

    string CurrentViewNameFieldName             = "CurrentViewName";
    string ClientViewNameFieldName              = "ClientViewName";
    string DirectNavigationFieldName            = "DirectNavigation";
    string IsTopDetailFieldName                 = "IsTopDetail";
    string IsDefinedFieldName                   = "IsDefined";
    string ValuesFieldName                      = "Values";
    string ClientToMasterFieldsMapFieldName     = "ClientToMasterFieldsMap";
    string MasterToClientFieldsMapFieldName     = "MasterToClientFieldsMap";
    string OnDetailChangedPropName              = "OnDetailChanged";
    string OnMasterChangedPropName              = "OnMasterChanged";
    string OnIsDefinedChangedPropName           = "OnIsDefinedChanged";
    string submitOnDetailChangedMethodName      = "submitOnDetailChanged";
    string submitOnMasterChangedMethodName      = "submitOnMasterChanged";
    string LengthFieldName                      = "Length";
    string KeysFieldName                        = "Keys";
    string ValueFieldName                       = "Value";
    string ClearMethodName                      = "clear";
    string HiddenFilterByFltRsltMethodName      = "HiddenFilterByFltRslt";
    string UnderHiddenFilterFieldsFieldName     = "UnderHiddenFilterFields";
    string UpdateByHiddenFilterFieldsMethodName = "UpdateByHiddenFilterFields";
    string IsNewFieldName                       = "IsNew";
    string UIFormChainFieldName                 = "UIFormChain";
    string IsSetFilterByCurrDirMstrsMethodName  = "IsSetFilterByCurrDirMstrs";
    string HiddenFilterFieldName                = "HiddenFilter";
    string OnUpdatePropName                     = "OnUpdate";
    string OnAddPropName                        = "OnAdd";
    string OnDeletePropName                     = "OnDelete";
    string ClearNoCurrMasterPropsMethodName     = "clearNoCurrMasterProps";
    string AfterMasterChangedPropName           = "AfterMasterChanged";
    string AfterPropsChangedPropName            = "AfterPropsChanged";
    string CalcIsDefinedMethodName              = "CalcIsDefined";


#>

import { EventEmitter } from "@angular/core";
import { <#= filterResultModelClassName #> } from '<#= GetFolderName(Model, filterResultModelFolder, viewModelDatasourceInterfaceFolder)#>';

export interface <#= viewModelDatasourceInterfaceClassName #> {
    get<#= HiddenFilterByFltRsltMethodName #>(fr:  Array<<#= filterResultModelClassName #>> | any): {[key: string]: {[key: string]: {[key: string]: any}}};
    get<#= UIFormChainFieldName #>(): string;
    get<#= HiddenFilterFieldName #>(): {[key: string]: {[key: string]: {[key: string]: any}}}
    set<#= HiddenFilterFieldName #>(fltr: {[key: string]: {[key: string]: {[key: string]: any}}}): void;
    get<#= CurrentViewNameFieldName #>(): string;
    get<#= ClientViewNameFieldName #>(): string | any;
    get<#= DirectNavigationFieldName #>(): string | any;
    get<#= IsTopDetailFieldName #>(): boolean;
    get<#= IsDefinedFieldName #>(): boolean;
    get<#= LengthFieldName #>(): number;
    get<#= KeysFieldName #>(): string[];
    get<#= ValueFieldName #>(key: string): any;
    set<#= ValueFieldName #>(key: string, value: any): void;
    required<#= ValueFieldName #>(key: string): boolean;
    dbgenerated<#= ValueFieldName #>(key: string): boolean;
    isInPrimkey<#= ValueFieldName #>(key: string): boolean;
    isSet<#= ValueFieldName #>(key: string): boolean; 
    clear<#= ValueFieldName #>(key: string): void;
    <#= ClearMethodName #>(doNotify: boolean = true): void;
    isEqual(src: any, dest: any): boolean;

    <#= OnDetailChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnMasterChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= AfterMasterChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= AfterPropsChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;

    <#= OnIsDefinedChangedPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnUpdatePropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnAddPropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= OnDeletePropName #>: EventEmitter<<#= viewModelDatasourceInterfaceClassName #>>;
    <#= ClearNoCurrMasterPropsMethodName #>(doNotify: boolean): void;
    <#= submitOnDetailChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void;
    <#= submitOnMasterChangedMethodName #>(v: <#= viewModelDatasourceInterfaceClassName #>): void;
    <#= CalcIsDefinedMethodName #>(): boolean;

    <#= IsSetFilterByCurrDirMstrsMethodName #>(): boolean;
    <#= UpdateOneMethodName #>(): void;
    <#= AddOneMethodName #>(): void;
    <#= DeleteOneMethodName #>(): void;
//    set<#= UnderHiddenFilterFieldsFieldName #>(): void;
    is<#= UnderHiddenFilterFieldsFieldName #>(fld: string|any): boolean;
    <#= UpdateByHiddenFilterFieldsMethodName #>(doNotify: boolean = true): void;
    get<#= IsNewFieldName #>(): boolean;
    set<#= IsNewFieldName #>(v: boolean): void;
    readonly<#= ValueFieldName #>(key: string): boolean;

}

<#+
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I"+sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

#>