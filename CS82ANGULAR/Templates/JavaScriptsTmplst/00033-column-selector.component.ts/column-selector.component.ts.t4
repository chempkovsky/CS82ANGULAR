<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#

    bool localize = true;

    string ShowErrorMethodName          = "showError";
    string AppSettingServicePropName    = "appGlblSettings";

    string appSettingServiceFolder              = "00015-app-glbl-settings.service.ts";
    string columnSelectorItemInterfaceFolder    = "00032-column-selector-item.interface.ts";
    string columnSelectorComponentCssFolder     = "00033-column-selector.component.css";
    string columnSelectorComponentHtmlFolder    = "00033-column-selector.component.html";
    string columnSelectorComponentFolder        = "00033-column-selector.component.ts";
                                    
    
    string columnSelectorComponentSelectorCommonPart = GetComponentSelectorCommonPart(Model, columnSelectorComponentFolder);
    string columnSelectorItemModelClassName = GetModelClassName(Model, columnSelectorItemInterfaceFolder);
    string appSettingServiceClassName   = GetServiceClassName(Model, appSettingServiceFolder);
    string columnSelectorComponentClassName = GetComponentClassName(Model, columnSelectorComponentFolder);

#>

import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { <#= columnSelectorItemModelClassName #> } from '<#= GetFolderName(Model, columnSelectorItemInterfaceFolder, columnSelectorComponentFolder)#>';
import { <#= appSettingServiceClassName #> } from '<#= GetFolderName(Model, appSettingServiceFolder, columnSelectorComponentFolder)#>';

@Component({
  selector: 'app-<#= columnSelectorComponentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, columnSelectorComponentHtmlFolder, columnSelectorComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderName(Model, columnSelectorComponentCssFolder, columnSelectorComponentFolder) #>.css']
})
export class <#= columnSelectorComponentClassName #> implements OnInit {
  
  public colums : Array<<#= columnSelectorItemModelClassName #>> = [];
  @Input('colums-to-select')
  get columsToSelect(): Array<IColumnSelectorItem> {
      return this.colums;
  }
  set columsToSelect(inp: Array<IColumnSelectorItem>) {
    if (!(typeof inp === 'undefined')) {
      if( Array.isArray(inp)) {
        this.colums = inp;
        this.cd.detectChanges();
      }
    }
  }

   constructor(protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, private cd: ChangeDetectorRef) { }
   ngOnInit(): void {
   } 
   onChanged(v: MatCheckboxChange) {
       let i: number = this.colums.findIndex(e => { return e.name === v.source.value; })
       if(i > -1) {
           this.colums[i].checked = v.checked;
       }
   }
   shwoError(s: string) {
       this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>(
<# 
    if(localize) {
#>
        let text: string = $localize`:Number of columns@@<#= columnSelectorComponentClassName #>.Number-of-columns:Number of columns` ;
<# 
    } else {
#>
        'Number of columns', 
<# 
    }
#>
       { message: s });
   }
}


<#+
    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }

    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
#>
