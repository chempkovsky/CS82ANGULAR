<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#


    string HiddenFilterPrefix           = "hf";
    string IdPrefix                     = "id";
    string ItemParamName                = "item";  
    string VPrefix                      = "View";
    string APrefix                      = "Add";
    string UPrefix                      = "Upd";
    string DPrefix                      = "Del";
    string DepthParamName               = "depth"; 
    string HiddenFilterAsFltRsltSuffix  = "HiddenFilterAsFltRslt";
    string HiddenFilterByRowSuffix      = "HiddenFilterByRow";
    string uidParamName                 = "uid"; 

    string NavPrefix                    = "NavPrefix";
    string OutletNmPropName             = "outletNm";


    string getStorageItemMethodName     = "getStorageItem";
    string setStorageItemMethodName     = "setStorageItem";
    string getStorageLengthMethodName   = "getStorageLength";
    string removeStorageItemMethodName  = "removeStorageItem";
    string getStorageKeyMethodName      = "getStorageKey";
    string clearStorageMethodName       = "getStorageKey";

    string GetOneMethodName             = "getone";
    string DeleteOneMethodName          = "deleteone";


    string ActionParamName              = "mode";  
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";
    string ActionParamViewMode          = "view";
    string ViewNameParamName            = "view";
    string NavigationParamName          = "nav";

    // WebApi service's method names

    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";
    string applyFilterSelector      = "apply-filter";
    string applyFilterPropName      = "applyFilter";
    string ShowErrorMethodName      = "showError";


    string AppSettingServicePropName    = "appGlblSettings";
    string formRootService              = "frmRootSrv";

    
    string RowCommandsSelector          = "row-commands";
    string RowCommandsPropName          = "rowCommands";
    string TableCommandsSelector        = "table-commands";
    string TableCommandsPropName        = "tableCommands";

    string OnRowCommandSelector         = "on-row-command";
    string OnRowCommandPropName         = "onRowCommand";
    string OnTableCommandSelector       = "on-table-command";
    string OnTableCommandPropName       = "onTableCommand";

    string externalFilterSelector               = "external-filter";
    string externalFilterPropName               = "externalFilter";
    string beforeSquerySelector                 = "before-squery";
    string beforeSqueryPropName                 = "beforeSquery";
    string OnBeforeSqueryMethodName             = "onBeforeSquery";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";


    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string menuItemDataModelFolder      = "00017-menu-item-data.interface.ts";
    string eventEmitterDataModelFolder  = "00018-event-emitter-data.interface.ts";
    string eventEmitterPubModelFolder   = "00019-event-emitter-pub.interface.ts";
    string itemHeightDataModelFolder    = "00016-item-height-data.interface.ts";

    string messageDialogInterfaceFolder = "00037-message-dialog.interface.ts";
    string messageDialogComponentFolder = "00038-message-dialog.component.ts";

    string viewInterfaceFolder          = "01100-.interface.ts";
    string viewInterfaceFltFolder       = "01300-Filter.interface.ts";
    string viewServiceFolder            = "01400-.service.ts";



    string sMltFormComponentFolder      = "01460-Smform.component.ts";


    
    string rlMltformCssFolder           = "01922-Rmlist.component.css";
    string rlMltformHtmlFolder          = "01922-Rmlist.component.html";
    string rlMltformComponentFolder     = "01922-Rmlist.component.ts";



    string ActionColumnDefProperty      = "menuAction";
    string SelectColumnDefProperty      = "selectAction";
    string DisplayedColumnsProperty     = "displayedColumns";
    string MatPaginatorPageSize         = "10";
    string MatPaginatorPageSizeOptions  = "[10, 25, 50, 100]";

    string OutletNamePrefix             = "oltnm";
    string OutletParent                 = "oltParent";
    string OutletNameValue = OutletNamePrefix + Model.ViewName;

    string serviceClassName = GetServiceClassName(Model, viewServiceFolder);
    string appSettingServiceClassName = GetCommonServiceClassName(Context, appSettingServiceFolder);
    string componentSelectorCommonPart = GetComponentSelectorCommonPart(Model, rlMltformComponentFolder);
    string componentClassName = GetComponentClassName(Model, rlMltformComponentFolder);
    string searchMltComponentClassName = GetComponentClassName(Model, sMltFormComponentFolder);

    string filterResultModelClassName = GetModelClassName(Context, filterResultModelFolder);
    string eventEmitterDataModelClassName   = GetModelClassName(Context, eventEmitterDataModelFolder);
    string menuItemDataModelClassName   = GetModelClassName(Context, menuItemDataModelFolder);
    string eventEmitterPubModelClassName    = GetModelClassName(Context, eventEmitterPubModelFolder);
    string itemHeightDataModelClassName   = GetModelClassName(Context, itemHeightDataModelFolder);
    string messageDialogInterfaceName = GetModelClassName(Context, messageDialogInterfaceFolder);
    string messageDialogComponentClassName = GetContextComponentClassName(Context, messageDialogComponentFolder);


    List<ModelViewPropertyOfVwSerializable> primKeys= GetModelPrimaryKeyProps(Model);
    List<string> detailViewNames =  GetDetailViews(Model, Context, null);

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string OnBackBtnSelector            = "on-back-btn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

#>
import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ChangeDetectorRef } from '@angular/core';
import { ActivatedRoute, Router, ParamMap, UrlSegment, ActivatedRouteSnapshot } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import { firstValueFrom } from 'rxjs';


import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderName(Model, Context,  appSettingServiceFolder, rlMltformComponentFolder)#>';
import { <#= GetServiceClassName(Model, viewServiceFolder) #> } from '<#=  GetCrossComponentFolderName(Model, rlMltformComponentFolder, Context, Model.ViewName, viewServiceFolder) #>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterResultModelFolder, rlMltformComponentFolder)#>';
import { <#= searchMltComponentClassName #> } from '<#=  GetFolderName(Model, sMltFormComponentFolder, rlMltformComponentFolder) #>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  eventEmitterDataModelFolder, rlMltformComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  menuItemDataModelFolder, rlMltformComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderName(Model, Context, eventEmitterPubModelFolder, rlMltformComponentFolder)#>';
import { <#= itemHeightDataModelClassName #> } from '<#= GetCommonFolderName(Model, Context, itemHeightDataModelFolder, rlMltformComponentFolder)#>';
import { <#= GetInterfaceName(Model) #> } from '<#=  GetFolderName(Model, viewInterfaceFolder, rlMltformComponentFolder) #>';
import { <#= GetInterfaceFilterName(Model) #> } from '<#= GetCrossComponentFolderName(Model, rlMltformComponentFolder, Context, Model.ViewName, viewInterfaceFltFolder) #>';
import { <#= messageDialogComponentClassName #> } from '<#=  GetCommonFolderName(Model, Context,  messageDialogComponentFolder, rlMltformComponentFolder)#>';
import { <#= messageDialogInterfaceName #> } from '<#=  GetCommonFolderName(Model, Context,  messageDialogInterfaceFolder, rlMltformComponentFolder)#>';

@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, rlMltformHtmlFolder, rlMltformComponentFolder)#>.html',
  styleUrls: ['<#=  GetFolderName(Model, rlMltformCssFolder, rlMltformComponentFolder)#>.css']
})
export class <#= componentClassName #> implements OnInit, <#= eventEmitterPubModelClassName #>, <#= itemHeightDataModelClassName #> {
    @Input('<#= captionSelector #>') <#= captionPropName #>: string = '<#= Model.ViewName #>';
    <#= NavPrefix #>: string|any = '';
    <#= OutletNmPropName #> : string = 'primary';

    isPostNavApplied: boolean = false;
    isOnInitCalled: boolean = false;
    <#= DepthParamName #>: number = 1;
    <#= HiddenFilterPrefix #>: string = '<#= HiddenFilterPrefix + "1" #>';
    <#= uidParamName #>: string|null = null;
    <#= showBackBtnPropName #>: boolean = false;
    @Input('<#= FilterMaxHeightPropSelector #>')  <#= FilterMaxHeightPropName #>: number | null = null;
    @Input('<#= MaxHeightPropSelector #>') <#= MaxHeightPropName #>: number | null = null;
    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(e: <#= eventEmitterDataModelClassName #>)  {
        this.<#= onContainerMenuItemClickEmitter #>.emit(e);
    }
    @Input('<#= ShowFilterSelector #>') <#= ShowFilterPropName #>: boolean = true;
    protected _<#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>> = [];
    @Input('<#= HiddenFilterSelector #>') 
        get <#= HiddenFilterPropName #>(): Array<<#= filterResultModelClassName #>> {
            return this._<#= HiddenFilterPropName #>;
        }
        set <#= HiddenFilterPropName #>(v :Array<<#= filterResultModelClassName #>>) {
            if (typeof v === 'undefined') {
                this._<#= HiddenFilterPropName #> = [];
            } else if (!Array.isArray(v)) {
                this._<#= HiddenFilterPropName #> = [];
            } else {
                this._<#= HiddenFilterPropName #> =  v;
            }
            if(this.isOnInitCalled) {
                this.cd.detectChanges();
            }
        }
    rowMenuItemsData: Array<<#= menuItemDataModelClassName #>> = [
         {id: '<#= ActionParamUpdateMode #>', caption: 'Modify Item', iconName: 'edit', iconColor: 'primary', enabled: true},
         {id: '<#= ActionParamDeleteMode #>', caption: 'Delete Item', iconName: 'delete_forever', iconColor: 'warn', enabled: true},
         {id: '<#= ActionParamViewMode #>',   caption: 'View Item', iconName: 'preview', iconColor: 'primary', enabled: true},
      ];
    tableMenuItemsData: Array<<#= menuItemDataModelClassName #>> = [
         {id: '<#= ActionParamAddMode #>', caption: 'Add Item', iconName: 'create', iconColor: 'primary', enabled: true},
         {id: '<#= ActionParamDeleteMode #>', caption: 'Delete Selected', iconName: 'delete_forever', iconColor: 'warn', enabled: true},
      ];
    constructor(protected route: ActivatedRoute, protected router: Router, protected  <#= formRootService #>: <#= serviceClassName #>, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, 
        public dialog: MatDialog, 
        protected cd: ChangeDetectorRef) {
    }
    permMask: number = 0;
    ngOnInit() {
        let luid = '';
        this.permMask = this.<#= AppSettingServicePropName #>.getViewModelMask('<#= Model.ViewName #>');
        this.tableMenuItemsData[0].enabled = ((this.permMask & 8) === 8); // add
        this.tableMenuItemsData[1].enabled = ((this.permMask & 2) === 2); // delete mult
        this.isPostNavApplied = false;
        if (!(typeof this.route.snapshot.data === 'undefined')) {
            if (!(this.route.snapshot.data === null)) {
                if (!(typeof this.route.snapshot.data['<#= ShowFilterPropName #>'] === 'undefined')) {
                    this.<#= ShowFilterPropName #> = this.route.snapshot.data['<#= ShowFilterPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= MaxHeightPropName #>'] === 'undefined')) {
                    this.<#= MaxHeightPropName #> = this.route.snapshot.data['<#= MaxHeightPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= FilterMaxHeightPropName #>'] === 'undefined')) {
                    this.<#= FilterMaxHeightPropName #> = this.route.snapshot.data['<#= FilterMaxHeightPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= HiddenFilterPrefix #>'] === 'undefined')) {
                    this.<#= HiddenFilterPrefix #> = this.route.snapshot.data['<#= HiddenFilterPrefix #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= DepthParamName #>'] === 'undefined')) {
                    this.<#= DepthParamName #> = this.route.snapshot.data['<#= DepthParamName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= uidParamName #>'] === 'undefined')) {
                    this.<#= uidParamName #> = this.route.snapshot.data['<#= uidParamName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= NavPrefix #>'] === 'undefined')) {
                    this.<#= NavPrefix #> = this.route.snapshot.data['<#= NavPrefix #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= OutletNmPropName #>'] === 'undefined')) {
                    this.<#= OutletNmPropName #> = this.route.snapshot.data['<#= OutletNmPropName #>'];
                }
            }
        }
        luid = luid + ':' +this.<#= DepthParamName #>;
        if(this.<#= DepthParamName #> > 1) {
            let lhf: Array<<#= filterResultModelClassName #>> = [];
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                lhf = this.<#= formRootService #>.get<#= HiddenFilterAsFltRsltSuffix #>(JSON.parse(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]));
            }
            if(Array.isArray(lhf)) {
                lhf.forEach((v:{fltrName: string, fltrValue: any}) => {
                    luid = luid + ':' + v.fltrName + ':' + v.fltrValue
                });
            }
            this.<#= HiddenFilterPropName #> = lhf;
            this.<#= showBackBtnPropName #> = true;
        } else {
            this.<#= showBackBtnPropName #> = false;
        }
        this.<#= uidParamName #> = luid;
        let si: string|any = this.<#= AppSettingServicePropName #>.<#= getStorageItemMethodName #>(this.<#= uidParamName #>);
        if(!(typeof si === 'undefined')) {
            if(!(si === null)) {
                this.<#= externalFilterPropName #> = JSON.parse(si);
            }
        }
        

        this.rowMenuItemsData[0].enabled = this.rowMenuItemsData[0].enabled && ((this.permMask & 4) === 4); // modify
        this.rowMenuItemsData[1].enabled = this.rowMenuItemsData[1].enabled && ((this.permMask & 2) === 2); // delete
<#
    {
        if (detailViewNames.Count > 0) {
#>
        let msk: number = 0;
<#
        }
        int id = 1;
        foreach(string detailViewName in detailViewNames) {
            ModelViewSerializable detailView = GetViewByName(Context, detailViewName);
            if(detailView == null) {
                continue;
            }
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) {
                continue;
            }
            if (foreignKeys.Count < 1) {
                continue;
            }
            {
                foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
#>
        msk = this.<#= AppSettingServicePropName #>.getViewModelMask('<#= detailViewName #>');
        if((msk & 1) === 1) {
            this.rowMenuItemsData.push(
             { id: '<#= id #>', caption: 'Navigate to: <#= detailViewName #> : <#= foreignKey.NavigationName #>', iconName: 'arrow_forward', iconColor: 'primary', enabled: true, 
                data: {
                    <#= ViewNameParamName #>: '<#= detailViewName #>',
                    <#= NavigationParamName #>: '<#= foreignKey.NavigationName #>',
                }
             }
            );
        }
<#
                    id++;
                }
            }
        }
    }
#>
        this.isOnInitCalled = true;
    }
    @Output('on-row-command') onRowCommand: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Output('on-table-command') onTableCommand: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();

    rowCommand(v: <#= eventEmitterDataModelClassName #>) {
        let qp: string[] = [];
<#
        if(primKeys != null) {
#>      
        let flt: any = {
<#
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { 
#>      
          <#= GetTypeScriptPropertyName(primKey, Model) #>: v.value.<#= GetTypeScriptPropertyName(primKey, Model) #>,
<#
            }
#>
        };
<#
        } else {
#>
        let flt: any = v.value;
<#
        }
#>
        if(v.id === '<#= ActionParamViewMode #>') {
            qp.push( '<#= VPrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            qp.push(JSON.stringify(flt));
        } else if(v.id === '<#= ActionParamUpdateMode #>') {
            qp.push( '<#= UPrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            qp.push(JSON.stringify(flt));
        } else if(v.id === '<#= ActionParamDeleteMode #>') {
            qp.push( '<#= DPrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            qp.push(JSON.stringify(flt));
        } else {
            let id = this.rowMenuItemsData.findIndex(e => { return e.id === v.id; })
            if(id < 0) return;
            let mnItm: IMenuItemData = this.rowMenuItemsData[id];
            if (!(typeof mnItm.data === 'undefined')) {
                if(this.<#= OutletNmPropName #> !== 'primary') return;
                qp.push( this.<#= NavPrefix #> + mnItm.data.view );
                qp.push(JSON.stringify(this.<#= formRootService #>.get<#= HiddenFilterByRowSuffix #>(v.value, mnItm.data.nav)));
            } else {
                this.onRowCommand.emit(v);
                return;
            }
        }
        // this.router.navigate(qp, {relativeTo: this.route});
        if(this.<#= OutletNmPropName #> === 'primary') {
            this.router.navigate(qp, {relativeTo: this.route});
        } else {
            qp[0] = this.<#= OutletNmPropName #> + '2' + qp[0];
            this.router.navigate([{outlets: { [this.<#= OutletNmPropName #>]: null}}], {relativeTo: this.route.parent!.parent}).then(
                ()=> {
                    this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: qp }}], {relativeTo: this.route.parent!.parent});
                }
            );
        }
        
    }
    onDeleteMultiple(sender: <#= searchMltComponentClassName #>) {
<#
    if(Model.IsWebApiDelete) {
#>
        let locdata: <#=  messageDialogInterfaceName #> = {
            title: 'Delete Items',
            message: 'Delete Selected Items ?',
            iconname: 'warning',
            iconcolor: 'warn'
        };
        let dialogRef = this.dialog.open(<#=  messageDialogComponentClassName #>, {
              data: locdata,
            });
        dialogRef.afterClosed().subscribe(async rslt => {
            if (typeof rslt === 'undefined') return;
            if (rslt === null) return;
            let currRowsCp: Array<<#= GetInterfaceName(Model) #>> = sender.currentRow.slice();
            for(let row of currRowsCp) {
                try {
                    // let data: <#= GetInterfaceName(Model) #>  =  
                    await firstValueFrom<<#= GetInterfaceName(Model) #>>(this.<#= formRootService #>.<#= DeleteOneMethodName #>(<# 
                    {
                        int counter = 0;
                        List<ModelViewPropertyOfVwSerializable> lclprimKeys = GetPrimaryKeyProps(Context, Model.ViewName);
                        foreach(ModelViewPropertyOfVwSerializable prop in lclprimKeys) {
                            if(counter > 0) { #>, <#} #>  row.<#= GetTypeScriptPropertyName(prop, Model) #> <#
                            counter++;
                        }
                    }#>));
                    let i: number = sender.dataSource.indexOf(row); 
                    sender.deselectRows([row]);
                    sender.dataSource.splice(i, 1);
                    sender.dataSource = sender.dataSource.slice(0);
                } catch (error) {
                    this.<#= AppSettingServicePropName #>.showError('http', error)
                }
            }
        });
<#
    }
#>
    }
    tableCommand(v: <#= eventEmitterDataModelClassName #>) {
        if(v.id === '<#= ActionParamAddMode #>') {
            let qp: string[] = [];
            qp.push( '<#= APrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            // this.router.navigate(qp, {relativeTo: this.route});

            if(this.<#= OutletNmPropName #> === 'primary') {
                this.router.navigate(qp, {relativeTo: this.route});
            } else {
                qp[0] = this.<#= OutletNmPropName #> + '2' + qp[0];
                this.router.navigate([{outlets: { [this.<#= OutletNmPropName #>]: null}}], {relativeTo: this.route.parent!.parent}).then(
                    ()=> {
                        this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: qp }}], {relativeTo: this.route.parent!.parent});
                    }
                );
            }
        } else if(v.id === '<#= ActionParamDeleteMode #>') {
            this.onDeleteMultiple(v.sender)
        } else {
            this.onTableCommand.emit(v);
            return;
        }
    }
    <#= applyFilterPropName #>(frm: <#= searchMltComponentClassName #> | any) {
        if(this.isPostNavApplied) {
            return;
        }
        this.isPostNavApplied = true;

        
        let act: string | any = undefined;
        if (!(typeof this.route.snapshot.queryParams['<#= ActionParamName #>'] === 'undefined')) {
            act = this.route.snapshot.queryParams['<#= ActionParamName #>'];
        }
        if(typeof act === 'undefined') return;
        if(act === null) return;

        let flt: <#= GetInterfaceName(Model) #> | any = JSON.parse(this.route.snapshot.queryParams['<#= ItemParamName #>']);
        if(typeof flt === 'undefined') return;
        if(flt === null) return;

        if ((act === '<#= APrefix #>') ||
            (act === '<#= UPrefix #>')) {
<#
    for(int i = 0 ; i < primKeys.Count; i++) {
#>
            if(typeof flt['<#= GetTypeScriptPropertyName(primKeys[i], Model) #>'] === 'undefined') {
                return;
            }
            let <#= GetPrimKeyVarName(primKeys[i]) #>: any = flt['<#= GetTypeScriptPropertyName(primKeys[i], Model) #>'];
<#
    }
#>
            this.<#= formRootService #>.<#= GetOneMethodName #>(
<# {
            int k = 0;
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { 
                if (k > 0)  {
#>
                , <#= GetPrimKeyVarName(primKey) #>
<#
                } else {
                    k++;
#>
                  <#= GetPrimKeyVarName(primKey) #>
<#
                }
            }
   }
#> 
            ).subscribe({
                   next: (data: <#= GetInterfaceName(Model) #> ) => { // success path
                        if (typeof data === 'undefined') return;
                        if (data === null) return;
                        if(typeof frm.dataSource === 'undefined') return;
                        if(!Array.isArray(frm.dataSource)) return;
                        let i: number = frm.dataSource.findIndex((e:any) => {
                            return <# {int k = 0;
                                    foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { if (k > 0)  { #> && <# } 
                                    #> (e.<#= GetTypeScriptPropertyName(primKeys[k], Model) #> === data.<#= GetTypeScriptPropertyName(primKeys[k], Model) #>)<#
                                    k++;
                                }} #>
                        });
                        if(i < 0) {
                            frm.dataSource.splice(0, 0, data);
                            frm.dataSource = frm.dataSource.slice(0);
                        }
                        frm.selectRows([data]);
                   },
                   error: (error) => { // error path
                        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
                        this.onBackBtn(); // navigation is correct: onBackBtn is correct method here
                   } 
                });
            return;
        }
    }
    onBackBtn(e?: any) {
        if (this.<#= DepthParamName #> > 1) {
            this.<#= AppSettingServicePropName #>.<#= removeStorageItemMethodName #>(this.<#= uidParamName #> as string);
            // this.router.navigate(['../../'], {relativeTo: this.route});
            if(this.<#= OutletNmPropName #> === 'primary') {
                this.router.navigate(['../../'], {relativeTo: this.route});
            } else {
                // there is no parant, so do just hide detail component
                this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: null }}], {relativeTo: this.route.parent!.parent});
            }
        }
    }

    public <#= externalFilterPropName #>: <#= GetInterfaceFilterName(Model) #> | any = {}

    <#= OnBeforeSqueryMethodName #>(cf: <#= GetInterfaceFilterName(Model) #> | any): void {
        if (this.<#= uidParamName #> === null) return;
        let cfs: <#= GetInterfaceFilterName(Model) #> = {};
        if(!(typeof cf === 'undefined')) {
            if(!(cf === null)) {
                cfs = cf;
            }
        }
        this.<#= AppSettingServicePropName #>.<#= setStorageItemMethodName #>(this.<#= uidParamName #>, JSON.stringify(cfs));
    }

}


<#+
    string GetInterfaceName(ModelViewSerializable model) {
        if(model == null) {
            return "I";
        }
        return "I"+model.ViewName;
    }
    ModelViewPropertyOfFkSerializable GetScalarPropByPrincipalKeyProp(ModelViewForeignKeySerializable foreignKey, ModelViewKeyPropertySerializable principalKeyProp) {
        if ((foreignKey == null) || (principalKeyProp == null)) {
            return null;
        }
        if(foreignKey.ScalarProperties == null) {
            return null;
        }
        return foreignKey.ScalarProperties.Where(p => (p.OriginalPropertyName == principalKeyProp.OriginalPropertyName) && (p.ForeignKeyNameChain == foreignKey.NavigationName)).FirstOrDefault();
    }

    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginalPropertyNameAndForeignKeyNameChain(ModelViewSerializable model, string originalPropertyName, string foreignKeyNameChain) {
        if ( (model == null) || (string.IsNullOrEmpty(originalPropertyName)) ) {
            return null;
        }
        if(string.IsNullOrEmpty(foreignKeyNameChain)) {
            return model.ScalarProperties.Where(p => (p.OriginalPropertyName == originalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain))).FirstOrDefault();
        } else {
            return model.ScalarProperties.Where(p => (p.OriginalPropertyName == originalPropertyName) && (p.ForeignKeyNameChain==foreignKeyNameChain)).FirstOrDefault();
        }
    }
    ModelViewSerializable GetViewByName(DbContextSerializable context, string ViewName) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
    }
    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }
    List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
        {
            if (result == null)
            {
                result = new List<string>();
            }
            if ((model == null) || (context == null))
            {
                return result;
            }
            if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if(primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewSerializable> details =
                context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
            if(details.Count < 1)
            {
                return result;
            }
            foreach(ModelViewSerializable detail in details)
            {
                if (detail.ScalarProperties == null) continue;
                if (detail.ForeignKeys == null) continue;
                if (detail.ForeignKeys.Count < 1) continue;
                List<ModelViewForeignKeySerializable> ForeignKeys =
                    detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
                if (ForeignKeys.Count < 1) continue;
                bool canBeUsed = false;
                foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
                {
                    bool hasForeignKeyProps = true;
                    if (ForeignKey.ForeignKeyProps != null)
                    {
                        for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                        {
                            ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                            if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                            {
                                hasForeignKeyProps = false;
                            }
                            if(!hasForeignKeyProps)
                            {
                                ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                                if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                                {
                                    hasForeignKeyProps = true;
                                } else
                                {
                                    break;
                                }
                            }
                        }
                    } else
                    {
                        hasForeignKeyProps = false;
                    }
                    if (hasForeignKeyProps)
                    {
                        canBeUsed = true;
                        break;
                    }
                }
                if(canBeUsed)
                {
                    if(!result.Contains(detail.ViewName))
                    {
                        result.Add(detail.ViewName);
                    }
                }
            }
            return result;
    }
    List<ModelViewForeignKeySerializable> GetDetailViewForeignKeys(ModelViewSerializable model, ModelViewSerializable detail, List<ModelViewForeignKeySerializable> result)
    {
            if (result == null) result = new List<ModelViewForeignKeySerializable>();
            if ((model == null) || (detail == null))
            {
                return result;
            }
            if ((model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null))
            {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if (primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewForeignKeySerializable> ForeignKeys =
                detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
            if (ForeignKeys.Count < 1)
            {
                return result;
            }
            foreach (ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
            {
                bool hasForeignKeyProps = true;
                if (ForeignKey.ForeignKeyProps != null)
                {
                    for (int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                    {
                        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                        hasForeignKeyProps =
                            detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
                        if (!hasForeignKeyProps)
                        {
                            ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                            hasForeignKeyProps = detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName));
                            {
                                hasForeignKeyProps = true;
                            }
                            if(!hasForeignKeyProps)
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    hasForeignKeyProps = false;
                }
                if (hasForeignKeyProps)
                {
                    result.Add(ForeignKey);
                    break;
                }
            }
            return result;
    }
    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }
    string GetCrossComponentFolderName(ModelViewSerializable model, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetContextComponentClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    List<ModelViewPropertyOfVwSerializable> GetPrimaryKeyProps(DbContextSerializable context, string viewName) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return result;
        }
        return GetModelPrimaryKeyProps( context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault() );
    }

#>
