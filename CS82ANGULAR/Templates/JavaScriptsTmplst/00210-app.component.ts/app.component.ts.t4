<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#
    string appSettingServiceFolder                  = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName               = GetServiceClassName(Model, appSettingServiceFolder);

    string appHtmlComponentFolder                   = "00210-app.component.html";
    string appCssComponentFolder                    = "00210-app.component.css";
    string appComponentFolder                       = "00210-app.component.ts";
    string appComponentClassName                    = GetComponentClassName(Model, appComponentFolder);

    string AppSettingServicePropName                = "appGlblSettings";

#>

import { Component } from '@angular/core';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Observable } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { <#= appSettingServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appComponentFolder)#>';



@Component({
  selector: 'app-root',
  templateUrl: '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appHtmlComponentFolder, appComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appCssComponentFolder, appComponentFolder) #>.css']
})
export class AppComponent {
    apptitle = 'LitApp';

    isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)
    .pipe(map(result => result.matches), shareReplay());

    constructor(private breakpointObserver: BreakpointObserver, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>) {
    //<#= AppSettingServicePropName #>.appearance = 'fill';
    }

    get userName(): string|null {
        return this.<#= AppSettingServicePropName #>.userName;
    }  
}

