<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#
    string appSettingServiceFolder                  = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName               = GetServiceClassName(Model, appSettingServiceFolder);

    string appHtmlComponentFolder                   = "00210-app.component.html";
    string appCssComponentFolder                    = "00210-app.component.css";
    string appComponentFolder                       = "00210-app.component.ts";
    string appComponentClassName                    = GetComponentClassName(Model, appComponentFolder);

    string AppSettingServicePropName                = "appGlblSettings";
    string toastComponentName                       = "ToastsContainer";

#>

import { Component, OnInit, TemplateRef } from '@angular/core';
import { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';
import { Observable } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { <#= appSettingServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appComponentFolder)#>';

@Component({
	selector: 'app-toasts',
	template: `
		<ngb-toast
			*ngFor="let toast of toastService.toasts"
			[class]="toast.classname"
            [header]="toast.headertext"
			[autohide]="true"
			[delay]="toast.delay || 5000"
			(hidden)="toastService.removeToast(toast)">
			<ng-template [ngIf]="isTemplate(toast)" [ngIfElse]="text">
				<ng-template [ngTemplateOutlet]="toast.textOrTpl"></ng-template>
			</ng-template>

			<ng-template #text>{{ toast.textOrTpl }}</ng-template>
		</ngb-toast>
	`,
	host: { class: 'toast-container position-fixed top-0 end-0 p-3', style: 'z-index: 1200' },
})
export class <#= toastComponentName #> {
	constructor(public toastService: <#= appSettingServiceClassName #>) {}

	isTemplate(toast) {
		return toast.textOrTpl instanceof TemplateRef;
	}
}


@Component({
  selector: 'app-root',
  templateUrl: '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appHtmlComponentFolder, appComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appCssComponentFolder, appComponentFolder) #>.css']
})
export class AppComponent implements OnInit {
    apptitle = 'LitApp';
    isSideBarCollapsed: boolean = false;

    isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)
    .pipe(map(result => result.matches), shareReplay());

    constructor(private breakpointObserver: BreakpointObserver, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>) {
    //<#= AppSettingServicePropName #>.appearance = 'fill';
    }

    ngOnInit() {
        this.breakpointObserver
        .observe(Breakpoints.Handset)
        .subscribe((state: BreakpointState) => {
        if (state.matches) {
            this.isSideBarCollapsed = true;
        } else {
            this.isSideBarCollapsed = false;
        }
        });
    }

    get userName(): string|null {
        return this.<#= AppSettingServicePropName #>.userName;
    }  
}

