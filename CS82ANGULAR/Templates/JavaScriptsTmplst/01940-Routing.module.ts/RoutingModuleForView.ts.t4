<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#
    string DepthParamName               = "depth"; // there exists one copy per url: if depth > 1 
    string ActionParamName              = "mode";  // there exists one copy per url for Add/Update/Delete. it should be the last item
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";
    string ActionParamCancelMode        = "cancel";

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";


    string HiddenFilterSelector         = "hidden-filter";
    string HiddenFilterPropName         = "hiddenFilter";

    string ShowErrorMethodName          = "showError";
    string OnAfterSubmitMethodName      = "onAfterSubmit";
    string ShowFilterPropName           = "showFilter";
    string TitlePropName                = "title";
    string IsDetailPropName             = "isdtl";
    

    string EformModePropName            = "eformMode";
    string FormControlModelPropName     = "eformControlModel";
    string FormControlNewModelPropName  = "eformNewControlModel";
    string AppSettingServicePropName    = "appGlblSettings";
    string formRootService              = "frmRootSrv";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";


    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string viewInterfaceFolder          = "01100-.interface.ts";
    string viewServiceFolder            = "01400-.service.ts";


    string reditComponentFolder         = "01820-Redit.component.ts";


    string rvComponentFolder            = "01820-RV.component.ts";
    string raComponentFolder            = "01822-RA.component.ts";
    string ruComponentFolder            = "01824-RU.component.ts";
    string rdComponentFolder            = "01826-RD.component.ts";

    string rlistComponentFolder         = "01920-Rlist.component.ts";
    string routingModuleFolder          = "01940-Routing.module.ts";
                                           

    string appSettingServiceClassName = GetCommonServiceClassName(Context, appSettingServiceFolder);
    string serviceClassName = GetServiceClassName(Model, viewServiceFolder);
    string filterResultModelClassName = GetModelClassName(Context, filterResultModelFolder);
    List<ModelViewPropertyOfVwSerializable> primKeys= GetModelPrimaryKeyProps(Model);

    string routingModuleClassName = GetModuleClassName(Model, routingModuleFolder);

    List<Tuple<ModelViewSerializable, string, int>> nodes = new List<Tuple<ModelViewSerializable, string, int>>();
    List<string> allViewNames= new List<string>();
    nodes.Add(new Tuple<ModelViewSerializable, string, int>( Model, Model.ViewName, 1));
    allViewNames.Add(Model.ViewName);

    {
        int currId= 0;
        while(currId < nodes.Count) {
            Tuple<ModelViewSerializable, string, int> masterNode = nodes[currId];
            ModelViewSerializable masterView = masterNode.Item1;
            List<ModelViewPropertyOfVwSerializable> masterPrincipals = GetModelPrimaryKeyProps(masterView);
            string CurrPath = masterNode.Item2;
            int CurrDepth = masterNode.Item3 + 1;
            if(CurrDepth == 2) {
                CurrPath = CurrPath + "/:" + DepthParamName;
            }
            List<string> viewNames = GetDetailViews(masterView, Context, null);
            foreach(string viewName in viewNames) {
                ModelViewSerializable detail = GetModelViewByName(Context, viewName);
                if(nodes.Count(p => p.Item1 == detail) > 2) {
                    continue;
                }
                string newPath = CurrPath + "/" + viewName;
                for(int i = 0; i < masterPrincipals.Count; i++) {
                    newPath = newPath + "/:p"+CurrDepth + "x" + i;
                }
                List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(masterView, detail, null);
                foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                    nodes.Add(new Tuple<ModelViewSerializable, string, int>(  detail, newPath + "/"+foreignKey.NavigationName, CurrDepth));
                    if (!allViewNames.Any(v => v == detail.ViewName)) {
                        allViewNames.Add(detail.ViewName);
                    }
                }
            }
            currId++;
        }
    }
#>



import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
<#
    foreach(string viewName in allViewNames) {
        ModelViewSerializable amodel = GetViewByName(Context, viewName);
#>
import { <#= GetComponentClassName(amodel, reditComponentFolder) #> } from '<#=  GetCrossComponentFolderName(Model, routingModuleFolder, Context, viewName, reditComponentFolder) #>';
import { <#= GetComponentClassName(amodel, rlistComponentFolder) #> } from '<#=  GetCrossComponentFolderName(Model, routingModuleFolder, Context, viewName, rlistComponentFolder) #>';
<#
    }
#>

const routes: Routes = [
<#
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;
        List<ModelViewPropertyOfVwSerializable> aModelPrincipals = GetModelPrimaryKeyProps(aModel);
        string aPath= "";
        for(int i = 0; i <  aModelPrincipals.Count; i++) {
            aPath= aPath + "/:p"+CurrDepth + "x" + i;
        }
        aPath= aPath + "/:" + ActionParamName;
        bool incEdit= true;
        if (aModelPrincipals.Count < 1) {
#>
//
//warning: for the View   <#= aModel.ViewName #> the Primary Key properties not included in the list of View properties
//
<#
            incEdit= false;
        } if (aModelPrincipals.Count != aModel.PrimaryKeyProperties.Count) {
#>
//
//warning: for the View   <#= aModel.ViewName #> not all Primary Key properties included in the list of View properties
//
<#
            incEdit= false;
        }
        if (incEdit) {
#>
    { path: '<#= node.Item2 + aPath #>', component: <#= GetComponentClassName(aModel, reditComponentFolder) #>, data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Modify(Delete) <#= aModel.Title #>' }  },
    { path: '<#= node.Item2 + "/:" + ActionParamName #>', component: <#= GetComponentClassName(aModel, reditComponentFolder) #>, data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Add <#= aModel.Title #>'  }  },
<#
        }
#>
    { path: '<#= node.Item2 #>', component: <#= GetComponentClassName(aModel, rlistComponentFolder) #>, data: { <#= FilterMaxHeightPropName #>: 2, <#= MaxHeightPropName #>: 10, <#= ShowFilterPropName #>: true, <#= TitlePropName #>: '<#= aModel.PluralTitle #>'  }  },
<#
    }
    if (nodes.Count > 0) {
#>
    { path: '',   redirectTo: '/<#= nodes[0].Item2 #>', pathMatch: 'full' }
<#
    }
#>
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class <#= routingModuleClassName #> { }


