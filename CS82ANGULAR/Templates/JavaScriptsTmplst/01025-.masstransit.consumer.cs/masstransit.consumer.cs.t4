<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
#nullable disable
using MassTransit;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;

<#

    string extforlkupInterfaceFolder    = "01005-.extforlkup.interface.cs";
    string lookupheperFolder            = "01020-.lookupheper.cs";
    string extforlkupConsumerFolder     = "01025-.masstransit.consumer.cs";
    string ExtForLkUpMsgActionPropName  = "Action";
    string ExtForLkUpMsgOldPropName     = "OldVals";
    string ExtForLkUpMsgNewPropName     = "NewVals";

    string extendedMdlInterface                 =  GetExtForLkUpInterfaceName(Model);
    string extendedMdlMsgInterface              =  GetExtForLkUpMsgInterfaceName(Model);

    string extendedMdlMsgConsumer               =  GetExtForLkUpMsgConsumerClassName(Model);
    string extendedMdlMsgConsumerDefinition     =  GetExtForLkUpMsgConsumerDefinitionClassName(Model);

    

    string dbContextNameSpace           = GetDbContextNameSpace(Context);
    string viewModelNameSpace           = GetViewModelNameSpace(Model);
    string lookupHeperNameSpace         = GetTypeNameSpace(Model, Context, lookupheperFolder);
    string destinationNameSpace         = GetTypeNameSpace(Model, Context, extforlkupConsumerFolder);
    string extforlkupInterfaceNameSpace =  GetTypeNameSpace(Model, Context, extforlkupInterfaceFolder);

    string staticM2mUpdateAllMethodName = GetM2mStaticUpdateMethodName(Model);
    string staticM2mClassName           = GetM2mStaticClassName(Model);


    List<string> namespaces = new List<string>();
    if (!string.IsNullOrEmpty(dbContextNameSpace)) {
        if (!string.Equals(dbContextNameSpace, destinationNameSpace)) {
            namespaces.Add(dbContextNameSpace);
        }
    }
    if (!string.IsNullOrEmpty(viewModelNameSpace)) {
        if (!string.Equals(viewModelNameSpace, destinationNameSpace)) {
            if(!namespaces.Any(p => p == viewModelNameSpace)) namespaces.Add(viewModelNameSpace);
        }
    }
    if (!string.IsNullOrEmpty(lookupHeperNameSpace)) {
        if (!string.Equals(lookupHeperNameSpace, destinationNameSpace)) {
            if(!namespaces.Any(p => p == lookupHeperNameSpace)) namespaces.Add(lookupHeperNameSpace);
        }
    }
    if (!string.IsNullOrEmpty(extforlkupInterfaceNameSpace)) {
        if (!string.Equals(extforlkupInterfaceNameSpace, destinationNameSpace)) {
            if(!namespaces.Any(p => p == extforlkupInterfaceNameSpace)) namespaces.Add(extforlkupInterfaceNameSpace);
        }
    }

    

#>



/*
    according to https://masstransit-project.com/usage/configuration.html#configuration
    make sure Program.cs file contains the following code:

#region MassTransit config
using MassTransit;
#endregion
...
var builder = WebApplication.CreateBuilder(args);
...

#region MassTransit config
builder.Services.AddMassTransit(x => {

    x.AddConsumer<<#= extendedMdlMsgConsumer #>>(typeof(<#= extendedMdlMsgConsumerDefinition #>));
        //.Endpoint(e =>
        //{
            // override the default endpoint name
            // e.Name =   <#= GetDashedName(Model.ViewName) #>;

            // specify the endpoint as temporary (may be non-durable, auto-delete, etc.)
            e.Temporary = false;

            // specify an optional concurrent message limit for the consumer
            e.ConcurrentMessageLimit = 8;

            // only use if needed, a sensible default is provided, and a reasonable
            // value is automatically calculated based upon ConcurrentMessageLimit if 
            // the transport supports it.
            e.PrefetchCount = 16;

            // set if each service instance should have its own endpoint for the consumer
            // so that messages fan out to each instance.
            e.InstanceId = "something-unique";
        //});

    x.UsingRabbitMq((context, configurator) => {
        configurator.Host("192.168.100.4", "RabbitMq_virtual_host_name", h =>
        {
            h.Username("RabbitMq_admin_name");
            h.Password("RabbitMq_admin_password");
            // 
            // Cluster settings
            //
            // h.UseCluster((configureCluster) =>
            // {
            //   configureCluster.Node("192.168.100.5");
            //   configureCluster.Node("192.168.100.6");
            //   ...
            //   configureCluster.Node("192.168.100.10");
            // });
            // h.PublisherConfirmation = true;
            //h.ConfigureBatchPublish(configure =>
            //{
            //});
        });
        // 
        // Quorum Queue settings
        //
        // configurator.SetQuorumQueue(3);
        //

        configurator.ConfigureEndpoints(context);
    });
});
builder.Services.AddOptions<MassTransitHostOptions>()
                .Configure(options =>
                {
                    // if specified, waits until the bus is started before
                    // returning from IHostedService.StartAsync
                    // default is false
                    options.WaitUntilStarted = true;

                    // if specified, limits the wait time when starting the bus
                    options.StartTimeout = TimeSpan.FromSeconds(10);

                    // if specified, limits the wait time when stopping the bus
                    options.StopTimeout = TimeSpan.FromSeconds(30);

                });
#endregion


*/



<#
foreach(var nmsp in namespaces) {
#>
using <#= nmsp #>;
<#
}
#>


namespace <#= destinationNameSpace #> {

    public class <#= extendedMdlMsgConsumer #>: IConsumer<<#= extendedMdlMsgInterface #>> {
        private readonly ILogger<<#= extendedMdlMsgConsumer #>> _logger;
        // private readonly <#= Context.DbContextClassName #> db;
        IServiceScopeFactory _serviceScopeFactory;

        // public <#= extendedMdlMsgConsumer #>(<#= Context.DbContextClassName #> dbcontext, ILogger<<#= extendedMdlMsgConsumer #>> logger)
        public <#= extendedMdlMsgConsumer #>(IServiceScopeFactory serviceScopeFactory, ILogger<<#= extendedMdlMsgConsumer #>> logger)
        {
            // db = dbcontext;
            _serviceScopeFactory = serviceScopeFactory;
            _logger = logger;
        }

        public async Task Consume(ConsumeContext<<#= extendedMdlMsgInterface #>> context)
        {
            // _logger.LogInformation("Order Submitted: {OrderId}", context.Message.OrderId);
            using (IServiceScope scope = _serviceScopeFactory.CreateScope()) {
                <#= Context.DbContextClassName #> db = scope.ServiceProvider.GetRequiredService<<#= Context.DbContextClassName #>>();
                await <#= staticM2mClassName #>.<#= staticM2mUpdateAllMethodName #>(db, context.Message.<#= ExtForLkUpMsgActionPropName #>, context.Message.<#= ExtForLkUpMsgOldPropName #>, context.Message.<#= ExtForLkUpMsgNewPropName #>);
            }
        }
    }

    public class <#= extendedMdlMsgConsumerDefinition #>: ConsumerDefinition<<#= extendedMdlMsgConsumer #>> {
        public <#= extendedMdlMsgConsumerDefinition #>()
        {
            // override the default endpoint name
            // EndpointName = "order-service";
            //
            // limit the number of messages consumed concurrently
            // this applies to the consumer only, not the endpoint
            // ConcurrentMessageLimit = 8;
        }
        protected override void ConfigureConsumer(IReceiveEndpointConfigurator endpointConfigurator,
            IConsumerConfigurator<<#= extendedMdlMsgConsumer #>> consumerConfigurator)
        {
            // configure message retry with millisecond intervals
            endpointConfigurator.UseMessageRetry(r => r.Intervals(100,200,500,800,1000));

            // use the outbox to prevent duplicate events from being published
            // endpointConfigurator.UseInMemoryOutbox();
        }
    }
}

