<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#



    string appSettingServiceFolder          = "00015-app-glbl-settings.service.ts";
    string appInterceptorFolder             = "00200-app-glbl.interceptor.ts";

    string appInterceptorClassName          = GetInterceptorClassName(Model, appInterceptorFolder);

    string appSettingServiceClassName       = GetServiceClassNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appInterceptorFolder);

    string AppSettingServicePropName        = "appGlblSettings";
    string getAuthIntoMethodName            = "getAuthInto";
    string tokenTypePropName                = "token_type";
    string accessTokenPropName              = "access_token";

#>

/*
The following should be added to the file 'app.module.ts':

    providers: [
        {
          provide: HTTP_INTERCEPTORS,
          useClass: <#= appInterceptorClassName #>,
          multi: true
        }
    ],

*/


import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';
import { <#= appSettingServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appInterceptorFolder)#>';

@Injectable()
export class <#= appInterceptorClassName #> implements HttpInterceptor {
  constructor(private <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>) {}
  intercept(req: HttpRequest<any>, next: HttpHandler) {
    let authInfo = this.<#= AppSettingServicePropName #>.<#= getAuthIntoMethodName #>();
    if(typeof authInfo === 'undefined') {
        return next.handle(req);
    }
    if(authInfo === null) {
        return next.handle(req);
    }
    if ((typeof authInfo.access_token === 'undefined') || (typeof authInfo.token_type === 'undefined')) {
        return next.handle(req);
    }
    if ((authInfo.access_token === null) || (authInfo.token_type === null)) {
        return next.handle(req);
    }
    const authReq = req.clone({ setHeaders: { Authorization: authInfo.<#= tokenTypePropName #> + ' ' +  authInfo.<#= accessTokenPropName #>} });
    return next.handle(authReq);
  }
}

