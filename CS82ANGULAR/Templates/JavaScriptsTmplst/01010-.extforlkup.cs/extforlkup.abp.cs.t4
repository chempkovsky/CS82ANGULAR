<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
#nullable disable
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Volo.Abp.EventBus;
using System;

<#

    string extforlkupInterfaceFolder    = "01005-.extforlkup.interface.cs";
    string extforlkupFolder             = "01010-.extforlkup.cs";

    string ExtForLkUpMsgTenantIdPropName    = "TenantId";
    string ExtForLkUpMsgActionPropName      = "Action";
    string ExtForLkUpMsgOldPropName         = "OldVals";
    string ExtForLkUpMsgNewPropName         = "NewVals";

    string extendedMdlInterface         =  GetExtForLkUpInterfaceName(Model);
    string etoClassName                 =  GetAbpEtoClassName(Model);
    string etoFullClassName             =  GetAbpEtoFullClassName(Model);
    string etoExClassName               =  GetAbpEtoExClassName(Model);

    string destinationNameSpace         =  GetTypeNameSpace(Model, Context, extforlkupFolder);
    string clonerMdlClass               =  Model.ViewName + "CloneForLkUp";
    string DoCloneMethodName            =  "DoClone";

    string staticM2mClassName = GetM2mStaticClassName(Model);
    string dbContextNameSpace = GetDbContextNameSpace(Context);
    string viewModelNameSpace = GetViewModelNameSpace(Model);


    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);
    List<ModelViewPropertyOfVwSerializable> mappedFlds = new List<ModelViewPropertyOfVwSerializable>();
    List<ModelViewPropertyOfVwSerializable> extFlds = new List<ModelViewPropertyOfVwSerializable>();
    if(searchSchemas != null) {
        foreach(var sch in searchSchemas) {
            ModelViewSerializable m2mModel = sch.Item1;
            ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
            List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
            List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
            List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
            for(int i = 0; i < m2mForeignKey.ForeignKeyProps.Count; i++) {
                ModelViewPropertyOfVwSerializable slrPrp = GetScalarPropByOriginaPropName(m2mForeignKey.PrincipalKeyProps[i].OriginalPropertyName, Model);
                if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                mappedFlds.Add(slrPrp);
            }
            foreach(var searchFkPair in searchFkPairs) {
                ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);

                List<ModelViewEntityPropertySerializable> cukps = GetDictCommonUniqueKeyProps(searchVM.UniqueKeys[0], searchVM);
                if (cukps == null) continue;
                if (cukps.Count < 1) continue;
                ModelViewPropertyOfVwSerializable slrPrp = Model.ScalarProperties.Where(p => p.ViewPropertyName == GetScalarPropByOriginaPropName(cukps[0].OriginalPropertyName, searchVM).ViewPropertyName).FirstOrDefault();
                if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                mappedFlds.Add(slrPrp);
            }
            if(otherFks != null) {
                for(int i = 0; i < otherFks.Count; i++) {
                    for(int j = 0; j < otherFks[i].Key.ForeignKeyProps.Count; j++) {
                        ModelViewPropertyOfVwSerializable slrPrp = Model.ScalarProperties.Where(p => p.ViewPropertyName == GetScalarPropByOriginaPropName(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel).ViewPropertyName).FirstOrDefault();
                        if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                        mappedFlds.Add(slrPrp);
                    }
                }
            }
        }
    }

#>

<# if (!string.IsNullOrEmpty(viewModelNameSpace)) {
 if (!string.Equals(viewModelNameSpace, destinationNameSpace)) {#>
using <#= viewModelNameSpace #>;
<# }} #>




namespace <#= destinationNameSpace #> {

    // [EventName("<#= etoFullClassName #>")]
    public class <#= etoClassName #>  {
<#
        foreach(ModelViewPropertyOfVwSerializable slrPrp in mappedFlds) {
            if(Model.GenerateJSonAttribute) { 
#>
        [JsonPropertyName("<#= slrPrp.JsonPropertyName #>")]
<# 
            } 
            if (slrPrp.IsRequiredInView) {
#>
        [Required]
<# 
            }
            if(slrPrp.Attributes != null) {
                foreach(ModelViewAttributeSerializable a in slrPrp.Attributes) {
                    if ("Required".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("DatabaseGenerated".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Key".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("ForeignKey".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Column".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("Index".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("NotMapped".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
                    if ("InverseProperty".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                        continue;
                    }
#>
        <#= AttribToString(a) #>
<#
                } // foreach(ModelViewAttributeSerializable a in slrPrp.Attributes) { ... }
            } // if(slrPrp.Attributes != null) {...}
            if((!slrPrp.IsNullable) && IsStringPropertyTypeName(slrPrp)) {
#>
        public <#= GetPropertyTypeName(slrPrp) #>  <#= slrPrp.ViewPropertyName #> { get; set; } = null!;

<# 
            } else {
#>
        public <#= GetPropertyTypeName(slrPrp) #>  <#= slrPrp.ViewPropertyName #> { get; set; }

<# 
            } // if((!slrPrp.IsNullable) && IsStringPropertyTypeName(slrPrp)) { ... } else { ... }
        }

        if(searchSchemas!= null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
                if(externalFks != null) {
                    foreach(KeyValuePair<ModelViewForeignKeySerializable,int> externalFk in externalFks) {
                        foreach(ModelViewKeyPropertySerializable fkprop in externalFk.Key.ForeignKeyProps) {
                            ModelViewPropertyOfVwSerializable slrPrp = GetScalarPropByOriginaPropName(fkprop.OriginalPropertyName, m2mModel);
                            if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                            if(extFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                            extFlds.Add(slrPrp);
                            if(m2mModel.GenerateJSonAttribute) { 
#>
        [JsonPropertyName("<#= slrPrp.JsonPropertyName #>")]
<# 
                            } 
                            if (slrPrp.IsRequiredInView) {
#>
        [Required]
<# 
                            }
                            if(slrPrp.Attributes != null) {
                                foreach(ModelViewAttributeSerializable a in slrPrp.Attributes) {
                                    if ("Required".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("DatabaseGenerated".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("Key".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("ForeignKey".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("Column".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("Index".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("NotMapped".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
                                    if ("InverseProperty".Equals( a.AttrName, StringComparison.OrdinalIgnoreCase)) {
                                        continue;
                                    }
#>
        <#= AttribToString(a) #>
<#
                                } // foreach(ModelViewAttributeSerializable a in slrPrp.Attributes) { ... }
                            } // if(slrPrp.Attributes != null) {...}
                            if((!slrPrp.IsNullable) && IsStringPropertyTypeName(slrPrp)) {
#>
        public <#= GetPropertyTypeName(slrPrp) #>  <#= slrPrp.ViewPropertyName #> { get; set; } = null!;

<# 
                            } else {
#>
        public <#= GetPropertyTypeName(slrPrp) #>  <#= slrPrp.ViewPropertyName #> { get; set; }

<# 
                            } // if((!slrPrp.IsNullable) && IsStringPropertyTypeName(slrPrp)) { ... } else { ... }
                        } // foreach(ModelViewKeyProperty fkprop in externalFk.Key.ForeignKeyProps) {...}
                    } // foreach(var externalFk in externalFks) { ... }
                } // if(externalFks != null) { ... }
            } // foreach(var sch in searchSchemas) { ... }
        } // if(searchSchemas!= null) { ... }
#>
    }



    [EventName("<#= etoFullClassName #>")]
    public class <#= etoExClassName #>  {
        public Guid? <#= ExtForLkUpMsgTenantIdPropName #> { get; set; } = null!;
        // 1 - insert; 2 - update; 3 - delete;
        public int <#= ExtForLkUpMsgActionPropName #> { get; set; } 
        public <#= etoClassName #> <#= ExtForLkUpMsgOldPropName #> { get; set; } = null!; 
        public <#= etoClassName #> <#= ExtForLkUpMsgNewPropName #> { get; set; } = null!;
    }


    public static class <#= clonerMdlClass #> {
        public static <#= etoClassName #>  <#= DoCloneMethodName #>(<#= Model.ViewName #> src) {
            <#= etoClassName #> dest = new <#= etoClassName #>();
            if(src != null) {
<#
    if(Model.ScalarProperties != null) {
        foreach(ModelViewPropertyOfVwSerializable sp in mappedFlds) {
#>
                dest.<#= sp.ViewPropertyName #> = src.<#= sp.ViewPropertyName #>;
<#
        }
    }
#>
            }
<#
    if(extFlds.Count > 0) {
#>
// do not forget about external foreign key props
<#
        foreach(ModelViewPropertyOfVwSerializable sp in extFlds) {
#>
    // dest.<#= sp.ViewPropertyName #> = ?????
<#
        }
    }
#>
            return dest;
        }
    }
}

