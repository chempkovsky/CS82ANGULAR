<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>

<#
    string OperatorSufix = "Oprtr";
    string EqualOperator = "eq";
    int percentEq100 = 99;

    
    string EformModePropName        = "eformMode";
    string ButtonDisable            = "BttnDsnbl";

    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string MainFormGroupName        = "mainFormGroup";
    string ComboSufix               = "CmbCntrl";
    string TypeaheadSufix           = "TphdCntrl";
    string TypeaheadDisplaySufix    = "DsplFn";
    string TypeaheadAddDisplaySufix = "AddDsplFn";
    string TypeaheadUpdDisplaySufix = "UpdDsplFn";
    string TypeaheadDelDisplaySufix = "DelDsplFn";

    string TypeaheadAddSelectSufix = "AddSelFn";
    string TypeaheadUpdSelectSufix = "UpdSelFn";
    string TypeaheadDelSelectSufix = "DelSelFn";


    string SearchClickSufix         = "SrchClck";
    string AppearancePropName       = "appearance";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";


    string eformModeEnumlFolder     = "00026-eform-mode.enum.ts";
    string EformModeEnumName = GetCommonEnumClassName(Context, eformModeEnumlFolder);
    
    string viewInterfaceFolder      = "01100-.interface.ts";
    string viewInterfacePageFolder  = "01200-Page.interface.ts";
    string viewInterfaceFltFolder   = "01300-Filter.interface.ts";
    string viewServiceFolder        = "01400-.service.ts";
    string eformCssFolder           = "01500-Eform.component.css";
    string eformHtmlFolder          = "01500-Eform.component.html";
    string eformComponentFolder     = "01500-Eform.component.ts";
    int typeAheadNo = 0;
    int dateTmPickNo = 0;




    int AddCnt = 0;
    int Add2Cnt = 0;
    int Add3Cnt = 0;
    int   Add1Wdth = 0;
    int[] Add2Wdth = new int[] {0, 0};
    int[] Add3Wdth = new int[] {0, 0};

    int UpdateCnt = 0;
    int Update2Cnt = 0;
    int Update3Cnt = 0;
    int   Update1Wdth = 0;
    int[] Update2Wdth = new int[] {0, 0};
    int[] Update3Wdth = new int[] {0, 0};

    int DeleteCnt = 0;
    int Delete2Cnt = 0;
    int Delete3Cnt = 0;
    int   Delete1Wdth = 0;
    int[] Delete2Wdth = new int[] {0, 0};
    int[] Delete3Wdth = new int[] {0, 0};

#>
     <div fxLayout="row" fxLayoutAlign="flex-end space-around" style="margin-bottom: 12px;"> 
        <label fxFlex fxLayoutAlign="flex-start space-around">{{<#= captionPropName #>}}</label>
        <ng-template ngFor let-item [ngForOf]="<#= containerMenuItemsPropName #>">
            <i class="{{'material-icons ml-1 text-'+ item.iconColor}}" type="button" data-toggle="tooltip" title="{{item.caption}}"
            (click)="<#= onContainerMenuItemClickMethodName #>(item)">{{item.iconName}}</i>
            <span></span>
        </ng-template>
        <span fxFlex="1%"></span>
     </div> 
<#


    for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
#>
<div  *ngIf="<#= EformModePropName #> == <#=  InputTypeId.ToString() #>" [formGroup]="<#= MainFormGroupName #>" (ngSubmit)="doSubmit()" fxLayout="row wrap" fxLayoutAlign="space-between" style="margin: 0 15px;">
<#

    bool isNewLine = false;
    for(int i = 0; i < Model.UIFormProperties.Count; i++) {
        ModelViewUIFormPropertySerializable 
                modelViewUIFormPropertySerializable = Model.UIFormProperties[i];
        if (isNewLine || i == 0) {
            isNewLine = false;

            for (int k = i; k < Model.UIFormProperties.Count; k++) {
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenAdd != InputTypeEnum.Hidden)) {
                    AddCnt++;
                }
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenUpdate != InputTypeEnum.Hidden)) {
                    UpdateCnt++;
                }
                if (Model.UIFormProperties[k].IsShownInView && (Model.UIFormProperties[k].InputTypeWhenDelete != InputTypeEnum.Hidden)) {
                    DeleteCnt++;
                }
                if (Model.UIFormProperties[k].IsNewLineAfter) break;
            }

            if(AddCnt == 0) {
                    Add1Wdth = percentEq100;
                    Add2Wdth[0] = percentEq100;
                    Add2Wdth[1] = percentEq100;
                    Add3Wdth[0] = percentEq100;
                    Add3Wdth[1] = percentEq100;
            } else {
                Add1Wdth = 100 / AddCnt;
                Add2Cnt = AddCnt >> 1;
                if (Add2Cnt < 1) { 
                    Add2Wdth[0] = percentEq100;
                } else {
                    Add2Wdth[0] = 100 / Add2Cnt;
                }
                Add2Wdth[1] = 100 / (AddCnt - Add2Cnt);

                Add3Cnt = AddCnt / 3;
                if(Add3Cnt < 1) {
                    Add3Wdth[0] = percentEq100;
                    Add3Wdth[1] = percentEq100;
                } else {
                    if(Add3Cnt == 1) {
                        Add3Wdth[0] = percentEq100;
                    } else {                    
                        Add3Wdth[0] = 100 / Add3Cnt;
                    }
                    Add3Cnt = Add3Cnt * 3;
                    if ((AddCnt - Add3Cnt) > 1) {
                        Add3Wdth[1] = 100 / (AddCnt - Add3Cnt);
                    } else {
                        Add3Wdth[1] = percentEq100;
                    }
                }

            }

            if(UpdateCnt == 0) {
                    Update1Wdth = percentEq100;
                    Update2Wdth[0] = percentEq100;
                    Update2Wdth[1] = percentEq100;
                    Update3Wdth[0] = percentEq100;
                    Update3Wdth[1] = percentEq100;
            } else {
                Update1Wdth = 100 / UpdateCnt;
                Update2Cnt = UpdateCnt >> 1;
                if (Update2Cnt < 1) { 
                    Update2Wdth[0] = percentEq100;
                } else {
                    Update2Wdth[0] = 100 / Update2Cnt;
                }
                Update2Wdth[1] = 100 / (UpdateCnt - Update2Cnt);


                Update3Cnt = UpdateCnt / 3;
                if(Update3Cnt < 1) {
                    Update3Wdth[0] = percentEq100;
                    Update3Wdth[1] = percentEq100;
                } else {
                    if(Update3Cnt == 1) {
                        Update3Wdth[0] = percentEq100;
                    } else {                    
                        Update3Wdth[0] = 100 / Update3Cnt;
                    }
                    Update3Cnt = Update3Cnt * 3;
                    if ((UpdateCnt - Update3Cnt) > 1) {
                        Update3Wdth[1] = 100 / (UpdateCnt - Update3Cnt);
                    } else {
                        Update3Wdth[1] = percentEq100;
                    }
                }
            }

            if(DeleteCnt == 0) {
                    Delete1Wdth = percentEq100;
                    Delete2Wdth[0] = percentEq100;
                    Delete2Wdth[1] = percentEq100;
                    Delete3Wdth[0] = percentEq100;
                    Delete3Wdth[1] = percentEq100;
            } else {
                Delete1Wdth = 100 / DeleteCnt;
                Delete2Cnt = DeleteCnt >> 1; 
                if (Delete2Cnt < 1) { 
                    Delete2Wdth[0] = percentEq100;
                } else {
                    Delete2Wdth[0] = 100 / Delete2Cnt;
                }
                Delete2Wdth[1] = 100 / (DeleteCnt - Delete2Cnt);

                Delete3Cnt = DeleteCnt / 3;
                if(Delete3Cnt < 1) {
                    Delete3Wdth[0] = percentEq100;
                    Delete3Wdth[1] = percentEq100;
                } else {
                    if(Delete3Cnt == 1) {                    
                        Delete3Wdth[0] = percentEq100;
                    } else {
                        Delete3Wdth[0] = 100 / Delete3Cnt;
                    }
                    Delete3Cnt = Delete3Cnt * 3;
                    if ((DeleteCnt - Delete3Cnt) > 1) {
                        Delete3Wdth[1] = 100 / (DeleteCnt - Delete3Cnt);
                    } else {
                        Delete3Wdth[1] = percentEq100;
                    }
                }
            }
            AddCnt = 0;
            UpdateCnt = 0;
            DeleteCnt = 0;
        }
        if (! modelViewUIFormPropertySerializable.IsShownInView ) {
#>
                <input type="hidden" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
<#
        } // if ((! modelViewUIFormPropertySerializable.IsShownInView ) || (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Hidden)) {
        else if ( ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Hidden) && (InputTypeId==1)) ||
                  ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Hidden) && (InputTypeId==2)) ||
                  ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Hidden) && (InputTypeId==3)) )  {
#>
                <input type="hidden" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
<#
        } // else if (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Hidden) {


        if (modelViewUIFormPropertySerializable.IsShownInView) {
            //for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
                InputTypeEnum InputTypeWhenXXX ;
                int XXXCnt ;
                int XXX2Cnt ;
                int XXX3Cnt ;
                int   XXX1Wdth ;
                int[] XXX2Wdth ;
                int[] XXX3Wdth ;
                switch (InputTypeId) {
                    case 1: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenAdd;
                        XXXCnt   = AddCnt;
                        XXX2Cnt  = Add2Cnt;
                        XXX3Cnt  = Add3Cnt;
                        XXX1Wdth = Add1Wdth;
                        XXX2Wdth = Add2Wdth;
                        XXX3Wdth = Add3Wdth;
                        break;
                    case 2: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenUpdate;
                        XXXCnt   = UpdateCnt;
                        XXX2Cnt  = Update2Cnt;
                        XXX3Cnt  = Update3Cnt;
                        XXX1Wdth = Update1Wdth;
                        XXX2Wdth = Update2Wdth;
                        XXX3Wdth = Update3Wdth;
                        break;
                    default: 
                        InputTypeWhenXXX = modelViewUIFormPropertySerializable.InputTypeWhenDelete;
                        XXXCnt   = DeleteCnt;
                        XXX2Cnt  = Delete2Cnt;
                        XXX3Cnt  = Delete3Cnt;
                        XXX1Wdth = Delete1Wdth;
                        XXX2Wdth = Delete2Wdth;
                        XXX3Wdth = Delete3Wdth;
                        break;
                }
                if (XXX1Wdth == 100) {
                    XXX1Wdth = percentEq100;
                }
                if (InputTypeWhenXXX != InputTypeEnum.Hidden) {
                    if(InputTypeWhenXXX == InputTypeEnum.Combo) {
#>

                <input type="hidden"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                <div class="form-group"  fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#= percentEq100.ToString() #>">
                    <label><#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#></label>
                    <select class="form-control" [formControl]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ComboSufix) #>">
                        <option *ngFor="let aVal of <#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, ComboSufix) #>;" [ngValue]="aVal">{{ aVal.<#= GetComboControlListPropertyName(modelViewUIFormPropertySerializable, Model, Context, InputTypeId) #> }}</option>
                    </select>
                    <small class="text-danger" *ngIf="<#= GetExpressionForControlInvalid(modelViewUIFormPropertySerializable, Model, ComboSufix) #>">{{getErrorMessage(<#=  GetExpressionForFormControl(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)}}</small>
                    <small class="text-muted" *ngIf="!(<#= GetExpressionForControlInvalid(modelViewUIFormPropertySerializable, Model, ComboSufix) #>)"><#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty)#></small>
                </div>
<#
                    } /// if(InputTypeWhenXXX == InputTypeEnum.Combo) {}
                    else if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {
#>

                <input type="hidden"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                <div class="form-group" fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#= percentEq100.ToString() #>">
                    <label><#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#></label>
                    <input class="form-control" type="text" placeholder="Placeholder..."  
                                [formControl]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>" 
                                [ngbTypeahead]="<#= GetExpressionForControlList(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>"
                                [editable]="false"
<#
                            if(InputTypeId == 1) {
#>
                                [inputFormatter]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadAddDisplaySufix)#>"
                                [resultFormatter]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadAddDisplaySufix)#>"
                                (selectItem)="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadAddSelectSufix) #>($event)"
                                #typeAhead<#= typeAheadNo #>="ngbTypeahead"
<#
                            } else { 
                                if(InputTypeId == 2) {              
#>
                                [inputFormatter]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadUpdDisplaySufix)#>"
                                [resultFormatter]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadUpdDisplaySufix)#>"
                                (selectItem)="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadUpdSelectSufix) #>($event)"
                                #typeAhead<#= typeAheadNo #>="ngbTypeahead"
<#
                                } else {
#>
                                [inputFormatter]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadDelDisplaySufix)#>"
                                [resultFormatter]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadDelDisplaySufix)#>"
                                (selectItem)="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, TypeaheadDelSelectSufix) #>($event)"
                                #typeAhead<#= typeAheadNo #>="ngbTypeahead"
<#
                                }
                            }
#>
                    >
                    <small class="text-danger" *ngIf="<#= GetExpressionForControlInvalid(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>">{{getErrorMessage(<#=  GetExpressionForFormControl(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)}}</small>
                    <small class="text-muted" *ngIf="!(<#= GetExpressionForControlInvalid(modelViewUIFormPropertySerializable, Model, TypeaheadSufix) #>)"><#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty)#></small>
                </div>
<#

                        typeAheadNo++;
                    } /// if(InputTypeWhenXXX == InputTypeEnum.Typeahead) {}
                    else  
                    {
                            bool hasButton = HasButton(InputTypeWhenXXX);
                            if (hasButton && false) {
#>
                <div   fxLayout="row" fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#= GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#= GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#= percentEq100.ToString() #>">
                    <div class="form-group" fxFlex="94">
<#
                            } else {
#>
                    <div class="form-group" fxFlex.gt-md="<#= GetXXX1Wdth(XXX1Wdth, percentEq100).ToString() #>" fxFlex.gt-sm="<#=  GetGreaterThanPercent(XXXCnt, XXX2Cnt, XXX2Wdth,percentEq100) #>" fxFlex.gt-xs="<#=  GetGreaterThanPercent(XXXCnt, XXX3Cnt, XXX3Wdth,percentEq100) #>" fxFlex="<#=  percentEq100.ToString() #>">
<#
                            }
                            if(!IsBooleanInput(modelViewUIFormPropertySerializable, Model)) {
#>
                        <label><#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty)#></label>
<#
                            }
                            if (IsDateInput(modelViewUIFormPropertySerializable, Model)) {
                                if (InputTypeWhenXXX == InputTypeEnum.ReadOnly) {
#>
                        <div class="input-group" >
                            <input class="form-control" ngbDatepicker #apicker<#= dateTmPickNo #>="ngbDatepicker" container="body"  formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" [readonly]="true">
                            <div class="input-group-append" >
                                <button class="btn btn-outline-secondary " type="button"   (click)="apicker<#= dateTmPickNo #>.toggle()" data-toggle="tooltip" title="Show date dialog" [disabled]="true">
                                    <i class="material-icons md-18 text-primary">date_range</i>
                                </button>
                            </div>
<#
                                } else {
#>
                        <div class="input-group" >
                            <input class="form-control" ngbDatepicker #apicker<#= dateTmPickNo #>="ngbDatepicker" container="body" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                            <div class="input-group-append" >
                                <button class="btn btn-outline-secondary " type="button"   (click)="apicker<#= dateTmPickNo #>.toggle()" data-toggle="tooltip" title="Show date dialog" >
                                    <i class="material-icons md-18 text-primary">date_range</i>
                                </button>
                            </div>
<#
                                }
#>
                        </div>
<#
                                dateTmPickNo++;
                            } else {
                                if(IsMemoInput(modelViewUIFormPropertySerializable, Model)) {
                                    if (hasButton || (InputTypeWhenXXX == InputTypeEnum.ReadOnly)) {
#>
                        <textarea  class="form-control" placeholder="Placeholder..." formControlName="<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" [readonly]="true"></textarea>
<#
                                    } else {
#>
                        <textarea  class="form-control" placeholder="Placeholder..." formControlName="<#=  GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>"></textarea>
<#
                                    }
                                } else {
                                    if( IsBooleanInput(modelViewUIFormPropertySerializable, Model) ) {
#>
                 <!--       <input matInput style="display: none" > -->
<#
                                        if (InputTypeWhenXXX == InputTypeEnum.ReadOnly) { 
#>
                        <label></label>
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>"  [disabled]="true">
                                <#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty) #>
                            </label>
                        </div>
<#
                                        } else {
#>
                        <label></label>
                        <div class="checkbox">
                            <label>
                                <input type="checkbox" formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
                                <#= GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayLabelProperty) #>
                            </label>
                        </div>
<#
                                        }
                                    }
                                    else
				                    {
                                        if (hasButton || (InputTypeWhenXXX == InputTypeEnum.ReadOnly)) { 
#>
                        <div class="input-group">
                            <input class="form-control" <#= GetFormatters(modelViewUIFormPropertySerializable, Model) #> placeholder="Placeholder..." formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>" [readonly]="true">
<#
                                            if (hasButton) {                           
#>
                            <div class="input-group-append" >
                                <button class="btn btn-outline-secondary" type="button"  [disabled]="<#= GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, ButtonDisable) #>" (click)="<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>()" data-toggle="tooltip" title="Search...">
                                    <i class="material-icons md-18 text-primary">search</i>
                                </button>
                            </div>
                        </div>
<#
                                            } else {
#>
                        </div>
<#
                                            }
                                        } else {
#>
                        <input class="form-control" <#= GetFormatters(modelViewUIFormPropertySerializable, Model) #>  placeholder="Placeholder..." formControlName="<#= GetTypeScriptPropertyNameEx(modelViewUIFormPropertySerializable, Model) #>">
<#
                                        }
                                    }

                                }
                            }
#>
                        <small class="text-danger" *ngIf="<#=  GetExpressionForInvalid(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>">{{getErrorMessage(<#=  GetExpressionForFormControl(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)}}</small>
                        <small class="text-muted" *ngIf="!(<#=  GetExpressionForInvalid(modelViewUIFormPropertySerializable, Model, MainFormGroupName) #>)"><#=  GetDisplayAttributeValueString(modelViewUIFormPropertySerializable, Model, DisplayHintProperty)#></small>
                    </div>
<#
                            if (hasButton && false) {
#>
                    <button mat-icon-button fxFlex="5" aria-label="Search"
                        matTooltip="Select Item"
                        color="primary" (click)="<#=  GetTypeScriptPropertyNameWithSufix(modelViewUIFormPropertySerializable, Model, SearchClickSufix) #>()">
                        <mat-icon>search</mat-icon>
                    </button>
                </div>
<#
                            }
                    } // if (!((InputTypeWhenXXX == InputTypeEnum.Combo) || (InputTypeWhenXXX == InputTypeEnum.Typeahead))) {}
                    switch (InputTypeId) {
                        case 1:
                            AddCnt++;
                            break;
                        case 2:
                            UpdateCnt++;
                            break;
                        case 3:
                            DeleteCnt++;
                            break;
                    } 

                } // if (InputTypeWhenXXX != InputTypeEnum.Hidden) {


//            } // for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {


        } // if (modelViewUIFormPropertySerializable.IsShownInView) {

        if(modelViewUIFormPropertySerializable.IsNewLineAfter) {
#>
                <hr fxFlex="100"/>
<#
            isNewLine = true;
            AddCnt = 0;
            UpdateCnt = 0;
            DeleteCnt = 0;
        }

            }   // for(int i = 0; i < Model.UIFormProperties.Count; i++) {

#> 
</div>

<#

    } // for (int InputTypeId = 1; InputTypeId <= 3; InputTypeId++) {
#>

<#+
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    String GetJavaScriptServiceName(ModelViewSerializable model) {
        string  result = model.ViewName + "Service";
        return result.First().ToString().ToUpper() + result.Substring(1);
    }
    string GetPropertyTypeScriptTypeName(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetJavaScriptToStringMethod(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.datetime": 
                result =  ".toString()"; // .toDateString()
                break;
            case "system.guid":
            case "system.string":
                result =  "";
                break;
            default:
                result =  ".toString()";
                break;
        }
        return result;
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetTypeScriptPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    string GetTypeScriptPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForFormControl(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string mainFormGroupName) {
        return mainFormGroupName + ".controls['" + GetTypeScriptPropertyNameEx(prop, model) + "']";
    }
    string GetExpressionForInvalid(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string mainFormGroupName) {
        return GetExpressionForFormControl(prop, model, mainFormGroupName) + ".invalid && " + GetExpressionForFormControl(prop, model, mainFormGroupName) + ".touched";
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }
    string GetExpressionForControlInvalid(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + ".invalid && " + GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + ".touched";
    }

    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }
    string GetComboControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, mv);
    }
    string GetTypeaheadControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, model);
    }


    string GetFormControlHiddenCondition(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string eformModePropName) {
        if ((prop.InputTypeWhenAdd == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenDelete == InputTypeEnum.Hidden)) {
            return "";
        }
        string result= "*ngIf = \"";
        bool setOr = false;
        if (prop.InputTypeWhenAdd == InputTypeEnum.Hidden) {
            result = result + "(" + eformModePropName + "==1)";
            setOr = true;
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==2)";
            setOr = true;
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==3)";
        }
        return result + "\"";
    }
    int GetXXX1Wdth(int w, int inPercentEq100) {
        if ((w > 5) && (w < inPercentEq100)) {
            w-=1;
        }
        return w;
    }
    int GetGreaterThanPercent(int currCnt, int maxCnt, int[] wdths, int inPercentEq100) {
        int result = wdths[1];
        if (currCnt < maxCnt) {
            result = wdths[0];
        } 
        if (result == 100) {
            result = inPercentEq100;
        }
        if ((result > 5) && (result < inPercentEq100)) result -= 1;
        return result;
    }
    string GetDisplayAttributeValueString(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    bool HasButton(InputTypeEnum inputType) {
        if (inputType == InputTypeEnum.SearchDialog) {
            return true;
        }
        return false;
    }
    bool IsDateInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return ("System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName));
    }
    bool IsBooleanInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.Boolean".Equals(sclrProp.UnderlyingTypeName) || "Boolean".Equals(sclrProp.UnderlyingTypeName) || "bool".Equals(sclrProp.UnderlyingTypeName);
    }
    bool IsMemoInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return false;
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        if (!("System.String".Equals(sclrProp.UnderlyingTypeName) || "String".Equals(sclrProp.UnderlyingTypeName))) {
            return false;
        }
        if(sclrProp.Attributes != null) {
            if(sclrProp.Attributes.Where(a => (a.AttrName == "MaxLength") || (a.AttrName == "StringLength")).Any()) {
                return false;
            }
        }
        if(sclrProp.FAPIAttributes != null) {
            if(sclrProp.FAPIAttributes.Where(a => a.AttrName == "HasMaxLength").Any()) {
                return false;
            }
        }
        return true;
    }


    string GetCommonEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetAtributeUnNamedValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetFormatters(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) return "";
        string rsltStr = GetAtributeUnNamedValue(sclrProp, "DataType");
        if(string.IsNullOrEmpty(rsltStr)) return "";
        if(rsltStr.Replace("\"", "").ToLower() == "tobinaryformatter") {
            return "toBinaryFormatter";
        }          
        return "";
    }
#>
