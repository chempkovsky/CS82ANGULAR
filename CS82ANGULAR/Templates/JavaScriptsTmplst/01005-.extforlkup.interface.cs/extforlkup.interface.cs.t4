<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
#nullable disable
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

<#

    string extforlkupInterfaceFolder    = "01005-.extforlkup.interface.cs";
    string ExtForLkUpMsgActionPropName  = "Action";
    string ExtForLkUpMsgOldPropName     = "OldVals";
    string ExtForLkUpMsgNewPropName     = "NewVals";

    string ConfNamePropName                 = "ConfName";
    string ConfHostNamePropName             = "HostName";
    string ConfUsernamePropName             = "Username";
    string ConfPasswordPropName             = "Password";
    string ConfVirtualHostNamePropName      = "VirtualHostName";
    string ConfClusterIpAddressesPropName   = "ClusterIpAddresses";

    string extendedMdlInterface         =  GetExtForLkUpInterfaceName(Model);
    string extendedMdlMsgInterface      =  GetExtForLkUpMsgInterfaceName(Model);
    string extendedMdlConf              =  GetExtForLkUpConfName(Model);
    string destinationNameSpace         =  GetTypeNameSpace(Model, Context, extforlkupInterfaceFolder);

    string dbContextNameSpace = GetDbContextNameSpace(Context);
    string viewModelNameSpace = GetViewModelNameSpace(Model);


    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);
    List<ModelViewPropertyOfVwSerializable> mappedFlds = new List<ModelViewPropertyOfVwSerializable>();
    List<ModelViewPropertyOfVwSerializable> extFlds = new List<ModelViewPropertyOfVwSerializable>();
    if(searchSchemas != null) {
        foreach(var sch in searchSchemas) {
            ModelViewSerializable m2mModel = sch.Item1;
            ModelViewForeignKeySerializable m2mForeignKey = sch.Item2;
            List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFkPairs = sch.Item3;
            List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = sch.Item4;
            List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
            for(int i = 0; i < m2mForeignKey.ForeignKeyProps.Count; i++) {
                ModelViewPropertyOfVwSerializable slrPrp = GetScalarPropByOriginaPropName(m2mForeignKey.PrincipalKeyProps[i].OriginalPropertyName, Model);
                if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                mappedFlds.Add(slrPrp);
            }
            foreach(var searchFkPair in searchFkPairs) {
                ModelViewSerializable searchVM = GetViewByName(Context, searchFkPair.Key.ViewName);
                ModelViewPropertyOfVwSerializable slrPrp = Model.ScalarProperties.Where(p => p.ViewPropertyName == GetScalarPropByOriginaPropName(searchVM.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, searchVM).ViewPropertyName).FirstOrDefault();
                if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                mappedFlds.Add(slrPrp);
            }
            if(otherFks != null) {
                for(int i = 0; i < otherFks.Count; i++) {
                    for(int j = 0; j < otherFks[i].Key.ForeignKeyProps.Count; j++) {
                        ModelViewPropertyOfVwSerializable slrPrp = Model.ScalarProperties.Where(p => p.ViewPropertyName == GetScalarPropByOriginaPropName(otherFks[i].Key.ForeignKeyProps[j].OriginalPropertyName, m2mModel).ViewPropertyName).FirstOrDefault();
                        if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                        mappedFlds.Add(slrPrp);
                    }
                }
            }
        }
    }

#>



namespace <#= destinationNameSpace #> {

    public interface <#= extendedMdlInterface #> {
<#
        foreach(ModelViewPropertyOfVwSerializable slrPrp in mappedFlds) {
#>
        public <#= GetPropertyTypeName(slrPrp) #>  <#= GetTypeScriptPropertyName(slrPrp, Model) #> { get; set; }

<# 
        } // foreach(ModelViewPropertyOfVwSerializable slrPrp in mappedFlds) { ... }

        if(searchSchemas!= null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = sch.Item5;
                if(externalFks != null) {
                    foreach(KeyValuePair<ModelViewForeignKeySerializable,int> externalFk in externalFks) {
                        foreach(ModelViewKeyPropertySerializable fkprop in externalFk.Key.ForeignKeyProps) {
                            ModelViewPropertyOfVwSerializable slrPrp = GetScalarPropByOriginaPropName(fkprop.OriginalPropertyName, m2mModel);
                            if(mappedFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                            if(extFlds.Any(p => p.ViewPropertyName == slrPrp.ViewPropertyName)) continue;
                            extFlds.Add(slrPrp);
#>
        public <#= GetPropertyTypeName(slrPrp) #>  <#= GetTypeScriptPropertyName(slrPrp, m2mModel) #> { get; set; }

<# 
                        } // foreach(ModelViewKeyProperty fkprop in externalFk.Key.ForeignKeyProps) {...}
                    } // foreach(var externalFk in externalFks) { ... }
                } // if(externalFks != null) { ... }
            } // foreach(var sch in searchSchemas) { ... }
        } // if(searchSchemas!= null) { ... }
#>
    }

    public interface <#= extendedMdlMsgInterface #> {
        // 1 - insert; 2 - update; 3 - delete;
        public int <#= ExtForLkUpMsgActionPropName #> { get; set; } 
        public <#= extendedMdlInterface #> <#= ExtForLkUpMsgOldPropName #> { get; set; } 
        public <#= extendedMdlInterface #> <#= ExtForLkUpMsgNewPropName #> { get; set; } 
    }

/*
  In the appsettings.json file, you need to add a section as shown below:

  1. If a RabbitMq cluster is present:

  "<#= extendedMdlConf #>": {
    "<#= ConfHostNamePropName #> ": "192.168.100.3",
    "<#= ConfUsernamePropName #>": "Admin",
    "<#= ConfPasswordPropName #>": "Admin",
    "<#= ConfVirtualHostNamePropName #>": "phbkhost",
    "<#= ConfClusterIpAddressesPropName #>": [
      "192.168.100.4",
      "192.168.100.5",
      "192.168.100.6"
    ]
  }

  2. If a RabbitMq cluster is not present:

  "<#= extendedMdlConf #>": {
    "<#= ConfHostNamePropName #> ": "192.168.100.3",
    "<#= ConfUsernamePropName #>": "Admin",
    "<#= ConfPasswordPropName #>": "Admin",
    "<#= ConfVirtualHostNamePropName #>": "phbkhost",
    "<#= ConfClusterIpAddressesPropName #>": []
  }

  3. In the Program.cs file add the code like below:

  var builder = WebApplication.CreateBuilder(args);
  ...
  ConfigurationManager configuration = builder.Configuration;
   ...
  var myOptions = new <#= extendedMdlConf #>();
  configuration.GetSection(<#= extendedMdlConf #>.<#= ConfNamePropName #>).Bind(myOptions);
   ...

*/

    public class <#= extendedMdlConf #> {
        public static string <#= ConfNamePropName #> = "<#= extendedMdlConf #>";
        public string <#= ConfHostNamePropName #> { get; set; } = String.Empty;
        public string <#= ConfUsernamePropName #> { get; set; } = String.Empty;
        public string <#= ConfPasswordPropName #> { get; set; } = String.Empty;
        public string <#= ConfVirtualHostNamePropName #> { get; set; } = String.Empty;
        public string[] <#= ConfClusterIpAddressesPropName #> { get; set; } = null!;
    }
}
