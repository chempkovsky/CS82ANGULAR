<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    string OperatorSufix        = "Oprtr";
    string EqualOperator        = "eq";
    string LikeOperator         = "lk";

    // WebApi service's method names

    string showAddFltItemSelector       = "show-add-flt-item";
    string showAddFltItemPropName       = "showAddFltItem";

    string GetAllMethodName         = "getall";
    string GetWithFilterMethodName  = "getwithfilter";
    string GetOneMethodName         = "getone";
    string UpdateOneMethodName      = "updateone";
    string AddOneMethodName         = "addone";
    string DeleteOneMethodName      = "deleteone";
    string GetManyByRepPrimMethodNamePrefix     = "getmanybyrepprim";
    string GetManyByRepUnqMethodNamePrefix      = "getmanybyrepunq";
    string src2destMethodName       = "src2dest";

    string searchShowFilterPropName     = "searchShowFilter";
    string searchShowAddFltItemPropName = "searchShowAddFltItem";
    string searchOnSelectRowMethodName  = "srchOnSlctRw";
    string searchDoSelectRowMethodName  = "srchDoSlctRw";
    string searchSelectRowPropName      = "srchSlctRw";
    string searchMaxHeightPropName      = "searchMaxHeight";
    string searchFilterMaxHeightPropName= "searchFilterMaxHeight";
    string scannByMode                  = "scannBy";
    string currentSortColumnPropName    = "currentSortColumn";


    string DisplayLabelProperty     = "Name";
    string DisplayHintProperty      = "Prompt";

    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";

    string externalFilterSelector       = "external-filter";
    string externalFilterPropName       = "externalFilter";
    string externalFilterExPropName     = "externalFilterEx";
    string externalFilterRsltPropName   = "externalFilterRslt";
    string beforeSquerySelector         = "before-squery";
    string beforeSqueryPropName         = "beforeSquery";
    string onBeforeSqueryPropName       = "onBeforeSquery";
    string OnSelectRowMethodName        = "onSelectRow";
    string HiddenFilterAsFltRsltSuffix  = "HiddenFilterAsFltRslt";
    string HiddenFilterByRowSuffix      = "HiddenFilterByRow";
    string clearDatasourceMethodName    = "clrDs";
    string row2FilterRsltMethodName     = "row2FilterRslt";
    string filterRslt2rowMethodName     = "filterRslt2row";


    string RowCommandsSelector      = "row-commands";
    string RowCommandsPropName      = "rowCommands";

    string OnRowCommandSelector     = "on-row-command";
    string OnRowCommandPropName     = "onRowCommand";
    string OnTableCommandSelector   = "on-table-command";
    string OnTableCommandPropName   = "onTableCommand";

    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";


    Dictionary<string, string> RegExps = new Dictionary<string, string>() {
            { "RegExpGuid"       , @"/(?im)^[{(]?[0-9A-F]{8}[-]?(?:[0-9A-F]{4}[-]?){3}[0-9A-F]{12}[)}]?$/" },
            { "RegExpInteger"    , @"/^[-+]?\d+$/" },
            { "RegExpFloat"      , @"/^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$/" },
            { "RegExpEmail"      , @"/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/" },
            { "RegExpCurrency"   , @"/(?=.*?\d)^\$?(([1-9]\d{0,2}(,\d{3})*)|\d+)?(\.\d{1,2})?$/" }
            };

    string ComboSufix               = "CmbCntrl";
    string ButtonSufix              = "BttnItm";
    string TypeaheadSufix           = "TphdCntrl";

    string TypeaheadAddDisplaySufix = "AddDsplFn";
    string TypeaheadUpdDisplaySufix = "UpdDsplFn";
    string TypeaheadDelDisplaySufix = "DelDsplFn";

    string SearchClickSufix         = "SrchClck";

    string formServicePrefix        = "frmSrv";
    string formRootService          = "frmRootSrv";

    string MainFormGroupName        = "mainFormGroup";

    string EformModeSelector        = "eform-mode";
    string EformModePropName        = "eformMode";

    string selectedRowSelector        = "selected-row";
    string selectedRowPropName        = "selectedRow";

    string multiSelectedRowSelector   = "multi-selected-row";
    string multiSelectedRowPropName   = "multiSelectedRow";

    string showMultiSelectedRowSelector   = "show-multi-selected-row";
    string showMultiSelectedRowPropName   = "showMultiSelectedRow";
    string showMultiSelectedRowExPropName = "showMultiSelectedRowEx";

    string TableCommandsSelector    = "table-commands";
    string TableCommandsPropName    = "tableCommands";
    string TableCommandsExPropName  = "tableCommandsEx";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string MaxHeightExPropName          = "maxHeightEx";

    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string HiddenFilterExPropName   = "hiddenFilterEx";

    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";

    string applyFilterSelector        = "apply-filter";
    string applyFilterPropName        = "applyFilter";

    string currentRowPropName        = "currentRow";
    string currentMultiRowPropName   = "currentMultiRow";

    string captionPropName              = "caption";
    string captionSelector              = "caption";

    
    string FormControlModelSelector     = "eform-control-model";
    string FormControlModelPropName     = "eformControlModel";
    string FormControlNewModelPropName  = "eformNewControlModel";
    
    string AppSettingServicePropName    = "appGlblSettings";
    string ShowErrorMethodName          = "showError";


    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";

    string tpAheadVarsPropName          = "tpAheadVars";
    string tpAheadValPropName           = "tpAheadVal";
    string tpAheadValSelector           = "tp-ahead-val";
    string tpAheadFncPropName           = "tpAheadFnc";
    string tpAheadFncSelector           = "tp-ahead-fnc";
    string tpAheadSrvPropName           = "tpAheadSrv";
    string tpAheadSrvSelector           = "tp-ahead-srv";
    string tpAheadCptnPropName          = "tpAheadCptn";
    string tpAheadCptnSelector          = "tp-ahead-cptn";
    string clearTpAheadVarsMethodName   = "clrTpAheadVars";
    string tpahValChangedMethodName     = "tpahVlChngs";
    string patchcontrolsMethodName      = "patchcontrols";
    string afterPatchControlsPropName   = "afterPatchControls";
    string afterPatchControlsSelector   = "after-patch-controls";


    List<string> FKViewsDict =  GetFKViewsList(Model, Context, new List<string>());
    if (! FKViewsDict.Contains(Model.ViewName) ) {
        FKViewsDict.Add(Model.ViewName);
    }
    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";
    string filterResultModelFolder      = "00024-web-service-filter-rslt.interface.ts";
    string menuItemDataModelFolder      = "00017-menu-item-data.interface.ts";
    string eventEmitterDataModelFolder  = "00018-event-emitter-data.interface.ts";
    string eventEmitterPubModelFolder   = "00019-event-emitter-pub.interface.ts";
    string itemHeightDataModelFolder    = "00016-item-height-data.interface.ts";
    
    string columnSelectorItemInterfaceFolder    = "00032-column-selector-item.interface.ts";
    string columnSelectorDlgComponentFolder     = "00035-column-selector-dlg.component.ts";
    string uniqFilterModelFolder                = "00042-uniq-service-filter.interface.ts";
    string uniqFilterDefModelFolder             = "00044-uniq-service-filter-def.interface.ts";


    string viewInterfaceFolder          = "01100-.interface.ts";
    string viewInterfacePageFolder      = "01200-Page.interface.ts";
    string viewInterfaceFltFolder       = "01300-Filter.interface.ts";
    string viewServiceFolder            = "01400-.service.ts";



    string sformCssFolder               = "01420-Sform.component.css";
    string sformHtmlFolder              = "01420-Sform.component.html";
    string sformComponentFolder         = "01420-Sform.component.ts";




    string ActionColumnDefProperty      = "menuAction";
    string SelectColumnDefProperty      = "selectAction";
    string SelectMultColumnDefProperty  = "selectMultAction";
    string multSelectionProperty        = "multSelection";

    string DisplayedColumnsProperty     = "displayedColumns";
    string MatPaginatorPageSize         = "10";
    string MatPaginatorPageSizeOptions  = "[10, 25, 50, 100]";



    string componentSelectorCommonPart = GetComponentSelectorCommonPart(Model, sformComponentFolder);

    string serviceClassName = GetServiceClassName(Model, viewServiceFolder);
    string componentClassName = GetComponentClassName(Model, sformComponentFolder);


    string uniqFilterDefModelClassName = GetModelClassName(Context, uniqFilterDefModelFolder);
    string uniqFilterModelClassName = GetModelClassName(Context, uniqFilterModelFolder);

    string filterResultModelClassName = GetModelClassName(Context, filterResultModelFolder);
    string eventEmitterDataModelClassName   = GetModelClassName(Context, eventEmitterDataModelFolder);
    string menuItemDataModelClassName   = GetModelClassName(Context, menuItemDataModelFolder);
    string eventEmitterPubModelClassName    = GetModelClassName(Context, eventEmitterPubModelFolder);
    string itemHeightDataModelClassName   = GetModelClassName(Context, itemHeightDataModelFolder);

    string columnSelectorItemModelClassName = GetModelClassName(Context, columnSelectorItemInterfaceFolder);
    string componentSelectorDlgComponentClassName = GetContextComponentClassName(Context, columnSelectorDlgComponentFolder);


    string appSettingServiceClassName = GetCommonServiceClassName(Context, appSettingServiceFolder);

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string OnBackBtnSelector            = "on-back-btn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    
    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = GetModelUniqueKeys(Model, new List<ModelViewUniqueKeyOfVwSerializable>());
    ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
    if(pk!= null) uniqueKeys.Add(pk);
    // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk
    List<Tuple<ModelViewSerializable,ModelViewForeignKeySerializable,List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>,ModelViewSerializable,ModelViewForeignKeySerializable,ModelViewUniqueKeySerializable>> searchSchemas =
        GetSearchResources(Model, Context);

#>
import { Component, OnInit, Input, Output, EventEmitter, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { PageEvent } from '@angular/material/paginator';
import { Sort } from '@angular/material/sort';
import { MatDialog } from '@angular/material/dialog';
import { SelectionChange, SelectionModel } from '@angular/cdk/collections';
import { catchError, Observable, of, switchMap } from 'rxjs';

import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderName(Model, Context,  appSettingServiceFolder, sformComponentFolder)#>';
import { <#= uniqFilterDefModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  uniqFilterDefModelFolder, sformComponentFolder)#>';
import { <#= uniqFilterModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  uniqFilterModelFolder, sformComponentFolder)#>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  filterResultModelFolder, sformComponentFolder)#>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  eventEmitterDataModelFolder, sformComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  menuItemDataModelFolder, sformComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderName(Model, Context, eventEmitterPubModelFolder, sformComponentFolder)#>';
import { <#= itemHeightDataModelClassName #> } from '<#= GetCommonFolderName(Model, Context, itemHeightDataModelFolder, sformComponentFolder)#>';
import { <#= columnSelectorItemModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  columnSelectorItemInterfaceFolder, sformComponentFolder)#>';
import { <#= componentSelectorDlgComponentClassName #> } from '<#=  GetCommonFolderName(Model, Context,  columnSelectorDlgComponentFolder, sformComponentFolder)#>';


<# 
    {
        string viewNm = Model.ViewName;
#>
import { <#= GetInterfaceName(Model) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, viewNm, viewInterfaceFolder) #>';
import { <#= GetInterfacePageName(Model) #> } from '<#= GetCrossComponentFolderName(Model, sformComponentFolder, Context, viewNm, viewInterfacePageFolder) #>';
import { <#= GetInterfaceFilterName(Model) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, viewNm, viewInterfaceFltFolder) #>';
import { <#= GetServiceClassName(Model, viewServiceFolder) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, viewNm, viewServiceFolder) #>';
<# 
        if(searchSchemas!= null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable searchModel = sch.Item4;
                ModelViewSerializable m2mModel = sch.Item1;
#>
import { <#= GetServiceClassName(searchModel, viewServiceFolder) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, searchModel.ViewName, viewServiceFolder) #>';
import { <#= GetInterfaceName(searchModel) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, searchModel.ViewName, viewInterfaceFolder) #>';
import { <#= GetInterfacePageName(searchModel) #> } from '<#= GetCrossComponentFolderName(Model, sformComponentFolder, Context, searchModel.ViewName, viewInterfacePageFolder) #>';
import { <#= GetInterfaceFilterName(searchModel) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, searchModel.ViewName, viewInterfaceFltFolder) #>';
import { <#= GetServiceClassName(m2mModel, viewServiceFolder) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, m2mModel.ViewName, viewServiceFolder) #>';
import { <#= GetInterfaceName(m2mModel) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, m2mModel.ViewName, viewInterfaceFolder) #>';
import { <#= GetInterfacePageName(m2mModel) #> } from '<#= GetCrossComponentFolderName(Model, sformComponentFolder, Context, m2mModel.ViewName, viewInterfacePageFolder) #>';
import { <#= GetInterfaceFilterName(m2mModel) #> } from '<#=  GetCrossComponentFolderName(Model, sformComponentFolder, Context, m2mModel.ViewName, viewInterfaceFltFolder) #>';
<#
            }
        } // if(searchSchemas!= null) {...}


    }
#>



@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, sformHtmlFolder, sformComponentFolder)#>.html',
  styleUrls: ['<#=  GetFolderName(Model, sformCssFolder, sformComponentFolder)#>.css']
})
export class <#= componentClassName #> implements OnInit, AfterViewInit, <#= eventEmitterPubModelClassName #>, <#= itemHeightDataModelClassName #> {

    <#= showMultiSelectedRowExPropName #>: boolean = true;
    protected _<#= showMultiSelectedRowPropName #>: boolean|null = true;
    @Input('<#= showMultiSelectedRowSelector #>')
        get <#= showMultiSelectedRowPropName #>(): boolean|null {
            return this._<#= showMultiSelectedRowPropName #>;
        }
      set <#= showMultiSelectedRowPropName #>(inp: boolean|null) {
        this._<#= showMultiSelectedRowPropName #> = inp;
        if (!(typeof inp === 'undefined')) {
            let nc: boolean = false;
            if(inp) {
                nc = this.<#= showMultiSelectedRowExPropName #>;
            } else {
                nc = !this.<#= showMultiSelectedRowExPropName #>;
            }
            if(nc) return;
            this.<#= showMultiSelectedRowExPropName #> = !this.<#= showMultiSelectedRowExPropName #>;
            let r: string[] = ['<#= SelectColumnDefProperty #>']
            if(this.<#= showMultiSelectedRowExPropName #>) r.push('<#= SelectMultColumnDefProperty #>');
            this.<#= DisplayedColumnsProperty #>.forEach((s: string) => {if(s !== '<#= SelectColumnDefProperty #>' && s !== '<#= SelectMultColumnDefProperty #>') r.push(s)});
            this.<#= DisplayedColumnsProperty #> = r;
            this.cd.detectChanges();
        }
      }


    public <#= currentMultiRowPropName #>: Array<<#= GetInterfaceName(Model) #>> = [];
    @Output('<#= multiSelectedRowSelector #>') <#= multiSelectedRowPropName #>: EventEmitter<Array<<#= GetInterfaceName(Model) #>>> = new EventEmitter<Array<<#= GetInterfaceName(Model) #>>>();
    public <#= multSelectionProperty #>: SelectionModel<<#= GetInterfaceName(Model) #>> = new SelectionModel<<#= GetInterfaceName(Model) #>>(true, []);
    selectRows(e: Array<<#= GetInterfaceName(Model) #>>) {
        if((typeof e === 'undefined') || (typeof this.dataSource  === 'undefined')) return;
        if((e === null) || (this.dataSource  === null)) return;
        if(!Array.isArray(e)) return;
        let rslt: Array<<#= GetInterfaceName(Model) #>>=[];
        e.forEach(row => { if(this.dataSource.indexOf(row) > -1) rslt.push(row) });
        this.<#= multSelectionProperty #>.select(...rslt);
    }
    deselectRows(e: Array<<#= GetInterfaceName(Model) #>>) {
        this.<#= multSelectionProperty #>.deselect(...e);
    }
    isAllSelected() {
      const numSelected = this.<#= multSelectionProperty #>.selected.length;
      const numRows = this.dataSource.length;
      return numSelected == numRows;
    }
    masterToggle() {
      this.isAllSelected() ?
          this.<#= multSelectionProperty #>.clear() :
          this.dataSource.forEach(row => this.<#= multSelectionProperty #>.select(row));
    }
    onMultiSelectRow(e: Array<<#= GetInterfaceName(Model) #>>) {
        if (typeof e === 'undefined') {
            this.<#= currentMultiRowPropName #> = [];
        } else {
            this.<#= currentMultiRowPropName #> = e;
        }
        this.cd.detectChanges();
        this.<#= multiSelectedRowPropName #>.emit(this.<#= currentMultiRowPropName #>);
    }

    ngOnInit() {
        this.<#= multSelectionProperty #>.changed.subscribe({next: 
            (e: SelectionChange<<#= GetInterfaceName(Model) #>>) => {
                this.onMultiSelectRow(this.<#= multSelectionProperty #>.selected);
            }
        });
    }

//===============
    isOnInitCalled: boolean = false;
    protected currentFilter: Array<<#= filterResultModelClassName #>> = [];
    protected <#= currentSortColumnPropName #>: string = '';
    protected currentSortdirection: string = '';
    public currentPageIndex: number = 0;
    public currentPageSize: number = <#= MatPaginatorPageSize #>;
    public dataSource: Array<<#= GetInterfaceName(Model) #>> = [];
    matPaginatorLen: number = 0;
    matPaginatorPageSize: number = <#= MatPaginatorPageSize #>;
    matPaginatorPageSizeOptions: Array<number> = <#= MatPaginatorPageSizeOptions #>;
    <#= DisplayedColumnsProperty #>:  Array<string> = ['<#= SelectColumnDefProperty #>', '<#= SelectMultColumnDefProperty #>', <#= GetDisplayedColumns(Model) #>, '<#= ActionColumnDefProperty #>'];
    @Input('<#= captionSelector #>') <#= captionPropName #>: string = '<#= Model.ViewName #>';
    @Input('<#= ShowFilterSelector #>') <#= ShowFilterPropName #>: boolean = true;
    @Input('<#= RowCommandsSelector #>')  <#= RowCommandsPropName #>:Array<<#= menuItemDataModelClassName #>>|any;

    <#= TableCommandsExPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    protected _<#= TableCommandsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    @Input('<#= TableCommandsSelector #>')  
        get <#= TableCommandsPropName #>(): Array<<#= menuItemDataModelClassName #>> {
            return this._<#= TableCommandsPropName #>;
        }
        set <#= TableCommandsPropName #>(v :Array<<#= menuItemDataModelClassName #>>) {
            this._<#= TableCommandsPropName #> = v;
            if (typeof v === 'undefined') {
                this.<#= TableCommandsExPropName #> = [];
            } else if (!Array.isArray(v)) {
                this.<#= TableCommandsExPropName #> = [];
            } else {
                this.<#= TableCommandsExPropName #> =  v;
            }
            this.onTableMenuItemsData();
            if(this.isOnInitCalled) {
                this.cd.detectChanges();
            }
        }

    @Input('<#= showAddFltItemSelector #>') <#= showAddFltItemPropName #>: boolean = true;
    onTableMenuItemsData() {
        let tmp: Array<<#= menuItemDataModelClassName #>> = [];
        tmp = tmp.concat(this.tableIndexMenuItemsData, this.<#= TableCommandsExPropName #>);
        this.tableMenuItemsData = tmp;
    }

    @Input('<#= showBackBtnSelector #>') <#= showBackBtnPropName #>: boolean = false;
    @Output('<#= OnBackBtnSelector #>') <#= OnBackBtnPropName #> = new EventEmitter<any>();
    <#= OnBackBtnMethodName #>(v: any) {
        this.<#= OnBackBtnPropName #>.emit(v);
    }

    @Output('<#= beforeSquerySelector #>') <#= beforeSqueryPropName #> = new EventEmitter<string>();

    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= eventEmitterDataModelClassName #>)  {
        this.<#= onContainerMenuItemClickEmitter #>.emit(v);
    }

    @Input('<#= FilterMaxHeightPropSelector #>')  <#= FilterMaxHeightPropName #>: number | null = null;
    public <#= OverflowPropName #>: string | null = null;   

    <#= MaxHeightExPropName #>: number|null = null;
    protected _<#= MaxHeightPropName #>: number|null = null;
    @Input('<#= MaxHeightPropSelector #>')
        get <#= MaxHeightPropName #>(): number|null {
            return this._<#= MaxHeightPropName #>;
        }
      set <#= MaxHeightPropName #>(inp: number|null) {
        this._<#= MaxHeightPropName #> = inp;
        if (!(typeof inp === 'undefined')) {
          if(!(inp === null)) {
            this.<#= MaxHeightExPropName #> = inp * this.<#= AppSettingServicePropName #>.tableHeightFactor + this.<#= AppSettingServicePropName #>.tableHeightAddition;
            this.<#= OverflowPropName #> = 'auto';
            if(this.isOnInitCalled) {
              this.cd.detectChanges();
            }
            return;
          }
        }
        this.<#= MaxHeightExPropName #> = null;
        this.<#= OverflowPropName #> = null;
        if(this.isOnInitCalled) {
            this.cd.detectChanges();
        }
      }


    @Output('<#= OnRowCommandSelector #>') <#= OnRowCommandPropName #>: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Output('<#= OnTableCommandSelector #>') <#= OnTableCommandPropName #>: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();

    filterDefs: Array<<#= uniqFilterDefModelClassName #>> = [];
    tableMenuItemsData: Array<<#= menuItemDataModelClassName #>> = [];
    curIndexMenuItemsData: <#= menuItemDataModelClassName #>|any;
    tableIndexMenuItemsData: Array<<#= menuItemDataModelClassName #>> = [
<#
    { 
        // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk
        if(searchSchemas!= null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable searchModel = sch.Item4;
                ModelViewUniqueKeySerializable searchUk = sch.Item6;
                ModelViewSerializable m2mModel = sch.Item1;

#>
        {id: '<#= m2mModel.ViewName #>', caption: 'filter: <#= m2mModel.ViewName #>', iconName: 'search', iconColor: 'primary', enabled: true, data: [
<#
                int ukrows = searchUk.UniqueKeyProperties.Count / 4;
                ukrows *= 4;
                int theRest = searchUk.UniqueKeyProperties.Count % 4;
                int theHRest = theRest / 2; 
                if(theHRest < 1) theHRest = 1;
                int cnt = 0;
                foreach(ModelViewKeyPropertySerializable ukprp in searchUk.UniqueKeyProperties) {
                    ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(ukprp.OriginalPropertyName, searchModel);
                    if(cnt >= ukrows) break;
                    cnt++;
                    if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
#>
           {fltrName: '<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#>', fltrCaption: '<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, searchModel, DisplayLabelProperty) #>',  fltrDataType: '<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, searchModel) #>', fltrMaxLen: <#= GetMaxLen(modelViewPropertyOfVwSerializable, searchModel) #>, fltrMin: <#= GetMinVal(modelViewPropertyOfVwSerializable, searchModel) #>, fltrMax: <#= GetMaxVal(modelViewPropertyOfVwSerializable, searchModel) #>, fltrFlx:100, fltrMd:24, fltrSm:49, fltrXs: 100},
<#
                    }
                }
                cnt = 0;
                foreach(ModelViewKeyPropertySerializable ukprp in searchUk.UniqueKeyProperties) {
                    ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(ukprp.OriginalPropertyName, searchModel);
                    if(cnt < ukrows) continue;
                    cnt++;
                    if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
#>
           {fltrName: '<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#>', fltrCaption: '<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, searchModel, DisplayLabelProperty) #>',  fltrDataType: '<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, searchModel) #>', fltrMaxLen: <#= GetMaxLen(modelViewPropertyOfVwSerializable, searchModel) #>, fltrMin: <#= GetMinVal(modelViewPropertyOfVwSerializable, searchModel) #>, fltrMax: <#= GetMaxVal(modelViewPropertyOfVwSerializable, searchModel) #>, fltrFlx:100, fltrMd: (100 / <#= theRest #>) - 1, fltrSm: (100 / <#= theHRest #>) - 1, fltrXs: 100},
<#
                    }
                }
#>
        ]},
<#
            }
        } // if(searchSchemas!= null) {...}

        for(int i = 0; i < uniqueKeys.Count; i++) { 
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
            if (!indIsCorrect) {
#>

//
// Could not generate fragment of code
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
            
                string caption = "Primary";
                if(!uniqueKeys[i].IsPrimary) {
                    caption = uniqueKeys[i].UniqueKeyName;
                }
#>
        {id: '<#= scannByMode + caption #>', caption: 'filter: <#= caption #>', iconName: 'search', iconColor: 'primary', enabled: true, data: [
<#
                int ukrows = uniqueKeys[i].UniqueKeyProperties.Count / 4;
                ukrows *= 4;
                int theRest = uniqueKeys[i].UniqueKeyProperties.Count % 4;
                int theHRest = theRest / 2; 
                if(theHRest < 1) theHRest = 1;
                int cnt = 0;
                foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                    if(cnt >= ukrows) break;
                    cnt++;
                    if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
#>
           {fltrName: '<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#>', fltrCaption: '<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>',  fltrDataType: '<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>', fltrMaxLen: <#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin: <#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax: <#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #>, fltrFlx:100, fltrMd:24, fltrSm:49, fltrXs: 100},
<#
                    }
                }
                cnt = 0;
                foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                    if(cnt < ukrows) continue;
                    cnt++;
                    if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
#>
           {fltrName: '<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#>', fltrCaption: '<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>',  fltrDataType: '<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>', fltrMaxLen: <#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin: <#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax: <#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #>, fltrFlx:100, fltrMd: (100 / <#= theRest #>) - 1, fltrSm: (100 / <#= theHRest #>) - 1, fltrXs: 100},
<#
                    }
                }
#>
        ]},
<#
            } // if (!indIsCorrect) { ... } else { ... }
        } // for(int i = 0; i < uniqueKeys.Count; i++) { ... }
#>
        {id: 'fullscann', caption: 'full scann', iconName: 'search', iconColor: 'primary', enabled: true, data: [
<#
        foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in Model.ScalarProperties) {
            if (modelViewPropertyOfVwSerializable.IsUsedByfilter) {
#>
            {fltrName: '<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#>', fltrCaption: '<#= GetDisplayAttributeValueString(modelViewPropertyOfVwSerializable, Model, DisplayLabelProperty) #>',  fltrDataType: '<#= GetCCharpDatatype(modelViewPropertyOfVwSerializable, Model) #>', fltrMaxLen: <#= GetMaxLen(modelViewPropertyOfVwSerializable, Model) #>, fltrMin: <#= GetMinVal(modelViewPropertyOfVwSerializable, Model) #>, fltrMax: <#= GetMaxVal(modelViewPropertyOfVwSerializable, Model) #>, fltrFlx:100, fltrMd:24, fltrSm:49, fltrXs: 100 },
<#
            }
        }
#>
        ]}
<#

    } //
#>
    ];      
    
    protected resetCurFltr(): void {
        this.currentFilter = [];
        this._<#= HiddenFilterPropName #>.forEach((hf: <#= filterResultModelClassName #>) => { this.currentFilter.push({
            fltrName: hf.fltrName,
            fltrDataType: hf.fltrDataType,
            fltrOperator: hf.fltrOperator,
            fltrValue: hf.fltrValue,
        }); });
        this.<#= externalFilterRsltPropName #>.forEach((ef: <#= filterResultModelClassName #>) => { 
          if(this.filterDefs.findIndex((fd: { fltrName: string; }) => { return (fd.fltrName === ef.fltrName); }) > -1) {
            this.currentFilter.push({
                fltrName: ef.fltrName,
                fltrDataType: ef.fltrDataType,
                fltrOperator: ef.fltrOperator,
                fltrValue: ef.fltrValue,
            }); 
          }
        });
    }

    <#= HiddenFilterExPropName #>: Array<<#= filterResultModelClassName #>> = [];
    protected _<#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>> = [];
    @Input('<#= HiddenFilterSelector #>') 
        get <#= HiddenFilterPropName #>(): Array<<#= filterResultModelClassName #>> | any {
          return this._<#= HiddenFilterPropName #>;
        }
        set <#= HiddenFilterPropName #>(inDef: Array<<#= filterResultModelClassName #>> | any) {
          this._<#= HiddenFilterPropName #> =  inDef;
          if (typeof inDef === 'undefined') {
            this.<#= HiddenFilterExPropName #> = [];
          } else if(!Array.isArray(inDef)) {
            this.<#= HiddenFilterExPropName #> = [];
          } else {
            this.<#= HiddenFilterExPropName #> =  inDef;
          }
          this.onHiddenFilter();
          this.reset<#= externalFilterPropName #>();
        } 

    public <#= externalFilterRsltPropName #>: Array<<#= filterResultModelClassName #>> = [];
    <#= externalFilterExPropName #>: string|null = null;
    protected _<#= externalFilterPropName #>: string|null = null;
    @Input('<#= externalFilterSelector #>') 
        get <#= externalFilterPropName #>(): string|any {
            return this._<#= externalFilterPropName #>;
        }
        set <#= externalFilterPropName #>(ef: string|any) {
            this._<#= externalFilterPropName #> = ef;
            let isNDf = (typeof ef === 'undefined');
            isNDf = isNDf ? isNDf : (ef === null);
            if(isNDf) {
              this.<#= externalFilterExPropName #> = null;
              this.reset<#= externalFilterPropName #>();
            } else {
                this.<#= externalFilterExPropName #> = ef;
                this.reset<#= externalFilterPropName #>();
            }
        }
    reset<#= externalFilterPropName #>() {
        if(this.isOnInitCalled) return;
        let efs: string| any = this.<#= externalFilterExPropName #>;
        if ((typeof efs === 'undefined') ? true : ((efs === null) ? true : (efs === ''))) return;
        let ef: {id: string; f: string|any; csc: string; pgi: number; pgsz: number} = JSON.parse(efs);

        this.<#= currentSortColumnPropName #> = '';
        // since if(this.isOnInitCalled) return; we ned to reset props if input is defined
        if(ef.csc) { this.<#= currentSortColumnPropName #> = ef.csc; } else { this.<#= currentSortColumnPropName #> = ''; } 
        if(ef.pgi) { this.currentPageIndex = ef.pgi; } else { this.currentPageIndex = 0; }
        if(ef.pgsz) { this.currentPageSize = ef.pgsz; } else { this.currentPageIndex = <#= MatPaginatorPageSize #>; }
        if(typeof ef.id === 'undefined') return;
        let mi: <#= menuItemDataModelClassName #>|any = this.tableIndexMenuItemsData.find((e: <#= menuItemDataModelClassName #>) => e.id === ef.id);
        if(mi) {
            this.curIndexMenuItemsData = mi;
            this.onHiddenFilter();
        } else {
            return;
        }
        if(typeof ef.f === 'undefined') return;
        if((ef.f === null) || (ef.f === 'null') || (ef.f === '')) return;
        let r: Array<<#= filterResultModelClassName #>> = [];
        switch(ef.id) {
<#
        if(searchSchemas!= null) {
            if(searchSchemas.Count > 0) {
                foreach(var sch in searchSchemas) {
                    ModelViewSerializable searchModel = sch.Item4;
                    ModelViewSerializable m2mModel = sch.Item1;
#>
            case '<#= m2mModel.ViewName #>':  
                this.<#= searchSelectRowPropName + m2mModel.ViewName #> = JSON.parse(ef.f);
                r = this.<#= formServicePrefix + searchModel.ViewName #>.<#= row2FilterRsltMethodName #>(this.<#= searchSelectRowPropName + m2mModel.ViewName #>);
                break;           
<#
                }
            }
        }
#>
            default:
                let flt: <#= GetInterfaceFilterName(Model) #>|any = JSON.parse(ef.f);
                if(flt) {
                    this.filterDefs.forEach((fd: <#= uniqFilterDefModelClassName #>) => {
                        if(!this.<#= HiddenFilterExPropName #>.some((v: <#= filterResultModelClassName #>) => v.fltrName === fd.fltrName)) {
                            if( Array.isArray(flt[fd.fltrName]) ) {
                                let oprtrs: Array<string> = [];    
                                if( Array.isArray(flt[fd.fltrName+'<#= OperatorSufix #>']) ) {
                                    oprtrs = flt[fd.fltrName+'<#= OperatorSufix #>'];
                                }
                                flt[fd.fltrName].forEach((val: any, i: number) => {
                                    let op = 'eq';
                                    if(oprtrs.length > i) op = oprtrs[i];
                                    r.push({fltrName: fd.fltrName, fltrDataType: fd.fltrDataType, fltrOperator: op, fltrValue:val});
                                });
                            }
                        }
                    });
                }
                this.<#= externalFilterRsltPropName #> = r;
                this.resetCurFltr();
                return;
        } // switch(ef.id) {}
        let rslt: Array<<#= filterResultModelClassName #>> = [];
        this.filterDefs.forEach((fd: <#= uniqFilterDefModelClassName #>) => {
            if(!this.<#= HiddenFilterExPropName #>.some((v: <#= filterResultModelClassName #>) => v.fltrName === fd.fltrName)) {
                rslt = rslt.concat( r.filter((ri: <#= filterResultModelClassName #>) => ri.fltrName === fd.fltrName) );
            }
        });
        this.<#= externalFilterRsltPropName #> = rslt;
        this.resetCurFltr();
    }

    public <#= currentRowPropName #>: <#= GetInterfaceName(Model) #> | null = null;
    @Output('<#= selectedRowSelector #>') <#= selectedRowPropName #>: EventEmitter<<#= GetInterfaceName(Model) #>|null> = new EventEmitter<<#= GetInterfaceName(Model) #>|null>();
    @Output('<#= applyFilterSelector #>') <#= applyFilterPropName #>: EventEmitter<<#= componentClassName #>|null> = new EventEmitter<<#= componentClassName #>|null>();


    constructor(public  <#= formRootService #>: <#= serviceClassName #>, public <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, 
<#
        if(searchSchemas!= null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable searchModel = sch.Item4;
                ModelViewSerializable m2mModel = sch.Item1;


#>
                public  <#= formServicePrefix + m2mModel.ViewName #>: <#= GetServiceClassName(m2mModel, viewServiceFolder) #>,
                public  <#= formServicePrefix + searchModel.ViewName #>: <#= GetServiceClassName(searchModel, viewServiceFolder) #>,
<#
            }
        } // if(searchSchemas!= null) {...}
#>    
            protected dialog: MatDialog, private cd: ChangeDetectorRef) {
        if(this.tableIndexMenuItemsData.length > 0) {
            this.curIndexMenuItemsData = this.tableIndexMenuItemsData[0];
            this.onHiddenFilter();
        }
        this.tableMenuItemsData = this.tableIndexMenuItemsData;
    }

    onHiddenFilter() {
        if(this.curIndexMenuItemsData) {
            if(this.curIndexMenuItemsData.data) {
                let dimi: Array<<#= uniqFilterDefModelClassName #>> = this.curIndexMenuItemsData.data as Array<<#= uniqFilterDefModelClassName #>>;
                if(this.<#= HiddenFilterExPropName #>.length < 1) {
                    this.filterDefs = dimi;
                } else {
                    let rslt: Array<<#= uniqFilterDefModelClassName #>> = [];
                    dimi.forEach((e: <#= uniqFilterDefModelClassName #>) => {
                        if(!this.<#= HiddenFilterExPropName #>.some((h: <#= filterResultModelClassName #>) => h.fltrName === e.fltrName)) {
                            rslt.push(e);
                        }
                    });
                    this.filterDefs = rslt;
                }
                return;
            }
        }
        this.filterDefs = [];
    }
    
    <#= onBeforeSqueryPropName #>(flt: <#= GetInterfaceFilterName(Model) #>|any) {
        let r: {id: string; f: string|any; csc: string; pgi: number; pgsz: number} = {id: this.curIndexMenuItemsData.id, f: undefined, csc:this.<#= currentSortColumnPropName #>, pgi: this.currentPageIndex, pgsz: this.currentPageSize};
        switch (r.id) {
<#
        if(searchSchemas!= null) {
            if(searchSchemas.Count > 0) {
                foreach(var sch in searchSchemas) {
                    ModelViewSerializable searchModel = sch.Item4;
                    ModelViewSerializable m2mModel = sch.Item1;
#>
            case '<#= m2mModel.ViewName #>':  
                if(this.<#= searchSelectRowPropName + m2mModel.ViewName #>) {
                    r.f = JSON.stringify(this.<#= searchSelectRowPropName + m2mModel.ViewName #>);
                }
                break;           
<#
                }
            }
        }
        for(int i = 0; i < uniqueKeys.Count; i++) { 
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
            if (!indIsCorrect) {
#>

//
// Could not generate fragment of code
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                string caption = "Primary";
                if(!uniqueKeys[i].IsPrimary) {
                    caption = uniqueKeys[i].UniqueKeyName;
                }
#>
            case '<#= caption #>':  
                if(flt) {
                    r.f = JSON.stringify(flt);
                }
                break;           
<#
            }
        }
#>
            case 'fullscann':
                if(flt) {
                    r.f = JSON.stringify(flt);
                }
                break;           
            default:
                return;
        } // switch (this.curIndexMenuItemsData.id) {...}
        this.<#= beforeSqueryPropName #>.emit(JSON.stringify(r));
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.isOnInitCalled = true;
            this.onFilter();
        });
    }    
    onSort(srt: Sort) {
        this.<#= currentSortColumnPropName #> = srt.active;
        this.currentSortdirection = srt.direction;
        this.onFilter();
    }
    onPage(pg: PageEvent) {
        this.currentPageIndex = pg.pageIndex;
        this.currentPageSize = pg.pageSize;
        this.onFilter();
    }
    onApplyFilter(flt: Array<IWebServiceFilterRslt>) {
        this.currentFilter = flt; 
        this.<#= HiddenFilterExPropName #>.forEach((hf: <#= filterResultModelClassName #>) => { this.currentFilter.push({
            fltrName: hf.fltrName,
            fltrDataType: hf.fltrDataType,
            fltrOperator: hf.fltrOperator,
            fltrValue: hf.fltrValue,
        }); });
        this.currentPageIndex = 0;
        this.onFilter();
    }

    inQuery: boolean = false;
    onFilter() {
<#
        if(searchSchemas!= null) {
            if(searchSchemas.Count > 0) {
#>
        switch (this.curIndexMenuItemsData.id) {
<#
            foreach(var sch in searchSchemas) {
                ModelViewSerializable searchModel = sch.Item4;
                ModelViewSerializable m2mModel = sch.Item1;
#>
            case '<#= m2mModel.ViewName #>':  
                this.<#= searchDoSelectRowMethodName + m2mModel.ViewName #>();
                return;
<#
            }
#>
        }
<#
            }
        }
#>
        let flt: <#= GetInterfaceFilterName(Model) #>|any = { page: this.currentPageIndex, pagesize: this.currentPageSize };
        if (!(typeof this.<#= currentSortColumnPropName #> === 'undefined')) {
            if (!(this.<#= currentSortColumnPropName #> === null)) {
                if(!(this.<#= currentSortColumnPropName #> === '')) {
                    flt.orderby = [];
                    let asc: string = '';
                    if (!(typeof this.currentSortdirection === 'undefined')) {
                        if (!(this.currentSortdirection === null)) {
                            if(this.currentSortdirection === 'desc') {
                                asc = '-';
                            }
                        }
                    }
                    flt.orderby.push(asc + this.<#= currentSortColumnPropName #>);
                }
            }
        }
        if (Array.isArray(this.currentFilter)) {
            this.currentFilter.forEach(e => {
                let opNm =  e.fltrName + '<#= OperatorSufix #>';
                if(typeof flt[e.fltrName] === 'undefined') {
                    flt[e.fltrName] = [];
                    flt[opNm] = [];
                }
                flt[e.fltrName].push(e.fltrValue);
                flt[opNm].push(e.fltrOperator);
            });
        }
        this.<#= onBeforeSqueryPropName #>(flt);
        this.inQuery = true;
        let mc: Observable<<#= GetInterfacePageName(Model) #>> | any;
        switch (this.curIndexMenuItemsData.id) {


<#
        for(int i = 0; i < uniqueKeys.Count; i++) { 
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
            if (!indIsCorrect) {
#>

//
// Could not generate fragment of code
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                string caption = "Primary";
                string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
                if(!uniqueKeys[i].IsPrimary) {
                    caption = uniqueKeys[i].UniqueKeyName;
                }
                if(!uniqueKeys[i].IsPrimary) {
                    localRouteManyName = GetManyByRepUnqMethodNamePrefix + caption;
                }
#>
            case '<#= scannByMode + caption #>':  
                mc = this.<#= formRootService #>.<#= localRouteManyName #>(flt);
                break;
<#
            }
        }
#>
            default:
                mc = this.<#= formRootService #>.<#= GetWithFilterMethodName #>(flt);
        }
        mc.subscribe({
                next: (v: <#= GetInterfacePageName(Model) #>) =>{
                    this.inQuery = false;
                    let pl: number = 0;
                    if (!(typeof v.total === 'undefined')) {
                        if(!(v.total === null)) {
                            pl = v.total;
                        }
                    }
                    this.matPaginatorLen = pl;
                    let rslt: Array<<#= GetInterfaceName(Model) #>> = [];
                    if (!(typeof v.items === 'undefined')) {
                        if(!(v.items === null)) {
                            rslt = v.items;
                        }
                    }
                    this.dataSource = rslt;
                    this.<#= applyFilterPropName #>.emit(this);
                    let currow: <#= GetInterfaceName(Model) #> | null = null;
                    if(Array.isArray(this.dataSource)) {
                        if(this.dataSource.length > 0) {
                            currow = this.dataSource[0];
                        }
                    }
                    this.<#= OnSelectRowMethodName #>(currow);
                    this.cd.detectChanges();
                },
                error: (error: any) => {
                    this.inQuery = false;
                    this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
                }
        });
    }

    <#= OnSelectRowMethodName #>(e: <#= GetInterfaceName(Model) #>|any) {
        if (typeof e === 'undefined') {
            this.<#= currentRowPropName #> = null;
        } else {
            this.<#= currentRowPropName #> = e;
        }
        this.cd.detectChanges();
        this.<#= selectedRowPropName #>.emit(this.<#= currentRowPropName #>);
    }
    rowCommand(e: <#= GetInterfaceName(Model) #>, id: string) {
        let v: <#= eventEmitterDataModelClassName #> = {
            id: id,
            sender: this,
            value: e
        };
        this.<#= OnRowCommandPropName #>.emit(v);
    }
    tableCommand(id: string) {
<#
    {
    if(uniqueKeys.Count > 0) {
#>
        if(
<#
        if(searchSchemas != null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable searchModel = sch.Item4;
                ModelViewSerializable m2mModel = sch.Item1;
#>
           (id === '<#= m2mModel.ViewName #>') ||
<#
            }
        }

        for(int i = 0; i < uniqueKeys.Count; i++) {
            string caption = "Primary";
            if(!uniqueKeys[i].IsPrimary) {
                caption = uniqueKeys[i].UniqueKeyName;
            }
#>
           (id === '<#= scannByMode + caption #>') ||
<#
        }
#>
           (id === 'fullscann'))
        {
            let mi: <#= menuItemDataModelClassName #>|any = this.tableIndexMenuItemsData.find((e: <#= menuItemDataModelClassName #>) => e.id === id);
            if(mi) {
<#
        if(searchSchemas != null) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable searchModel = sch.Item4;
                ModelViewSerializable m2mModel = sch.Item1;
#>
                this.<#= searchSelectRowPropName + m2mModel.ViewName #> = null;
<#
            }
        }
#>
                this.<#= externalFilterRsltPropName #> = [];
                this.curIndexMenuItemsData = mi;
                this.onHiddenFilter();
            }
            return;
        }
<#
    }
    }
#>
        let v: <#= eventEmitterDataModelClassName #> = {
            id: id,
            sender: this,
            value: null
        };
        this.<#= OnTableCommandPropName #>.emit(v);
    }
    onSettings() {
        let locdata: Array<<#= columnSelectorItemModelClassName #>>=[
<#
    foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in Model.UIListProperties) {
        if (modelViewUIListPropertySerializable.IsShownInView) {
#>
            { name: '<#=GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, Model)#>', caption:'<#=  GetDisplayAttributeValueString2(modelViewUIListPropertySerializable, Model, DisplayLabelProperty) #>', checked: false },
<#
        }
    }
#>
        ];
        let len: number =  this.<#= DisplayedColumnsProperty #>.length;
        // i = 1 is correct
        for(var i = 1; i < len-1; i++) {
            let ind=locdata.findIndex(e => { return e.name === this.<#= DisplayedColumnsProperty #>[i]; })
            if(ind > -1) {
                locdata[ind].checked = true;
            }
        }
        let dialogRef = this.dialog.open(<#=  componentSelectorDlgComponentClassName #>, {
              data: locdata,
              maxWidth: '100vw',
              width: '65vw',
            });
        dialogRef.afterClosed().subscribe({
            next: (rslt: any) => {
                if (!(typeof rslt === 'undefined')) {
                    if (!(rslt === null)) {
                        let r: string[] = ['<#= SelectColumnDefProperty #>']
                        if(this.<#= showMultiSelectedRowExPropName #>) r.push('<#= SelectMultColumnDefProperty #>');
                        rslt.forEach((e: { checked: any; name: string; }) => { if (e.checked) { r.push(e.name) }});
                        r.push('<#= ActionColumnDefProperty #>');
                        this.<#= DisplayedColumnsProperty #> = r;
                        this.cd.detectChanges();
                    }
                }
            }
        });
    } 



<#
    // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk
    if(searchSchemas!= null) {
        if(searchSchemas.Count > 0) {
#>
    <#= clearDatasourceMethodName #>(): void {
        this.dataSource = [];
        this.inQuery = false;
        this.<#= applyFilterPropName #>.emit(this);
        this.<#= OnSelectRowMethodName #>(null);
        this.cd.detectChanges();
    }
<#
        }
        foreach(var sch in searchSchemas) {
            ModelViewSerializable searchModel = sch.Item4;
            ModelViewSerializable m2mModel = sch.Item1;
            ModelViewUniqueKeySerializable searchUk = sch.Item6;
            ModelViewForeignKeySerializable foreignKey2Model = sch.Item2;

#>
/////////////////////////////////////////
    <#= searchSelectRowPropName + m2mModel.ViewName #>: <#= GetInterfaceName(searchModel) #> | any = null;
    <#= searchDoSelectRowMethodName + m2mModel.ViewName #>() {
        if(!this.isOnInitCalled) return;
            let dtlflt: <#= GetInterfaceFilterName(m2mModel) #> | any = { page: this.currentPageIndex, pagesize: this.currentPageSize };
        if (this.<#= searchSelectRowPropName + m2mModel.ViewName #>) {
            let dfltrslt: Array<<#= filterResultModelClassName #>> = 
                this.<#= formServicePrefix + m2mModel.ViewName #>.get<#= HiddenFilterAsFltRsltSuffix #>(this.<#= formServicePrefix + searchModel.ViewName #>.get<#= HiddenFilterByRowSuffix #>(this.<#= searchSelectRowPropName + m2mModel.ViewName #>, '<#= sch.Item5.NavigationName #>'));
            if (Array.isArray(dfltrslt)) {
                dfltrslt.forEach(e => {
                    if(typeof dtlflt[e.fltrName] === 'undefined') {
                        dtlflt[e.fltrName] = [];
                    }
                    dtlflt[e.fltrName].push(e.fltrValue);
                });
            }
        } else {
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', {message:'Could not apply filter as not all attributes are set'});
        }
        // by requirements all common foreignkey props have the same names for <#= m2mModel.ViewName #> and <#= Model.ViewName #>
        this.<#= HiddenFilterPropName #>.forEach((hf: <#= filterResultModelClassName #>) => { 
                if(typeof dtlflt[hf.fltrName] === 'undefined') {
                    dtlflt[hf.fltrName] = [];
                }
                dtlflt[hf.fltrName].push(hf.fltrValue);
        });
        this.inQuery = true;
        this.<#= onBeforeSqueryPropName #>(null);
        this.<#= formServicePrefix + m2mModel.ViewName #>.<#= GetManyByRepPrimMethodNamePrefix #>(dtlflt).subscribe({
            next: (vd: <#= GetInterfacePageName(m2mModel) #>) => {
                let pl: number = 0;
                if (!(typeof vd.total === 'undefined')) {
                    if(!(vd.total === null)) {
                        pl = vd.total;
                    }
                }
                this.matPaginatorLen = pl;
                let rsltd: Array<<#= GetInterfaceName(m2mModel) #>> = [];
                if (!(typeof vd.items === 'undefined')) {
                    if(!(vd.items === null)) {
                        rsltd = vd.items;
                    }
                }
                if(rsltd.length < 1) {
                    this.<#= clearDatasourceMethodName #>();
                    return;
                }
                let mp1: {[key: string]: {[key: string]: {isMstrReq: boolean ,propNm:string}}} = this.<#= formServicePrefix + m2mModel.ViewName #>.getm2cKeyfm()['<#= Model.ViewName #>'];
                if(typeof mp1 === 'undefined') {
                    this.<#= clearDatasourceMethodName #>();
                    return;
                }
                let mp2: {[key: string]: {isMstrReq: boolean ,propNm:string}} = mp1['<#= foreignKey2Model.NavigationName #>'];
                if(typeof mp2 === 'undefined') {
                    this.<#= clearDatasourceMethodName #>();
                    return;
                }
                // it must be this.currentPageIndex == 0
                let flt: <#= GetInterfaceFilterName(Model) #>|any = { page: 0, pagesize: this.currentPageSize };
                rsltd.forEach((src: <#= GetInterfaceName(m2mModel) #> | any) => {
                    for(let i in mp2) {
                        if(typeof flt[i] === 'undefined') {
                            flt[i] = [];
                        }
                        flt[i].push(src[mp2[i].propNm]);
                    }
                });
                this.<#= formRootService #>.<#= GetManyByRepPrimMethodNamePrefix #>(flt).subscribe({
                    next: (v: <#= GetInterfacePageName(Model) #>) =>{
                        this.inQuery = false;
                        let rslt: Array<<#= GetInterfaceName(Model) #>> = [];
                        if (!(typeof v.items === 'undefined')) {
                            if(!(v.items === null)) {
                                rslt = v.items;
                            }
                        }
                        this.dataSource = rslt;
                        this.<#= applyFilterPropName #>.emit(this);
                        let currow: <#= GetInterfaceName(Model) #> | null = null;
                        if(Array.isArray(this.dataSource)) {
                            if(this.dataSource.length > 0) {
                                currow = this.dataSource[0];
                            }
                        }
                        this.<#= OnSelectRowMethodName #>(currow);
                        this.cd.detectChanges();
                    },
                    error: (error: any) => {
                        this.<#= clearDatasourceMethodName #>();
                        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
                    }
                });
            },
            error: (error: any) => {
                this.<#= clearDatasourceMethodName #>();
                this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
            }
        });
    }

    <#= afterPatchControlsPropName + m2mModel.ViewName #>(v: any) {
        this.<#= searchSelectRowPropName + m2mModel.ViewName #> = v;
    }
    <#= tpAheadValPropName + m2mModel.ViewName #>(v: any, i: number): any {
        if(v) {
            switch(i) {
<#
            {
                int ukprpcnt = 0;
                foreach(ModelViewKeyPropertySerializable ukprp in searchUk.UniqueKeyProperties) {
                   ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(ukprp.OriginalPropertyName, searchModel);
#>
                case <#= ukprpcnt #>: 
                 return v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#>;
<#
                    ukprpcnt++;
                }
            }
#>
            }

        } 
        return null;
    }
    <#= tpAheadFncPropName + m2mModel.ViewName #>(srv: any, wsfd: Array<<#= uniqFilterModelClassName #>>, value: any, i: number): Observable<Array<any>> {
        let fltr: <#= GetInterfaceFilterName(searchModel) #> | any = { page: 0, pagesize: 15 };
<#
            {
                int ukprpcnt = 0;
                foreach(ModelViewKeyPropertySerializable ukprp in searchUk.UniqueKeyProperties) {
                   ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(ukprp.OriginalPropertyName, searchModel);
#>
        if(i > <#= ukprpcnt #>) { 
            fltr.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#> = [wsfd[<#= ukprpcnt #>].fltrValue.value]; 
            fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, Model, OperatorSufix)#> = ['<#= EqualOperator #>']
        }
         else if(i === <#= ukprpcnt #>) { 
            fltr.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#> = [value]; 
            fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, Model, OperatorSufix)#> = ['<#= LikeOperator #>']
         }
<#
                    ukprpcnt++;
                }
            }
#>
        return srv.<#= GetManyByRepUnqMethodNamePrefix + searchUk.UniqueKeyName #>(fltr)
            .pipe(
                switchMap((rslt: <#= GetInterfacePageName(searchModel) #>) => {
                    if (!(typeof rslt === 'undefined')) {
                    if (!(rslt === null)) {
                            if (!(typeof rslt.items === 'undefined')) {
                                if (Array.isArray( rslt.items )) {
                                    return of(rslt.items);
                                }
                            }
                        }
                    }
                    return of([]);
                }),
                catchError((x:any) =>of([]))
            );
    }
    <#= tpAheadCptnPropName + m2mModel.ViewName #>(v: any, i: number): string {
        let retStr = '';
        if(v) {
<#
            {
                int ukprpcnt = 0;
                foreach(ModelViewKeyPropertySerializable ukprp in searchUk.UniqueKeyProperties) {
                   ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(ukprp.OriginalPropertyName, searchModel);
#>
            if (!(typeof v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#> === 'undefined')) {
                if(!(v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#> === null)) {
                    retStr = retStr + ' ' + v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, searchModel)#>;
                }
            }
<#
                }
            }
#>
        } 
        return retStr;
    }
/////////////////////////////////////////
<#
        } // foreach(var sch in searchSchemas) {}
    } // if(searchSchemas!= null) {}
#>




<#
        for(int i = 0; i < uniqueKeys.Count; i++) { 
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, uniqueKeys[i], out indErrrorText);
            if (!indIsCorrect) {
#>

//
// Could not generate fragment of code
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//

<#
            } else {
                string caption = "Primary";
                string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
                if(!uniqueKeys[i].IsPrimary) {
                    caption = uniqueKeys[i].UniqueKeyName;
                }
                if(!uniqueKeys[i].IsPrimary) {
                    localRouteManyName = GetManyByRepUnqMethodNamePrefix + caption;
                }

#>
/////////////////////////////////////////

    <#= searchSelectRowPropName + caption #>: <#= GetInterfaceName(Model) #> | any = null;
    <#= afterPatchControlsPropName + caption #>(v: any) {
        if(v) {
            this.<#= searchSelectRowPropName + caption #> = v as <#= GetInterfaceName(Model) #>;
        } else {
            this.<#= searchSelectRowPropName + caption #> = null;
        }
    }

    <#= tpAheadValPropName + caption #>(v: any, i: number): any {
        if(v) {
            switch(i) {
<#
            {
                int ukprpcnt = 0;
                
                foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                    //ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetModelScalarPropByKeyProp(Model, kps);
                    
#>
                case <#= ukprpcnt #>: 
                 return v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#>;
<#
                    ukprpcnt++;
                }
            }
#>
            }
        } 
        return null;
    }
    <#= tpAheadFncPropName + caption #>(srv: any, wsfd: Array<<#= uniqFilterModelClassName #>>, value: any, i: number): Observable<Array<any>> {
        let fltr: <#= GetInterfaceFilterName(Model) #> | any = { page: 0, pagesize: 15 };
<#
            {
                int ukprpcnt = 0;
                foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                    //ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetModelScalarPropByKeyProp(Model, kps);
#>
        if(i > <#= ukprpcnt #>) { 
            fltr.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#> = [wsfd[<#= ukprpcnt #>].fltrValue.value]; 
            fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, Model, OperatorSufix)#> = ['<#= EqualOperator #>']
         } else if(i === <#= ukprpcnt #>) { 
            fltr.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#> = [value]; 
            fltr.<#= GetFilterPropertyOperatorName(modelViewPropertyOfVwSerializable, Model, OperatorSufix)#> = ['<#= LikeOperator #>']
         }
<#
                    ukprpcnt++;
                }
            }
#>
        return srv.<#= localRouteManyName #>(fltr)
            .pipe(
                switchMap((rslt: <#= GetInterfacePageName(Model) #>) => {
                    if (!(typeof rslt === 'undefined')) {
                    if (!(rslt === null)) {
                            if (!(typeof rslt.items === 'undefined')) {
                                if (Array.isArray( rslt.items )) {
                                    return of(rslt.items);
                                }
                            }
                        }
                    }
                    return of([]);
                }),
                catchError((x:any) =>of([]))
            );
    }
    <#= tpAheadCptnPropName + caption #>(v: any, i: number): string {
        let retStr = '';
        if(v) {
<#
            {
                int ukprpcnt = 0;
                foreach(ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable in uniqueKeys[i].UniqueKeyProperties) {
                    //ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetModelScalarPropByKeyProp(Model, kps);
#>
            if (!(typeof v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#> === 'undefined')) {
                if(!(v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#> === null)) {
                    retStr = retStr + ' ' + v.<#= GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, Model)#>;
                }
            }
<#
                }
            }
#>
        } 
        return retStr;
    }
<#
            }
        }
#>
/////////////////////////////////////////

}


<#+
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetAllDisplayedColumns(ModelViewSerializable model) {
        string result= "";
        if (model == null) {
            return result; 
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return result; 
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if (result == "") {
                    result = "'" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                } else {
                    result += ", '" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                }
            }
        }
        return result;
    }

    string GetDisplayedColumns(ModelViewSerializable model) {
        string result= "";
        if (model == null) {
            return result; 
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return result; 
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if (result == "") {
                    result = "'" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                } else {
                    result += ", '" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                }
                if (modelViewUIListPropertySerializable.IsNewLineAfter) {
                    break;
                }
            }
        }
        return result;
    }
    bool hasMatSort(ModelViewSerializable model) {
        if (model == null) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if(model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting)) {
                    return true;
                }
            }
        }
        return false;
    }
    string matSortIfNeeded(ModelViewSerializable model) {
        if(hasMatSort(model)) {
            return "matSort";
        }
        return "";
    }
    bool hasMatSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string matSortHeaderIfNeeded(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if(hasMatSortHeader(modelViewUIListPropertySerializable, model)) {
            return "mat-sort-header";
        }
        return "";
    }
    string GetContextComponentClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    string GetInputTypeToEnumName(int inputType) {
        switch(inputType) {
            case 1:
                return "AddMode";
            case 2:
                return "UpdateMode";
            default:
                return "DeleteMode";
        }
    }
    InputTypeEnum GetInputTypeWhenXXX(ModelViewUIFormPropertySerializable prop, int inputType) {
        switch(inputType) {
            case 1:
                return prop.InputTypeWhenAdd;
            case 2:
                return prop.InputTypeWhenUpdate;
            default:
                return prop.InputTypeWhenDelete;
        }
    }

    string GetInterfaceEDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Edlg";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceName(model);
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfacePageNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfacePageName(model);
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetInterfaceFilterNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceFilterName(model);
    }
    string GetPropertyTypeScriptTypeName(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetJavaScriptToStringMethod(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.datetime": 
                result =  ".toString()"; // .toDateString()
                break;
            case "system.guid":
            case "system.string":
                result =  "";
                break;
            default:
                result =  ".toString()";
                break;
        }
        return result;
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop)
    {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    public string FirstLetterToUpper(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str)
    {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetTypeScriptPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    string GetTypeScriptPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }

    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date('" + propValue + "')";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMinValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMinValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date('" + propValue + "')";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }



    List<string> GetValidators(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, Dictionary<string, string> regExps) {
        List<string> result = new List<string>();
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) {
            return result;
        }
        if(sclrProp.IsRequiredInView) {
            result.Add("Validators.required");
        }
        bool hasCurrencyAttr = false;
        if(sclrProp.Attributes != null) {
            hasCurrencyAttr = sclrProp.Attributes.Any(a => a.AttrName == "DataType" && a.VaueProperties.Any(p => p.PropValue == "DataType.Currency"));
        }
        string propValue = null;
        switch( sclrProp.UnderlyingTypeName.ToLower() ) {
            case "system.int16":
            case "system.int32":
            case "system.int64":
            case "system.uint16":
            case "system.uint32":
            case "system.uint64":
                if (hasCurrencyAttr) {
                    result.Add("Validators.pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add("Validators.pattern("+ regExps["RegExpInteger"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.guid":
                result.Add("Validators.pattern("+ regExps["RegExpGuid"] +")");
                break;
            case "system.double":
            case "system.decimal":
            case "system.single":
                if (hasCurrencyAttr) {
                    result.Add("Validators.pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add("Validators.pattern("+ regExps["RegExpFloat"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.string":
                propValue = GetUnNamedAtributeValue(sclrProp, "StringLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetUnNamedAtributeValue(sclrProp, "MaxLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetUnNamedAtributeValue(sclrProp, "MinLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.minLength("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.datetime":
                // mat-datepicker has special min/max validation: [min] [max]
                break;
        }
        return result;
    }
    bool HasCombo(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  (prop.InputTypeWhenAdd == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenDelete == InputTypeEnum.Combo);
    }
    bool HasButton(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog);
    }
    bool HasTypeahead(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
    }
    bool HasInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return HasCombo(prop, model) ||  HasButton(prop, model) || HasTypeahead(prop, model);
    }
    bool HasInitMethodForInputMode(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, int inputType) {
        switch(inputType) {
            case 1:
                return
                    (prop.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead);
                break;
            case 2:
                return
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead);
                break;
            case 3:
                return
                    (prop.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
                break;
        }
        return false;
    }
    bool HasModelInitMethodForInputMode(ModelViewSerializable model, int inputType) {
        if (model == null) {
            return false;
        }
        if (model.UIFormProperties == null) {
            return false;
        }
        foreach(ModelViewUIFormPropertySerializable prop in model.UIFormProperties) {
            if(HasInitMethodForInputMode(prop, model, inputType)) {
                return true;
            }
        }
        return false;
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }

    string GetExpressionForOnFilterTypeaheadControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string typeaheadSufix) {
        return  "OnFilter" + GetExpressionForControlList(prop, model, typeaheadSufix);
    }
    string GetExpressionForOnUpdateComboControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string comboSufix) {
        return  "OnUpdate" + GetExpressionForControlList(prop, model, comboSufix);
    }
    string GetExpressionForOnValChangedMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnValChanged" + GetTypeScriptPropertyNameEx(prop, model);
    }
    string GetTypeScriptPropertyNameWithSufixBase(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyName(prop, model) + sufix;
    }
    string GetTypeScriptPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForOnInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnInit" + GetTypeScriptPropertyNameEx(prop, model);
    }


    List<string> CollectComboListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Combo)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Array<" + GetInterfaceName(mv) + ">");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectButtonItemInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add( GetInterfaceName(mv) );
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)  {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectTypeaheadListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Observable<Array<" + GetInterfaceName(mv) + ">>");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Observable<Array<" + GetInterfaceName(mv) + ">>";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Observable<Array<" + GetInterfaceName(mv) + ">>";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    string GetFormControlHiddenCondition(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string eformModePropName) {
        if ((prop.InputTypeWhenAdd == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenDelete == InputTypeEnum.Hidden)) {
            return "";
        }
        string result= "*ngIf = \"";
        bool setOr = false;
        if (prop.InputTypeWhenAdd == InputTypeEnum.Hidden) {
            result = result + "(" + eformModePropName + "==1)";
            setOr = true;
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==2)";
            setOr = true;
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==3)";
        }
        return result + "\"";
    }
    int GetGreaterThanPercent(int currCnt, int maxCnt, int[] wdths) {
        if (currCnt < maxCnt) {
            return wdths[0];
        }
        return wdths[1];
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    bool IsDateInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName);
    }
    string GetCommonEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetCrossComponentFolderName(ModelViewSerializable model, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    string GetContextComponentSelectorCommonPart(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    
    string GetServiceClassNameEx(DbContextSerializable context, string ViewName, string fileType) {
        if ((context == null) || string.IsNullOrEmpty(ViewName) || string.IsNullOrEmpty(fileType)) {
            return "";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null) {
            return "";
        }
        return GetServiceClassName(model, fileType);
    }

    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }

    string GetPrimKeyFilterForFindIndexMethod(DbContextSerializable context, string ViewName, string srcPrefix, string destPrefix) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "false";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null)
        {
            return "false";
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null))
        {
            return "false";
        }
        string result = "";
        foreach(ModelViewKeyPropertySerializable keyProp in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable =
                model.ScalarProperties.Where(p => p.ViewPropertyName == keyProp.ViewPropertyName).FirstOrDefault();
            if (modelViewPropertyOfVwSerializable != null) {
                string proName = GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, model);
                if(result != "") {
                    result += " && ";
                }
                result += "("+ srcPrefix + "." + proName + " === " + destPrefix + "." + proName + ")";
            }
        }
        if (result == "") {
            return "false";
        }
        return result;
    }

    string GetControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, mv);
    }

    ModelViewSerializable
        GetViewForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        if ((prop == null) || (model == null) || (context == null)) {
            return null;
        }
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
    }

    string GetViewNameForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        ModelViewSerializable mv =
            GetViewForControlList(prop, model, context, inputType);
        if (mv == null)
        {
            return "NoName";
        }
        return mv.ViewName;
    }

    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }

    List<ModelViewPropertyOfVwSerializable> GetPrimaryKeyProps(DbContextSerializable context, string viewName) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return result;
        }
        return GetModelPrimaryKeyProps( context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault() );
    }

    List<ModelViewPropertyOfVwSerializable> GetForeignKeyProps(DbContextSerializable context, ModelViewSerializable model,
                                            ModelViewUIFormPropertySerializable masterProp, ModelViewUIFormPropertySerializable detailProp, int inputType) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || (masterProp == null) || (detailProp == null) || (model == null)) {
            return result;
        }
        string masterForeignKeyNameChain = masterProp.ForeignKeyNameChain;
        if(string.IsNullOrEmpty(masterForeignKeyNameChain)) {
            return result;
        }
        string detailForeignKeyNameChain = detailProp.ForeignKeyNameChain;
        if( ! string.IsNullOrEmpty(detailProp.ForeignKeyNameChain) ) {
            masterForeignKeyNameChain = masterForeignKeyNameChain.Replace(detailProp.ForeignKeyNameChain + ".", "");
        }
        string[] fKchain = masterForeignKeyNameChain.Split(new string[] {"."}, StringSplitOptions.None);
        if (fKchain.Length < 1) {
            return result;
        }
        ModelViewSerializable detailModel =
            GetViewForControlList(detailProp, model, context, inputType);
        if(detailModel == null) {
            return result;
        }
        if(detailModel.ForeignKeys == null) {
            return result;
        }
        ModelViewForeignKeySerializable foreignKey =
            detailModel.ForeignKeys.Where(f => f.NavigationName == fKchain[0]).FirstOrDefault();
        if(foreignKey == null){
            return result;
        }
        if(foreignKey.ForeignKeyProps == null) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable scProp = 
                detailModel.ScalarProperties.Where(p => p.ViewPropertyName == fkProp.ViewPropertyName).FirstOrDefault();
            if (scProp != null) {
                result.Add(scProp);
            }
        }
        return result;
    }


    List<string> GetFKViewsList(ModelViewSerializable model, 
                                     DbContextSerializable context,
                                     List<string> fkViewsDict)
    {
        if ((model == null) || (context == null) || (fkViewsDict == null)) {
            return fkViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return fkViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return fkViewsDict;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDirectMasters(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string viewNameForSel = GetViewNameForControlList(prop, model, context, inputType);
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return result;
        }
        ModelViewSerializable modelViewSerializable = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (modelViewSerializable == null)
        {
            return result;
        }
        if (modelViewSerializable.ForeignKeys == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            foreignKeyNameChain = "";
        } else {
            foreignKeyNameChain += ".";
        }
        foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in modelViewSerializable.ForeignKeys) {
            if (!string.IsNullOrEmpty(modelViewForeignKeySerializable.ViewName)) {
                string fltFKNameChain = foreignKeyNameChain + modelViewForeignKeySerializable.NavigationName;
                List<ModelViewUIFormPropertySerializable> propLst = null;
                switch(inputType) {
                    case 1:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 2:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 3:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    default:
                        break;
                }
                if (propLst != null) {
                    result.AddRange(propLst);
                }
            }
        }
        return result;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDependentScalarProps(ModelViewUIFormPropertySerializable prop,
                                ModelViewSerializable model, 
                                DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ((prop == null) || (model == null) || (context == null)) {
            return result;
        }
        if (model.UIFormProperties == null)  {
            return result;
        }
        if(!HasInitMethodForInputMode(prop, model, inputType)) {
            return result;
        }
        string currentPropChain = string.IsNullOrEmpty(prop.ForeignKeyNameChain) ? "" : prop.ForeignKeyNameChain;
        List<ModelViewUIFormPropertySerializable> masters = GetDirectMasters(prop, model, context, inputType);
        foreach(ModelViewUIFormPropertySerializable dependentProp in model.UIFormProperties) {
            if(prop.ViewPropertyName == dependentProp.ViewPropertyName) {
                result.Add(dependentProp);
                continue;
            }
            if(HasInitMethodForInputMode(dependentProp, model, inputType)) {
                continue;
            }
            string dependentPropChain = string.IsNullOrEmpty(dependentProp.ForeignKeyNameChain) ? "" :  dependentProp.ForeignKeyNameChain;
            if(dependentPropChain == currentPropChain) {
                result.Add(dependentProp);
                continue;
            }
            string locCurrentPropChain = currentPropChain;
            if (!string.IsNullOrEmpty(locCurrentPropChain)) locCurrentPropChain += ".";
            if (!dependentPropChain.StartsWith(locCurrentPropChain)) {
                continue;
            }
            if (!masters.Where(p => dependentPropChain.StartsWith(p.ForeignKeyNameChain)).Any()) {
                result.Add(dependentProp);
            }
        }
        return result;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        string fltFKNameChain  = string.Join(".", foreignKeys, 0, foreignKeys.Length - 1);
        List<ModelViewUIFormPropertySerializable> propLst = null;
        switch(inputType) {
            case 1:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 2:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 3:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                break;
            default:
                break;
        }
        if (propLst != null) {
            return propLst;
        }
        return result;
    }

    bool MustHaveDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context) {
        bool result = false;
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        return true;
    }

    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }

    List<ModelViewPropertyOfVwSerializable> GetAllForeignKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if(model == null) {
            return result;
        }
        if ((model.ForeignKeys == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if (!string.IsNullOrEmpty(fk.ViewName)) {
                if (fk.ForeignKeyProps != null) {
                    foreach(ModelViewKeyPropertySerializable fkProp in fk.ForeignKeyProps) {
                        ModelViewPropertyOfVwSerializable sclrProp =
                            model.ScalarProperties.Where(p => p.ViewPropertyName == fkProp.ViewPropertyName).FirstOrDefault();
                        if(sclrProp != null) {
                            result.Add(sclrProp);
                        }
                    }
                }
            }
        }
        return result;
    }
    ModelViewPropertyOfVwSerializable GetOnValChangeViewPropName(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable, ModelViewUIFormPropertySerializable dependentScalarProp, int inputType) {
        if(dependentScalarProp == null) {
            return null;
        }
        ModelViewSerializable view = GetViewForControlList(modelViewUIFormPropertySerializable, model, context, inputType);
        if(view == null) {
            return null;
        }
        string foreignKeyNameChain = 
            string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain) ? "" : modelViewUIFormPropertySerializable.ForeignKeyNameChain;
        
        
        string dependentForeignKeyNameChain = 
            (string.IsNullOrEmpty(dependentScalarProp.ForeignKeyNameChain) ? "" : dependentScalarProp.ForeignKeyNameChain);
        if (foreignKeyNameChain == dependentForeignKeyNameChain) {
            dependentForeignKeyNameChain = "";
        } else {
            if (foreignKeyNameChain != "") {
              foreignKeyNameChain += ".";
              dependentForeignKeyNameChain = dependentForeignKeyNameChain.Replace(foreignKeyNameChain, "");
            }
        }
        if (string.IsNullOrEmpty(dependentForeignKeyNameChain)) {
            return
                view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
        }
        return
            view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && (p.ForeignKeyNameChain == dependentForeignKeyNameChain)).FirstOrDefault();
    }
    
    bool HasOnValChangedMethod(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable) {
        bool result = false;
        for (int inputType = 1 ; inputType < 4; inputType++) {
            result = 
                (GetDirectDetails(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0) ||
                (GetDependentScalarProps(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0);
            if (result) {
                return result;
            }
        }
        return result;
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    
    List<ModelViewPropertyOfVwSerializable> GetModelUniqueKeyProps(ModelViewSerializable model, ModelViewUniqueKeySerializable uk) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (uk == null))
        {
            return result;
        }
        if ((uk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in uk.UniqueKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            if(modelViewForeignKeySerializable.PrincipalKeyProps.Count == modelViewForeignKeySerializable.ForeignKeyProps.Count) {
                                for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                    if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                        if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                            prop =
                                            model.ScalarProperties.Where(p => 
                                                (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                                &&
                                                // next line is correct: we do not look for deeper
                                                (p.ForeignKeyNameChain == modelViewForeignKeySerializable.NavigationName)
                                            ).FirstOrDefault();
                                        }
                                    }
                                    if(prop != null) break;
                                }
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        if (!result.Any(p => p == prop)) result.Add(prop);
                    }
                }
            }
        }
        return result;
    }

    List<ModelViewUniqueKeyOfVwSerializable> GetModelUniqueKeys(ModelViewSerializable model, List<ModelViewUniqueKeyOfVwSerializable> rsltKeys) {
        if((model == null) || (rsltKeys == null)) return rsltKeys;
        if ((model.UniqueKeys == null) || (model.ScalarProperties == null)) return rsltKeys;
        foreach(ModelViewUniqueKeySerializable uk in model.UniqueKeys) {
            if(uk.UniqueKeyProperties == null) continue;
            if(uk.UniqueKeyProperties.Count < 1) continue;
            List<ModelViewPropertyOfVwSerializable> ukprops = GetModelUniqueKeyProps(model, uk);
            if (ukprops.Count == uk.UniqueKeyProperties.Count) {
                rsltKeys.Add( new ModelViewUniqueKeyOfVwSerializable() {
                    UniqueKeyName = uk.UniqueKeyName,
                    IsPrimary = false,
                    UniqueKeyProperties = ukprops
                });
            }
        }
        return rsltKeys;
    }

    ModelViewUniqueKeyOfVwSerializable GetModelPrimaryKey(ModelViewSerializable model) {
        if (model == null)  return null;
        if (model.PrimaryKeyProperties == null) return null;
        if (model.PrimaryKeyProperties.Count < 1) return null;
        List<ModelViewPropertyOfVwSerializable> props = GetModelPrimaryKeyProps(model);
        if(props.Count != model.PrimaryKeyProperties.Count) return null;
        return new ModelViewUniqueKeyOfVwSerializable() {
            UniqueKeyName = null,
            IsPrimary = true,
            UniqueKeyProperties = props
        };
    }
    bool CheckModelIfIndexIsCorrect(ModelViewSerializable model,ModelViewUniqueKeyOfVwSerializable indx, out string error) {
        if((model == null) || (indx == null)) {
            error = "Input params is not defined";
            return false;
        }
        if(indx.UniqueKeyProperties == null) {
            error = "UniqueKeyProperties of the Index are not defined";
            return false;
        }
        if(indx.UniqueKeyProperties.Count < 1) {
            if(indx.IsPrimary)
                error = "UniqueKeyProperties.Count of the Primary Index is less than 1";
            else 
                error = "UniqueKeyProperties.Count of the Unique Index (UniqueKeyName == "+ indx.UniqueKeyName + ") is less than 1";
            return false;
        }

        if(indx.IsPrimary) {
            if(model.PrimaryKeyProperties == null) {
                error = "PrimaryKeyProperties of the model are not defined";
                return false;
            }
            if (model.PrimaryKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Index fields are included in the Model";
                return false;
            }
        } else {
            if(model.UniqueKeys == null) {
                error = "UniqueKeys of the model are not defined (UniqueKeyName == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(string.IsNullOrEmpty(indx.UniqueKeyName)) {
                error = "The Name of the Index is not defined (UniqueKeyName)";
                return false;
            }
            ModelViewUniqueKeySerializable mindx = model.UniqueKeys.Where(i => i.UniqueKeyName == indx.UniqueKeyName).FirstOrDefault();
            if(mindx == null) {
                error = "Could not find index in model by name (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(mindx.UniqueKeyProperties == null) {
                error = "UniqueKeyProperties of the Unique Index (Unique Index Name == "+ indx.UniqueKeyName + ") are not defined";
                return false;
            }
            if(mindx.UniqueKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Unique Index fields are included in the Model (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
        }
        error = "";
        return true;
    }
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) { 
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewEntityPropertySerializable aprop = model.AllProperties.Where(p => p.OriginalPropertyName == origPropName).FirstOrDefault();
        if(aprop == null) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => 
                (p.OriginalPropertyName == origPropName) && 
                string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if ((fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1)) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => 
                    (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && 
                    (p.ForeignKeyName == fk.NavigationName) && 
                    (p.ForeignKeyName == p.ForeignKeyNameChain)
                    ).FirstOrDefault();
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }
    bool IsForeigKeyMapedToPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
            if( !model.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName) ) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalars(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.ScalarProperties == null) || (fk.ForeignKeyProps == null)) return false;
        if (fk.ForeignKeyProps.Count < 1) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
             if(GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsEx(ModelViewForeignKeySerializable searchFk, ModelViewSerializable searchModel, ModelViewSerializable model) {
        if ((searchModel == null) || (searchFk == null) || (model == null)) return false;
        if ((searchModel.ScalarProperties == null) || (searchFk.ForeignKeyProps == null) || (model.ScalarProperties == null)) return false;
        if ((searchFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable ukp in searchFk.ForeignKeyProps) {
             ModelViewPropertyOfVwSerializable sprp = GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, searchModel);
             if(sprp == null) return false;
             if(!model.ScalarProperties.Any(p => p.ViewPropertyName == sprp.ViewPropertyName)) return false;
        }
        return true;
    }

    bool IsUniqKeyMapedToScalars(ModelViewUniqueKeySerializable searchUk, ModelViewSerializable searchModel) {
        if ((searchModel == null) || (searchUk == null)) return false;
        if ((searchModel.ScalarProperties == null) || (searchUk.UniqueKeyProperties == null)) return false;
        if (searchUk.UniqueKeyProperties.Count < 1) return false;
        foreach(ModelViewKeyPropertySerializable ukp in searchUk.UniqueKeyProperties) {
             if(GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, searchModel) == null) return false;
        }
        return true;
    }
    bool IsUniqKeyMapedToScalarsEx(ModelViewUniqueKeySerializable searchUk, ModelViewSerializable searchModel, ModelViewSerializable model) {
        if ((searchModel == null) || (searchUk == null) || (model == null)) return false;
        if ((searchModel.ScalarProperties == null) || (searchUk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) return false;
        if ((searchUk.UniqueKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable ukp in searchUk.UniqueKeyProperties) {
             ModelViewPropertyOfVwSerializable sprp = GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, searchModel);
             if(sprp == null) return false;
             if(!model.ScalarProperties.Any(p => p.ViewPropertyName == sprp.ViewPropertyName)) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToHeaderOfPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
            if (fk.ForeignKeyProps[i].OriginalPropertyName != model.PrimaryKeyProperties[i].OriginalPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToTailOfPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
            if (fk.ForeignKeyProps[fk.ForeignKeyProps.Count - (1 + i)].OriginalPropertyName != model.PrimaryKeyProperties[model.PrimaryKeyProperties.Count - (1 + i)].OriginalPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToMidleOfPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        int k  = -1;
        // from 1 till fk.PrimaryKeyProperties.Count-2
        for(int i = 1; i < model.PrimaryKeyProperties.Count-1; i++) {
            if(model.PrimaryKeyProperties[i].OriginalPropertyName == fk.ForeignKeyProps[0].OriginalPropertyName) {
                k = i;
                break;
            }
        }
        if (k < 0) return false;
        if ((k + fk.ForeignKeyProps.Count) >= model.PrimaryKeyProperties.Count) return false;
        for(int i = k; i < fk.ForeignKeyProps.Count; i++) {
            if (fk.ForeignKeyProps[i].OriginalPropertyName != model.PrimaryKeyProperties[i].OriginalPropertyName) return false;
        }
        return true;
    }
    List<Tuple<ModelViewSerializable,ModelViewForeignKeySerializable,List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>,ModelViewSerializable,ModelViewForeignKeySerializable,ModelViewUniqueKeySerializable>> GetSearchResources(ModelViewSerializable model, DbContextSerializable context) {
        if ((context == null) || (model == null)) return null;
        if ((context.ModelViews == null) || (model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) ) return null;
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return null;
        List<ModelViewSerializable> m2mMdls = context.ModelViews.Where(p => (p.ForeignKeys.Any(f => f.ViewName == model.ViewName) && (p.ForeignKeys.Count > 1))).ToList();
        if(m2mMdls.Count < 1) return null;
        // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk
        List<Tuple<ModelViewSerializable,ModelViewForeignKeySerializable,List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>,ModelViewSerializable,ModelViewForeignKeySerializable,ModelViewUniqueKeySerializable>> result = null;
        // return new List<Tuple<ModelViewSerializable,ModelViewForeignKeySerializable,List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>,ModelViewSerializable,ModelViewForeignKeySerializable,ModelViewUniqueKeySerializable>>();
        foreach(ModelViewSerializable m2mMdl in m2mMdls) {
            if(m2mMdl.PrimaryKeyProperties == null) continue;
            if(m2mMdl.PrimaryKeyProperties.Count < 1) continue;
            List<ModelViewForeignKeySerializable> m2mFks = m2mMdl.ForeignKeys.Where(f => f.ViewName == model.ViewName).ToList();
            foreach(ModelViewForeignKeySerializable m2mFk in m2mFks) {
                if(!IsForeigKeyMapedToTailOfPrimKey(m2mFk, m2mMdl)) continue;
                if(!IsForeigKeyMapedToScalars(m2mFk, m2mMdl)) continue;
                // m2mMdl - m2mModel, m2mFk - m2mForeignKey,
                foreach(ModelViewForeignKeySerializable searchFk in m2mMdl.ForeignKeys) {
                    if(searchFk == m2mFk) continue;
                    ModelViewSerializable searchMdl = context.ModelViews.Where(mv => (mv.ViewName == searchFk.ViewName)).FirstOrDefault();
                    if(searchMdl == null) continue;
                    if(searchMdl.UniqueKeys == null) continue;
                    if(searchMdl.UniqueKeys.Count < 1) continue;
                    if(!IsForeigKeyMapedToHeaderOfPrimKey(searchFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalars(searchFk, m2mMdl)) continue;
                    foreach(ModelViewUniqueKeySerializable searchUk in searchMdl.UniqueKeys) {
                        if(!IsUniqKeyMapedToScalarsEx(searchUk, searchMdl, model)) continue;
                        // searchMdl, searchFk, searchUk
                        List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>> fkpairs = null;
                        if(model.ForeignKeys != null) {
                            foreach(ModelViewForeignKeySerializable modelFk in model.ForeignKeys) {
                                if(!IsForeigKeyMapedToScalars(modelFk, model)) continue;
                                List<ModelViewForeignKeySerializable> additionalM2mFks = m2mMdl.ForeignKeys.Where(f => f.ViewName == modelFk.ViewName).ToList();
                                foreach(ModelViewForeignKeySerializable additionalM2mFk in additionalM2mFks) {
                                    if(!IsForeigKeyMapedToScalarsEx(additionalM2mFk, m2mMdl, model)) continue;
                                    if(fkpairs == null) {
                                        fkpairs = new List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>();
                                    }
                                    fkpairs.Add( new Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>(modelFk,additionalM2mFk)  );
                                }
                            }
                        }
                        if(result == null) {
                            result = new List<Tuple<ModelViewSerializable,ModelViewForeignKeySerializable,List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>,ModelViewSerializable,ModelViewForeignKeySerializable,ModelViewUniqueKeySerializable>>();
                        }
                        result.Add(
                          new Tuple<ModelViewSerializable,ModelViewForeignKeySerializable,List<Tuple<ModelViewForeignKeySerializable, ModelViewForeignKeySerializable>>,ModelViewSerializable,ModelViewForeignKeySerializable,ModelViewUniqueKeySerializable>(
                            m2mMdl, m2mFk, fkpairs, searchMdl, searchFk, searchUk
                          ));
                    }
                }
            }
        }
        return result;
    }

    ModelViewPropertyOfVwSerializable GetModelScalarPropByKeyProp(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable rslt = null;
        if ((model == null) || (pk == null)) return null;
        if (model.ScalarProperties == null) return null;
        ModelViewPropertyOfVwSerializable scProp = 
            model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
        if (scProp != null) return scProp;
        if (model.ForeignKeys != null) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                scProp = null;
                if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                    int cnt = fk.ForeignKeyProps.Count;
                    if (cnt < fk.PrincipalKeyProps.Count)
                    {
                        cnt = fk.PrincipalKeyProps.Count;
                    }
                    for(int i = 0; i < cnt; i++)
                    {
                        if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                        {
                            scProp=
                                model.ScalarProperties.Where(p =>
                                ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                        }
                        if(scProp != null) return scProp;
                    }
                }
            }
        }
        return null;
    }


#>
