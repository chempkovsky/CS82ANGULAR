<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="html" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#
    bool localize = Context.Localize;

    string AppearancePropName           = "appearance";
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string OverflowSelector             = "ovrflw";
    string OverflowPropName             = "ovrflw";
    string containerMenuItemsPropName           = "contMenuItems";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string showAddFltItemSelector       = "show-add-flt-item";
    string showAddFltItemPropName       = "showAddFltItem";

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";

    string appChangePasswordComponentFolder       = "00144-app-glbl-chngpswd.component.ts";
    string appChangePasswordComponentClassName    = GetComponentClassName(Model, appChangePasswordComponentFolder);

#>

<mat-card>
    <mat-card-header>
        <mat-card-subtitle>{{title}}</mat-card-subtitle>
    </mat-card-header>
    <mat-card-content >

    <div [formGroup]="chngpswdFormGroup" (ngSubmit)="doSubmit()" fxLayout="column wrap">
        <mat-form-field  [appearance]="appearance">
<# 
    if(localize) {
#>
            <mat-label i18n="Old Password@@<#= appChangePasswordComponentClassName #>.Old-Password-label">Old Password</mat-label>
            <input  matInput i18n-placeholder="Old Password@@<#= appChangePasswordComponentClassName #>.Old-Password-placeholder" placeholder="Old Password..." formControlName="oldpassword" [type]="oldpwdhide ? 'password' : 'text'">
<# 
    } else {
#>
            <mat-label>Old Password</mat-label>
            <input  matInput placeholder="Old Password..." formControlName="oldpassword" [type]="oldpwdhide ? 'password' : 'text'">
<# 
    }
#>
            <button mat-icon-button matSuffix (click)="oldpwdhide = !oldpwdhide">
                <mat-icon>{{oldpwdhide ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="chngpswdFormGroup.controls['oldpassword'].invalid">{{getErrorMessage(chngpswdFormGroup.controls['oldpassword'])}}</mat-error>
<# 
    if(localize) {
#>
                <mat-hint align="end" i18n="Enter Old Password@@<#= appChangePasswordComponentClassName #>.Enter-Old-Password-hint">Enter Old Password</mat-hint>
<# 
    } else {
#>
            <mat-hint align="end">Enter Old Password</mat-hint>
<# 
    }
#>

        </mat-form-field>
        <mat-form-field  [appearance]="appearance" >
<# 
    if(localize) {
#>
            <mat-label i18n="New Password@@<#= appChangePasswordComponentClassName #>.New-Password-label">New Password</mat-label>
            <input  matInput i18n-placeholder="New Password@@<#= appChangePasswordComponentClassName #>.New-Password-placeholder" placeholder="New Password"  formControlName="newPassword" [type]="pwdhide ? 'password' : 'text'">
<# 
    } else {
#>
            <mat-label>New Password</mat-label>
            <input  matInput placeholder="New Password..." formControlName="newPassword" [type]="pwdhide ? 'password' : 'text'">
<# 
    }
#>
            <button mat-icon-button matSuffix (click)="pwdhide = !pwdhide">
                <mat-icon>{{pwdhide ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="chngpswdFormGroup.controls['newPassword'].invalid">{{getErrorMessage(chngpswdFormGroup.controls['newPassword'])}}</mat-error>
<# 
    if(localize) {
#>
                <mat-hint align="end" i18n="Enter New Password@@<#= appChangePasswordComponentClassName #>.Enter-New-Password-hint">Enter New Password</mat-hint>
<# 
    } else {
#>
            <mat-hint align="end">Enter New Password</mat-hint>
<# 
    }
#>
        </mat-form-field>
        <mat-form-field  [appearance]="appearance">
<# 
    if(localize) {
#>
            <mat-label i18n="Confirm Password@@<#= appChangePasswordComponentClassName #>.Confirm-Password-label">Confirm Password</mat-label>
            <input  matInput i18n-placeholder="New Password@@<#= appChangePasswordComponentClassName #>.Confirm-Password-placeholder" placeholder="Confirm Password"  formControlName="confirmPassword" [type]="cnfPwdhide ? 'password' : 'text'">
<# 
    } else {
#>
            <mat-label>Confirm Password</mat-label>
            <input  matInput placeholder="Confirm Password..." formControlName="confirmPassword" [type]="cnfPwdhide ? 'password' : 'text'">
<# 
    }
#>


            <button mat-icon-button matSuffix (click)="cnfPwdhide = !cnfPwdhide">
                <mat-icon>{{cnfPwdhide ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="chngpswdFormGroup.controls['confirmPassword'].invalid">{{getErrorMessage(chngpswdFormGroup.controls['confirmPassword'])}}</mat-error>
<# 
    if(localize) {
#>
                <mat-hint align="end" i18n="Confirm Password@@<#= appChangePasswordComponentClassName #>.Confirm Password-hint">Confirm Password</mat-hint>
<# 
    } else {
#>
            <mat-hint align="end">Confirm Password</mat-hint>
<# 
    }
#>

        </mat-form-field>
    </div>

    </mat-card-content>
    <mat-card-actions>
<# 
    if(localize) {
#>
        <button mat-button (click)="onCancel()" cdkFocusInitial i18n="Canceld@@Cancel.Cancel">Cancel</button>
        <button mat-button (click)="doSubmit()" i18n="Ok@@Ok.Ok">Ok</button>
<# 
    } else {
#>
        <button mat-button (click)="onCancel()" cdkFocusInitial>Cancel</button>
        <button mat-button (click)="doSubmit()">Ok</button>
<# 
    }
#>
    </mat-card-actions>
</mat-card>

