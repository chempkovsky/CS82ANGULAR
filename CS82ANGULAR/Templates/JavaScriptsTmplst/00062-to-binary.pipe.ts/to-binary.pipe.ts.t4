<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    string toBinaryPipeFolder                = "00062-to-binary.pipe.ts";
    string toBinaryPipeClassName             = GetPipeClassName(Model, toBinaryPipeFolder);
    string toBinaryPipeSelectorName          = GetPipeSelectorName(Model, toBinaryPipeFolder);

#>

import { Pipe, PipeTransform } from "@angular/core";

@Pipe({ 
  name: '<#= toBinaryPipeSelectorName #>' 
})
export class <#= toBinaryPipeClassName #> implements PipeTransform {
  private SEPARATOR: string = ' ';
  transform(value: string): string {
    let integer = parseInt((value || '0').toString(), 10);
    return  integer.toString(2).replace(/\B(?=(\d{4})+(?!\d))/g, this.SEPARATOR);
  }
  parse(value: string): string {
    return  parseInt( ((value || '0').toString()).split(this.SEPARATOR).join(''), 10).toString(10);
  }
}

