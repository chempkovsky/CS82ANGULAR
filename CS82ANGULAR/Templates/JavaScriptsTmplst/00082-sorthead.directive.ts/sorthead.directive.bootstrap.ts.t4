<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    string sortheadDirectiveFolder          = "00082-sorthead.directive.ts";

    string sortheadDirectiveClassName       = GetDirectiveClassName(Model, sortheadDirectiveFolder);
    string sortheadDirectiveSelectorName    = GetDirectiveSelectorName(Model, sortheadDirectiveFolder);
    string sortheadDirectiveEventName       = GetDirectiveEventName(Model, sortheadDirectiveFolder);
#>

import { Component, Directive, EventEmitter, Input, Output } from "@angular/core";

export interface <#= sortheadDirectiveEventName #> {
  active: string;
  direction: string;
}

// export type SortDirection = 'asc' | 'desc' | '';
const rotate: {[key: string]: string} = { 'asc': 'desc', 'desc': '', '': 'asc' };

@Directive({
  selector: 'th[<#= sortheadDirectiveSelectorName #>]',
  host: {
    '[class.sortheadasc]': 'direction === "asc"',
    '[class.sortheaddesc]': 'direction === "desc"',
    '(click)': 'doRotate()'
  }
})
export class <#= sortheadDirectiveClassName #> {

  @Input('<#= sortheadDirectiveSelectorName #>') <#= sortheadDirectiveSelectorName #>: string = '';
  @Input('direction') direction: string = '';
  @Output('sort') sort = new EventEmitter<<#= sortheadDirectiveEventName #>>();

  doRotate() {
    this.direction = rotate[this.direction];
    this.sort.emit({active: this.<#= sortheadDirectiveSelectorName #>, direction: this.direction});
  }
}
