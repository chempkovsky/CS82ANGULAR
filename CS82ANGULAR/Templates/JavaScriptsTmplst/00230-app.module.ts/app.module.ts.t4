<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#
    string materialModuleFolder                     = "00010-app-material.module.ts";
    string materialModuleClassName                  = GetModuleClassName(Model, materialModuleFolder);
    string flexModuleFolder                         = "00011-app-flex-layout.module.ts";
    string flexModuleClassName                      = GetModuleClassName(Model, flexModuleFolder);


    string AppSettingServicePropName                = "appGlblSettings";
    string appSettingServiceFolder                  = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName               = GetServiceClassName(Model, appSettingServiceFolder);


    string appConfigServiceFolder                   = "00014-app-config.service.ts";
    string appConfigServiceClassName                = GetServiceClassName(Model, appConfigServiceFolder);


    string formatterModuleFolder                    = "00070-app-formatter.module.ts";
    string formatterModuleClassName                 = GetModuleClassName(Model, formatterModuleFolder);

    string appInterceptorFolder                     = "00200-app-glbl.interceptor.ts";
    string appInterceptorClassName                  = GetInterceptorClassName(Model, appInterceptorFolder);


    string appHtmlComponentFolder                   = "00210-app.component.html";
    string appCssComponentFolder                    = "00210-app.component.css";
    string appComponentFolder                       = "00210-app.component.ts";
    string appComponentClassName                    = GetComponentClassName(Model, appComponentFolder);

    string securityModuleFolder                     = "00170-app-glbl-security.module.ts";
    string securityModuleClassName                  = GetModuleClassName(Model, securityModuleFolder);

    string appRoutingModuleFolder                   = "00220-app-routing.module.ts";
    string appRoutingModuleClassName                = GetModuleClassName(Model, appRoutingModuleFolder);    
    string appModuleFolder                          = "00230-app.module.ts";
    string appModuleClassName                       = GetModuleClassName(Model, appModuleFolder);    

    string pagenotfoundComponentFolder              = "00185-app-glbl-pagenotfound.component.ts";
    string pagenotfoundComponentClassName           = GetComponentClassName(Model, pagenotfoundComponentFolder);

    string homeComponentFolder                      = "00180-app-glbl-home.component.ts";
    string homeComponentClassName                   = GetComponentClassName(Model, homeComponentFolder);

#>

import { BrowserModule } from '@angular/platform-browser';
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';


import { <#= appRoutingModuleClassName #> } from '<#= GetFolderName(Model, appRoutingModuleFolder, appModuleFolder)#>';
import { <#= appComponentClassName #> } from '<#= GetFolderName(Model, appComponentFolder, appModuleFolder)#>';
import { <#= materialModuleClassName #> } from '<#= GetFolderName(Model, materialModuleFolder, appModuleFolder)#>';
import { <#= flexModuleClassName #> } from '<#= GetFolderName(Model, flexModuleFolder, appModuleFolder)#>';
import { <#= appInterceptorClassName #> } from '<#= GetFolderName(Model, appInterceptorFolder, appModuleFolder)#>';
import { <#= appConfigServiceClassName #> } from '<#= GetFolderName(Model, appConfigServiceFolder, appModuleFolder)#>';

import { <#= formatterModuleClassName #> } from '<#= GetFolderName(Model, formatterModuleFolder, appModuleFolder)#>';
<#
    if(! string.IsNullOrEmpty(homeComponentClassName)) {
#>
import { <#= homeComponentClassName #> } from '<#= GetFolderName(Model, homeComponentFolder, appModuleFolder)#>';
<#
    }
    if(! string.IsNullOrEmpty(pagenotfoundComponentClassName)) {
#>
import { <#= pagenotfoundComponentClassName #> } from '<#= GetFolderName(Model, pagenotfoundComponentFolder, appModuleFolder)#>';
<#
    }
#>

const appInitializerFn = (appConfig: <#= appConfigServiceClassName #>) => {
  return () => {
      return appConfig.loadAppConfig();
  }
};


@NgModule({
  declarations: [
    <#= appComponentClassName #>,
<#
    if(! string.IsNullOrEmpty(homeComponentClassName)) {
#>
    <#= homeComponentClassName #>, 
<#
    }
    if(! string.IsNullOrEmpty(pagenotfoundComponentClassName)) {
#>
    <#= pagenotfoundComponentClassName #>, 
<#
    }
#>

  ],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    <#= appRoutingModuleClassName #>,
    <#= materialModuleClassName #>,
    <#= formatterModuleClassName #>,
    <#= flexModuleClassName #>,
    HttpClientModule,
  ],
  entryComponents: [
  ],
  exports: [
  ],
  providers: [
    {
      provide: HTTP_INTERCEPTORS,
      useClass: <#= appInterceptorClassName #>,
      multi: true
    },
    <#= appConfigServiceClassName #>,
    {
        provide: APP_INITIALIZER,
        useFactory: appInitializerFn,
        multi: true,
        deps: [<#= appConfigServiceClassName #>]
    }        
  ],
  bootstrap: [<#= appComponentClassName #>]
})
export class <#= appModuleClassName #> { }

