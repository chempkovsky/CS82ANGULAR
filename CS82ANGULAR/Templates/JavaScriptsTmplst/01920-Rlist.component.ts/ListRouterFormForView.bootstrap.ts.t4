<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#
    bool localize = Context.Localize;

    string HiddenFilterPrefix           = "hf";
    string IdPrefix                     = "id";
    string ItemParamName                = "item";  
    string VPrefix                      = "View";
    string APrefix                      = "Add";
    string UPrefix                      = "Upd";
    string DPrefix                      = "Del";
    string DepthParamName               = "depth"; 
    string HiddenFilterAsFltRsltSuffix  = "HiddenFilterAsFltRslt";
    string HiddenFilterByRowSuffix      = "HiddenFilterByRow";
    string uidParamName                 = "uid"; 
    string routeFilterMaxHeightPropName = "fh";

    string NavPrefix                    = "np";
    string OutletNmPropName             = "outletNm";
    string IsDetailPropName             = "isdtl";
    string routeShowFilterPropName      = "sf";
    string routeDepthParamName          = "dp"; 
    string routeMaxHeightPropName       = "mh";
    string routeOutletNmPropName        = "oltn";

    string getStorageItemMethodName     = "getStorageItem";
    string setStorageItemMethodName     = "setStorageItem";
    string getStorageLengthMethodName   = "getStorageLength";
    string removeStorageItemMethodName  = "removeStorageItem";
    string getStorageKeyMethodName      = "getStorageKey";
    string clearStorageMethodName       = "getStorageKey";

    string GetOneMethodName             = "getone";
    string DeleteOneMethodName          = "deleteone";


    string ActionParamName              = "mode";  
    string ActionParamAddMode           = "add";
    string ActionParamUpdateMode        = "update";
    string ActionParamDeleteMode        = "delete";
    string ActionParamDeleteSelMode     = "deletesel";
    string ActionParamNavM2mNotAllwd    = "nvm2mntallwd";
    string ActionParamViewMode          = "view";
    string ViewNameParamName            = "view";
    string NavigationParamName          = "nav";
    string NavigationAddOnName          = "addon";
    string permissionPropName           = "permission";
    string accessDeniedPropName         = "accessdenied";

    // WebApi service's method names

    string CanAddSelector           = "can-add";
    string CanAddPropName           = "canAdd";
    string CanUpdSelector           = "can-update";
    string CanUpdPropName           = "canUpdate";
    string CanDelSelector           = "can-delete";
    string CanDelPropName           = "canDelete";
    string HiddenFilterSelector     = "hidden-filter";
    string HiddenFilterPropName     = "hiddenFilter";
    string ShowFilterSelector       = "show-filter";
    string ShowFilterPropName       = "showFilter";
    string applyFilterSelector      = "apply-filter";
    string applyFilterPropName      = "applyFilter";
    string ShowErrorMethodName      = "showError";


    string AppSettingServicePropName    = "appGlblSettings";
    string formRootService              = "frmRootSrv";
    string formServicePrefix            = "frmSrv";

    
    string RowCommandsSelector          = "row-commands";
    string RowCommandsPropName          = "rowCommands";
    string TableCommandsSelector        = "table-commands";
    string TableCommandsPropName        = "tableCommands";

    string OnRowCommandSelector         = "on-row-command";
    string OnRowCommandPropName         = "onRowCommand";
    string OnTableCommandSelector       = "on-table-command";
    string OnTableCommandPropName       = "onTableCommand";

    string externalFilterSelector               = "external-filter";
    string externalFilterPropName               = "externalFilter";
    string beforeSquerySelector                 = "before-squery";
    string beforeSqueryPropName                 = "beforeSquery";
    string OnBeforeSqueryMethodName             = "onBeforeSquery";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";

    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";
    string frasesPropName               = "frases";

    string rlistCssFolder                       = "01920-Rlist.component.css";
    string rlistHtmlFolder                      = "01920-Rlist.component.html";
    string rlistComponentFolder                 = "01920-Rlist.component.ts";
    string componentClassName                   = GetComponentClassName(Model, rlistComponentFolder);
    string componentSelectorCommonPart          = GetComponentSelectorCommonPart(Model, rlistComponentFolder);

    string appSettingServiceFolder              = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName           = GetCommonServiceClassNameWithAnglr(AngularJsonFile, Model, Context, appSettingServiceFolder, rlistComponentFolder);

    string eventEmitterDataModelFolder          = "00018-event-emitter-data.interface.ts";
    string eventEmitterDataModelClassName       = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterDataModelFolder, rlistComponentFolder);

    string menuItemDataModelFolder              = "00017-menu-item-data.interface.ts";
    string menuItemDataModelClassName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, menuItemDataModelFolder, rlistComponentFolder);

    string eventEmitterPubModelFolder           = "00019-event-emitter-pub.interface.ts";
    string eventEmitterPubModelClassName        = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, rlistComponentFolder);

    string filterResultModelFolder              = "00024-web-service-filter-rslt.interface.ts";
    string filterResultModelClassName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, filterResultModelFolder, rlistComponentFolder);

    string itemHeightDataModelFolder            = "00016-item-height-data.interface.ts";
    string itemHeightDataModelClassName         = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, itemHeightDataModelFolder, rlistComponentFolder);

    string messageDialogInterfaceFolder         = "00037-message-dialog.interface.ts";
    string messageDialogInterfaceName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, messageDialogInterfaceFolder, rlistComponentFolder);

    string messageDialogComponentFolder         = "00038-message-dialog.component.ts";
    string messageDialogComponentClassName      = GetContextComponentClassNameWithAnglr(AngularJsonFile, Model, Context, messageDialogComponentFolder, rlistComponentFolder);

    string viewInterfaceFolder                  = "01100-.interface.ts";
    string viewInterfaceName                    = GetInterfaceNameWithAnglr(AngularJsonFile, Model, viewInterfaceFolder, rlistComponentFolder);

    string viewServiceFolder                    = "01400-.service.ts";
    string serviceClassName                     = GetServiceClassNameWithAnglr(AngularJsonFile, Model, viewServiceFolder, rlistComponentFolder);

    string sformComponentFolder                 = "01420-Sform.component.ts";
    string searchComponentClassName             = GetComponentClassNameWithAnglr(AngularJsonFile, Model, sformComponentFolder, rlistComponentFolder);




    string ActionColumnDefProperty      = "menuAction";
    string SelectColumnDefProperty      = "selectAction";
    string DisplayedColumnsProperty     = "displayedColumns";
    string MatPaginatorPageSize         = "10";
    string MatPaginatorPageSizeOptions  = "[10, 25, 50, 100]";



    List<ModelViewPropertyOfVwSerializable> primKeys= GetModelPrimaryKeyProps(Model);
    List<string> detailViewNames =  GetDetailViews(Model, Context, null);
    List<string> detailViewNamesToExclude = new List<string>();
    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>> tmpSearchSchema = null;
    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> searchSchemas =
        GetSearchResources(Model, Context);

    string OnBackBtnMethodName          = "onBackBtnMd";
    string OnBackBtnPropName            = "onBackBtn";
    string OnBackBtnSelector            = "on-back-btn";
    string showBackBtnPropName          = "showBackBtn";
    string showBackBtnSelector          = "show-back-btn";
    string captionPropName              = "caption";
    string captionSelector              = "caption";

    string currentRowPropName           = "currentRow";
    string OnSelectRowMethodName        = "onSelectRow";
    string showMultiSelectPropName      = "showMultiSelect";
    string showMultiSelectedRowSelector = "show-multi-selected-row";
    string showMultiSelectedRowPropName = "showMultiSelectedRow";
    string multiSelectedRowSelector     = "multi-selected-row";
    string multiSelectedRowPropName     = "multiSelectedRow";
    string onMultiSelectedRowPropName   = "onMultiSelectedRow";
    string currentMultiRowPropName      = "currentMultiRow";
    string LOutletNamePrefix            = "loltnm"; //
    string OnDetailChangedMethodName    = "onDetailChanged";
    string ToDetailMethodName           = "toDetail";
    string SelectedDetailPropName       = "selectedDetail";
    string DetailViewsPropName          = "detailViews";
    string ShowDetailsPropName          = "showDetails";
    string AppearancePropName           = "appearance";
    string selectedRowSelector          = "selected-row";
    string selectedRowPropName          = "selectedRow";

    string OutletNameValue = LOutletNamePrefix + Model.ViewName;

#>
import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { ActivatedRoute, Router, ParamMap, UrlSegment, ActivatedRouteSnapshot, NavigationStart } from '@angular/router';

import { NgbModal } from '@ng-bootstrap/ng-bootstrap';

import { firstValueFrom, takeWhile } from 'rxjs';

import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  appSettingServiceFolder, rlistComponentFolder)#>';
import { <#= filterResultModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  filterResultModelFolder, rlistComponentFolder) #>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  eventEmitterDataModelFolder, rlistComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  menuItemDataModelFolder, rlistComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, rlistComponentFolder)#>';
import { <#= itemHeightDataModelClassName #> } from '<#= GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context, itemHeightDataModelFolder, rlistComponentFolder)#>';
import { <#= messageDialogInterfaceName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  messageDialogInterfaceFolder, rlistComponentFolder)#>';
import { <#= messageDialogComponentClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  messageDialogComponentFolder, rlistComponentFolder)#>';

import { <#= viewInterfaceName #> } from '<#=  GetFolderNameWithAnglr(AngularJsonFile, Model, viewInterfaceFolder, rlistComponentFolder) #>';
import { <#= serviceClassName #> } from '<#=  GetFolderNameWithAnglr(AngularJsonFile, Model, viewServiceFolder, rlistComponentFolder) #>';
import { <#= searchComponentClassName #> } from '<#=  GetFolderNameWithAnglr(AngularJsonFile, Model, sformComponentFolder, rlistComponentFolder) #>';

<#
        if(searchSchemas!= null) {
            List<ModelViewSerializable> mdls = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                if(mdls.Any(p => p == m2mModel)) continue;
                mdls.Add(m2mModel);
#>
import { <#=  GetServiceClassNameExWithAnglrEx(AngularJsonFile, Context, m2mModel.ViewName, viewServiceFolder, Model, rlistComponentFolder) #> } from '<#= GetCrossComponentFolderNameWithAnglr(AngularJsonFile, Model, rlistComponentFolder, Context, m2mModel.ViewName, viewServiceFolder) #>';
<#
            }
        }
#>

@Component({
  selector: 'app-<#= componentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, rlistHtmlFolder, rlistComponentFolder)#>.html',
  styleUrls: ['<#=  GetFolderName(Model, rlistCssFolder, rlistComponentFolder)#>.css']
})
export class <#= componentClassName #> implements OnInit, OnDestroy, <#= eventEmitterPubModelClassName #>, <#= itemHeightDataModelClassName #> {
<# 
    if(localize) {
#>
    <#= frasesPropName #>: {[key:string]: string}  = {
        'Hide-details': $localize`:Hide details@@<#= componentClassName #>.Hide-details:Hide details`,
        '<#= ActionParamNavM2mNotAllwd #>':  $localize`:Navigating to detail form is not allowed in One-to-Many mode@@<#= componentClassName #>.<#= ActionParamNavM2mNotAllwd #>:Navigating to detail form is not allowed in One-to-Many mode`,
        '<#= captionPropName #>': $localize`:<#= Model.PluralTitle #>@@<#= componentClassName #>.<#= captionPropName #>:<#= Model.PluralTitle #>`,
        '<#= ActionParamUpdateMode #>': $localize`:Modify Item@@<#= componentClassName #>.<#= ActionParamUpdateMode #>:Modify Item`,
        '<#= ActionParamDeleteMode #>': $localize`:Delete Item@@<#= componentClassName #>.<#= ActionParamDeleteMode #>:Delete Item`,
        '<#= ActionParamViewMode #>': $localize`:View Item@@<#= componentClassName #>.<#= ActionParamViewMode #>:View Item`,
        '<#= ActionParamAddMode #>': $localize`:Add Item@@<#= componentClassName #>.<#= ActionParamAddMode #>:Add Item`,
        '<#= ActionParamDeleteSelMode #>': $localize`:Delete Selected@@<#= componentClassName #>.<#= ActionParamDeleteSelMode #>:Delete Selected`,
        '<#= permissionPropName #>': $localize`:Permission@@<#= componentClassName #>.<#= permissionPropName #>:Permission`,
        '<#= accessDeniedPropName #>': $localize`:Access denied@@<#= componentClassName #>.<#= accessDeniedPropName #>:Access denied`,
<#
        foreach(string detailViewName in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
            ModelViewSerializable detailView = GetViewByName(Context, detailViewName);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
#>
        '<#= viewToNavigate.ViewName +"__"+ detailView.ViewName #>': $localize`:<#= viewToNavigate.PluralTitle #>(<#= detailView.Title #>)@@<#= componentClassName #>.<#= viewToNavigate.ViewName + detailView.ViewName #>:<#= viewToNavigate.PluralTitle #>(<#= detailView.Title #>)`,
<#
                        continue;
                    }
                }

#>
        '<#= detailView.ViewName + foreignKey.NavigationName #>': $localize`:<#= detailView.PluralTitle #>(<#= foreignKey.NavigationName #>)@@<#= componentClassName #>.<#=detailView.ViewName + foreignKey.NavigationName #>:<#= detailView.PluralTitle #>(<#= foreignKey.NavigationName #>)`,
<#
            }
        }
#>

    };
<# 
    } else {
#>
    <#= frasesPropName #>: {[key:string]: string}  = {
        'Hide-details': 'Hide details',
        '<#= ActionParamNavM2mNotAllwd #>':  'Navigating to detail form is not allowed in One-to-Many mode',
        '<#= captionPropName #>': '<#= Model.PluralTitle #>',
        '<#= ActionParamUpdateMode #>': 'Modify Item',
        '<#= ActionParamDeleteMode #>': 'Delete Item',
        '<#= ActionParamViewMode #>': 'View Item',
        '<#= ActionParamAddMode #>': 'Add Item',
        '<#= ActionParamDeleteSelMode #>': 'Delete Selected',
        '<#= permissionPropName #>': 'Permission',
        '<#= accessDeniedPropName #>': 'Access denied',
<#
        foreach(string detailViewName in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
            ModelViewSerializable detailView = GetViewByName(Context, detailViewName);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }

            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
#>
        '<#= viewToNavigate.ViewName +"__"+ detailView.ViewName #>': '<#= viewToNavigate.PluralTitle #>(<#= detailView.Title #>)',
<#
                        continue;
                    }
                }
#>
        '<#= detailView.ViewName + foreignKey.NavigationName #>': '<#= detailView.PluralTitle #>(<#= foreignKey.NavigationName #>)',
<#
            }
        }
#>
    };
<# 
    } 
#>



    public <#= ShowDetailsPropName #>: boolean = false;
    @Input('<#= showMultiSelectedRowSelector #>') <#= showMultiSelectedRowPropName #>: boolean = true;

    @Output('<#= multiSelectedRowSelector #>') <#= multiSelectedRowPropName #>: EventEmitter<Array<<#= viewInterfaceName #>>> = new EventEmitter<Array<<#= viewInterfaceName #>>>();
    <#= onMultiSelectedRowPropName #>(e: Array<<#= viewInterfaceName #>>): void {
        this.<#= multiSelectedRowPropName #>.emit(e);
    }


    @Input('<#= captionSelector #>') <#= captionPropName #>: string = this.<#= frasesPropName #>['<#= captionPropName #>'];
    <#= NavPrefix #>: string|any = '';
    <#= OutletNmPropName #> : string = 'primary';

    isPostNavApplied: boolean = false;
    isOnInitCalled: boolean = false;
    <#= DepthParamName #>: number = 1;
    <#= HiddenFilterPrefix #>: string = '<#= HiddenFilterPrefix + "1" #>';
    <#= uidParamName #>: string|null = null;
    <#= showBackBtnPropName #>: boolean = false;
    @Input('<#= FilterMaxHeightPropSelector #>')  <#= FilterMaxHeightPropName #>: number | null = null;
    @Input('<#= MaxHeightPropSelector #>') <#= MaxHeightPropName #>: number | null = null;
    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(e: <#= eventEmitterDataModelClassName #>)  {
        this.<#= onContainerMenuItemClickEmitter #>.emit(e);
    }
    @Input('<#= ShowFilterSelector #>') <#= ShowFilterPropName #>: boolean = true;
    protected _<#= HiddenFilterPropName #>: Array<<#= filterResultModelClassName #>> = [];
    @Input('<#= HiddenFilterSelector #>') 
        get <#= HiddenFilterPropName #>(): Array<<#= filterResultModelClassName #>> {
            return this._<#= HiddenFilterPropName #>;
        }
        set <#= HiddenFilterPropName #>(v :Array<<#= filterResultModelClassName #>>) {
            if (typeof v === 'undefined') {
                this._<#= HiddenFilterPropName #> = [];
            } else if (!Array.isArray(v)) {
                this._<#= HiddenFilterPropName #> = [];
            } else {
                this._<#= HiddenFilterPropName #> =  v;
            }
            if(this.isOnInitCalled) {
                this.cd.detectChanges();
            }
        }
    rowMenuItemsData: Array<<#= menuItemDataModelClassName #>> = [
         {id: '<#= ActionParamUpdateMode #>', caption: this.<#= frasesPropName #>['<#= ActionParamUpdateMode #>'], iconName: 'edit', iconColor: 'primary', enabled: true},
         {id: '<#= ActionParamDeleteMode #>', caption: this.<#= frasesPropName #>['<#= ActionParamDeleteMode #>'], iconName: 'delete_forever', iconColor: 'warn', enabled: true},
         {id: '<#= ActionParamViewMode #>',   caption: this.<#= frasesPropName #>['<#= ActionParamViewMode #>'], iconName: 'preview', iconColor: 'primary', enabled: true},
      ];
    tableMenuItemsData: Array<<#= menuItemDataModelClassName #>> = [
         {id: '<#= ActionParamAddMode #>', caption: this.<#= frasesPropName #>['<#= ActionParamAddMode #>'], iconName: 'create', iconColor: 'primary', enabled: true},
         {id: '<#= ActionParamDeleteSelMode #>', caption: this.<#= frasesPropName #>['<#= ActionParamDeleteSelMode #>'], iconName: 'delete_forever', iconColor: 'warn', enabled: true},
      ];
    constructor(protected route: ActivatedRoute, protected router: Router, protected  <#= formRootService #>: <#= serviceClassName #>, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, 
<#
        if(searchSchemas!= null) {
            List<ModelViewSerializable> smds = new List<ModelViewSerializable>();
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
#>
                public  <#= formServicePrefix + m2mModel.ViewName #>: <#= GetServiceClassNameExWithAnglrEx(AngularJsonFile, Context, m2mModel.ViewName, viewServiceFolder, Model, rlistComponentFolder) #>,
<#
            }
        } // if(searchSchemas!= null) {...}
#>    
        public dialog: NgbModal, 
        protected cd: ChangeDetectorRef) {
    }
    permMask: number = 0;
    extfltrOn: boolean = false;
    <#= IsDetailPropName #>: boolean = false;
    currPath: string = '';
    isNtDstrd: boolean = true;
    ngOnDestroy(): void {
        this.isNtDstrd = false;
    }
    ngOnInit() {
        this.router.events.pipe(
            takeWhile(v => this.isNtDstrd)
        ).subscribe(event =>{
            if (event instanceof NavigationStart){
                if(!event.url.includes(this.currPath)) {
                    if(this.uid) this.<#= AppSettingServicePropName #>.<#= removeStorageItemMethodName #>(this.<#= uidParamName #> as string);
                }
            }
        });
        this.currPath = this.router.url;
        let luid = '<#= componentClassName #>';
        this.permMask = this.<#= AppSettingServicePropName #>.getViewModelMask('<#= Model.ViewName #>');
        this.isPostNavApplied = false;
        if (!(typeof this.route.snapshot.data === 'undefined')) {
            if (!(this.route.snapshot.data === null)) {
                if (!(typeof this.route.snapshot.data['<#= routeShowFilterPropName #>'] === 'undefined')) {
                    this.<#= ShowFilterPropName #> = this.route.snapshot.data['<#= routeShowFilterPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= routeMaxHeightPropName #>'] === 'undefined')) {
                    this.<#= MaxHeightPropName #> = this.route.snapshot.data['<#= routeMaxHeightPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= routeFilterMaxHeightPropName #>'] === 'undefined')) {
                    this.<#= FilterMaxHeightPropName #> = this.route.snapshot.data['<#= routeFilterMaxHeightPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= HiddenFilterPrefix #>'] === 'undefined')) {
                    this.<#= HiddenFilterPrefix #> = this.route.snapshot.data['<#= HiddenFilterPrefix #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= routeDepthParamName #>'] === 'undefined')) {
                    this.<#= DepthParamName #> = this.route.snapshot.data['<#= routeDepthParamName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= uidParamName #>'] === 'undefined')) {
                    luid = this.route.snapshot.data['<#= uidParamName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= NavPrefix #>'] === 'undefined')) {
                    this.<#= NavPrefix #> = this.route.snapshot.data['<#= NavPrefix #>'];
                }
/*
                if (!(typeof this.route.snapshot.data['<#= routeOutletNmPropName #>'] === 'undefined')) {
                    this.<#= OutletNmPropName #> = this.route.snapshot.data['<#= routeOutletNmPropName #>'];
                }
*/
                if (!(typeof this.route.snapshot.data['<#= IsDetailPropName #>'] === 'undefined')) {
                    this.<#= IsDetailPropName #> = this.route.snapshot.data['<#= IsDetailPropName #>'];
                }
                if (!(typeof this.route.snapshot.data['<#= showMultiSelectPropName #>'] === 'undefined')) {
                    this.<#= showMultiSelectedRowPropName #> = this.route.snapshot.data['<#= showMultiSelectPropName #>'];
                }
            }
        }
        luid = luid + ':' +this.<#= DepthParamName #>;
        if(this.<#= DepthParamName #> > 1) {
          this.route.paramMap.subscribe(prms => {
            let lhf: Array<<#= filterResultModelClassName #>> = [];
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                let phf: {[key: string]: {[key: string]: {[key: string]: any}}} | any =  JSON.parse(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
                lhf = this.<#= formRootService #>.get<#= HiddenFilterAsFltRsltSuffix #>(phf);
<#
    if (searchSchemas != null) {
        if(searchSchemas.Count > 0) {
            foreach(var sch in searchSchemas) {
                ModelViewSerializable m2mModel = sch.Item1;
                if(sch.Item5 == null) continue;
                if(sch.Item5.Count != 1) continue;
                if(sch.Item4 != null) continue;
                
#>
                if(lhf.length === 0) {
                    lhf = lhf.concat(this.<#= formServicePrefix + m2mModel.ViewName #>.get<#= HiddenFilterAsFltRsltSuffix #>(phf));
                    this.extfltrOn = this.extfltrOn || (lhf.length > 0);
                }
<#
            }
        }
    }
#>
            }
            if(Array.isArray(lhf)) {
                lhf.forEach((v:{fltrName: string, fltrValue: any}) => {
                    luid = luid + ':' + v.fltrName + ':' + v.fltrValue
                });
            }
            this.<#= HiddenFilterPropName #> = lhf;
            this.<#= showBackBtnPropName #> = !this.<#= IsDetailPropName #>;
          });
        } else {
            this.<#= showBackBtnPropName #> = false;
        }
        this.<#= uidParamName #> = luid;
        let si: string|any = this.<#= AppSettingServicePropName #>.<#= getStorageItemMethodName #>(this.<#= uidParamName #>);
        if(!(typeof si === 'undefined')) {
            if(!(si === null)) {
                this.<#= externalFilterPropName #> = si;
            }
        }
        
        this.tableMenuItemsData[0].enabled = ((this.permMask & 8) === 8) && (!this.extfltrOn) <# if (!Model.IsWebApiAdd) { #> && false <# } #>;
        this.tableMenuItemsData[1].enabled = ((this.permMask & 2) === 2) && (!this.extfltrOn) <# if (!Model.IsWebApiDelete) { #> && false <# } #>;

        this.rowMenuItemsData[0].enabled = this.rowMenuItemsData[0].enabled && (!this.extfltrOn) && ((this.permMask & 4) === 4) <# if (!Model.IsWebApiUpdate) { #> && false <# } #>; // modify
        this.rowMenuItemsData[1].enabled = this.rowMenuItemsData[1].enabled && (!this.extfltrOn) && ((this.permMask & 2) === 2) <# if (!Model.IsWebApiDelete) { #> && false <# } #>; // delete
        this.rowMenuItemsData[2].enabled = this.rowMenuItemsData[2].enabled && (!this.extfltrOn) <# if (!Model.IsWebApiSelectOneByPrimarykey) { #> && false <# } #>; // view
<#
    {
        if (detailViewNames.Count > 0) {
#>
        if(!this.<#= IsDetailPropName #>) {
            let msk: number = 0;
<#
        }
        int id = 1;
        foreach(string detailViewName in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailViewName)) continue;
            ModelViewSerializable detailView = GetViewByName(Context, detailViewName);
            if(detailView == null) continue;
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            if (foreignKeys == null) continue;
            if (foreignKeys.Count < 1) continue;
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }

            {
                foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                    if(isM2m) {
                        // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                        tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                        if (tmpSearchSchema != null) {
                            int  cnt = 0;
                            if(tmpSearchSchema.Item5 == null) continue;
                            if(tmpSearchSchema.Item5.Count != 1) continue;
                            if(tmpSearchSchema.Item4 != null) continue;
                            if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                            ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
#>
            msk = this.<#= AppSettingServicePropName #>.getViewModelMask('<#= viewToNavigate.ViewName #>');
            if((msk & 1) === 1) {
                this.rowMenuItemsData.push(
                 { id: '<#= id #>', caption: this.<#= frasesPropName #>['<#= viewToNavigate.ViewName +"__"+ detailView.ViewName #>'], iconName: 'arrow_forward', iconColor: 'primary', enabled: true, 
                    data: {
                        <#= ViewNameParamName #>: '<#= viewToNavigate.ViewName #>',
                        <#= NavigationParamName #>: '<#= foreignKey.NavigationName #>',
                        <#= NavigationAddOnName #>: '<#= detailView.ViewName #>'
                    }
                 }
                );
            }

<#
                            id++;
                            continue;
                        }
                    }
#>
            msk = this.<#= AppSettingServicePropName #>.getViewModelMask('<#= detailViewName #>');
            if((msk & 1) === 1) {
                this.rowMenuItemsData.push(
                 { id: '<#= id #>', caption: this.<#= frasesPropName #>['<#=detailView.ViewName + foreignKey.NavigationName #>'], iconName: 'arrow_forward', iconColor: 'primary', enabled: true, 
                    data: {
                        <#= ViewNameParamName #>: '<#= detailViewName #>',
                        <#= NavigationParamName #>: '<#= foreignKey.NavigationName #>',
                    }
                 }
                );
            }
<#
                    id++;
                }
            }
        }
        if (detailViewNames.Count > 0) {
#>
        }
<#
        }
    }
    if(detailViewNames.Count > 0) {
#>
        this.<#= SelectedDetailPropName #> = this.<#= DetailViewsPropName #>[0];
        this.<#= ShowDetailsPropName #> = !this.<#= IsDetailPropName #>;
<#
    }
#>
        this.isOnInitCalled = true;
    }
    @Output('on-row-command') onRowCommand: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Output('on-table-command') onTableCommand: EventEmitter<<#= eventEmitterDataModelClassName #>> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Output('<#= selectedRowSelector #>') <#= selectedRowPropName #>: EventEmitter<<#= viewInterfaceName #>> = new EventEmitter<<#= viewInterfaceName #>>();
    <#= OnSelectRowMethodName #>(e: <#= viewInterfaceName #>|any) {
        this.<#= ToDetailMethodName #>();
        this.<#= selectedRowPropName #>.emit(e);
    }
    @ViewChild(<#= GetComponentClassName(Model, sformComponentFolder) #>) childForm!: <#= GetComponentClassName(Model, sformComponentFolder) #>;
    public <#= SelectedDetailPropName #>: {caption: string, vw: string|null, nv: string|null, addon: string|null}|null = null;
    public <#= DetailViewsPropName #>: Array<{caption: string, vw: string|null, nv: string|null, addon: string|null}> = [
        {caption:this.<#= frasesPropName #>['Hide-details'], vw:null, nv:null, addon: null},
<#
    {
        foreach(string detailVwnm in detailViewNames) {
            if(detailViewNamesToExclude.Any(s => s == detailVwnm)) continue;
            ModelViewSerializable detailView = GetViewByName(Context, detailVwnm);
            List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(Model, detailView, null);
            bool isM2m = false;
            if(IsTableMatchesIndex(detailView)) {
                if(AllPrimKeyPropsAreForeignKeysProps(detailView)) {
                    if(ForeignKeysOrderedInsidePrimKey(detailView)) {
                        isM2m = true;
                    }
                }
            }
            foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                if(isM2m) {
                    // m2mMdl, m2mFk, searchFks, otherFks, externalFks
                    tmpSearchSchema = DetailViewAsM2mMdl(detailView, Context);
                    if (tmpSearchSchema != null) {
                        int  cnt = 0;
                        if(tmpSearchSchema.Item5 == null) continue;
                        if(tmpSearchSchema.Item5.Count != 1) continue;
                        if(tmpSearchSchema.Item4 != null) continue;
                        if(tmpSearchSchema.Item5[0].Key != foreignKey) continue;
                        ModelViewSerializable viewToNavigate = GetViewByName(Context, tmpSearchSchema.Item2.ViewName);
#>
        {caption: this.<#= frasesPropName #>['<#= viewToNavigate.ViewName +"__"+ detailView.ViewName #>'], vw: '<#= viewToNavigate.ViewName #>', nv: '<#= foreignKey.NavigationName #>', addon: '<#= detailView.ViewName #>'},
<#
                        continue;
                    }
                }

#>
        {caption: this.<#= frasesPropName #>['<#= detailView.ViewName + foreignKey.NavigationName #>'], vw: '<#= detailVwnm #>', nv: '<#= foreignKey.NavigationName #>', addon: '<#= detailVwnm #>'},
<#
            }
            
        }
    }
#>
    ];
    public <#= OnDetailChangedMethodName #>(e: any) {
        this.<#= ToDetailMethodName #>();
    }
    public <#= ToDetailMethodName #>() {
        if(!this.<#= ShowDetailsPropName #>) return;
        let isNtDef: boolean = (this.<#= SelectedDetailPropName #> === null) || (typeof this.childForm.<#= currentRowPropName #> === 'undefined');
        isNtDef = isNtDef ? isNtDef : ((this.<#= SelectedDetailPropName #>!.vw === null) || (this.<#= SelectedDetailPropName #>!.nv === null) || (this.childForm.<#= currentRowPropName #> === null));
/*
        if(isNtDef) {
            this.router.navigate([{outlets: { '<#=  OutletNameValue #>': null}}], {relativeTo: this.route}).then(()=>{
                this.router.navigate([{outlets: { '<#=  OutletNameValue #>': null}}], {relativeTo: this.route});
            });
        } else {
            this.router.navigate([{outlets: { '<#=  OutletNameValue #>': null}}], {relativeTo: this.route}).then(
                () => {
                    let qp: string[] = [];
                    qp.push( '<#= OutletNameValue +"2" #>' + this.<#= SelectedDetailPropName #>!.vw );
                    qp.push(JSON.stringify(this.<#= formRootService #>.get<#= HiddenFilterByRowSuffix #>(this.childForm.<#= currentRowPropName #>, this.<#= SelectedDetailPropName #>!.nv)));
                    this.router.navigate([{ outlets: { '<#=  OutletNameValue #>' : qp } }], {relativeTo: this.route});
                }
            );
        }
*/
        // for the named router-outlet uncomment the lines above and comment the lines below. Do not forget about html-file.
        if(isNtDef) {
            this.router.navigate(['./'], {relativeTo: this.route});
        } else {
            let qp: string[] = [];
            qp.push( '<#= OutletNameValue +"2" #>' + this.<#= SelectedDetailPropName #>!.vw );
            qp.push(JSON.stringify(this.<#= formRootService #>.get<#= HiddenFilterByRowSuffix #>(this.childForm.<#= currentRowPropName #>, this.<#= SelectedDetailPropName #>!.nv)));
            this.router.navigate(qp, {relativeTo: this.route});
        }

    }

    onDeleteMultiple(sender: <#= searchComponentClassName #>) {
<#
    if(Model.IsWebApiDelete) {
#>
        let locdata: <#=  messageDialogInterfaceName #> = {
            title: this.<#= frasesPropName #>['<#= ActionParamDeleteMode #>'],
            message: this.<#= frasesPropName #>['<#= ActionParamDeleteSelMode #>'] + ' ?',
            iconname: 'warning',
            iconcolor: 'warn'
        };
        let dialogRef = this.dialog.open(<#=  messageDialogComponentClassName #>);
//        , {
//              data: locdata,
//            });
        dialogRef.componentInstance.data = locdata;
        dialogRef.result.then(async rslt => {
            if (typeof rslt === 'undefined') return;
            if (rslt === null) return;
            let currRowsCp: Array<<#= viewInterfaceName #>> = sender.<#= currentMultiRowPropName #>.slice();
            let deletedRows: Array<<#= viewInterfaceName #>> = [];
            for(let row of currRowsCp) {
                try {
                    // let data: <#= viewInterfaceName #>  =  
                    await firstValueFrom<<#= viewInterfaceName #>>(this.<#= formRootService #>.<#= DeleteOneMethodName #>(<# 
                    {
                        int counter = 0;
                        //List<ModelViewPropertyOfVwSerializable> primKeys = GetPrimaryKeyProps(Context, Model.ViewName);
                        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
                            if(counter > 0) { #>, <#} #>  row.<#= GetTypeScriptPropertyName(prop, Model) #> <#
                            counter++;
                        }
                    }#>));
                    deletedRows.push(row);
                } catch (error) {
                    this.appGlblSettings.showError('http', error)
                }
            }
            sender.deselectRows(deletedRows);
            deletedRows.forEach((r: <#= viewInterfaceName #>) => {
                let i: number = sender.dataSource.indexOf(r); 
                if(i > -1) sender.dataSource.splice(i, 1);
            });
            sender.dataSource = sender.dataSource.slice(0);
            if ((deletedRows.indexOf( sender.<#= currentRowPropName #>  as <#= viewInterfaceName #>) > -1) && (sender.dataSource.length > 0)) sender.<#= OnSelectRowMethodName #>(sender.dataSource[0]);
        });
<#
    }
#>
    }

    rowCommand(v: <#= eventEmitterDataModelClassName #>) {
        let id = this.rowMenuItemsData.findIndex(e => { return e.id === v.id; });
        if(id < 0) return;
        if (!(this.rowMenuItemsData[id].enabled)) {
            this.<#= AppSettingServicePropName #>.showError(this.<#= frasesPropName #>['<#= permissionPropName #>'], this.<#= frasesPropName #>['<#= accessDeniedPropName #>']);
            return;
        }
        let qp: string[] = [];
<#
        if(primKeys != null) {
#>      
        let flt: any = {
<#
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { 
#>      
          <#= GetTypeScriptPropertyName(primKey, Model) #>: v.value.<#= GetTypeScriptPropertyName(primKey, Model) #>,
<#
            }
#>
        };
<#
        } else {
#>
        let flt: any = v.value;
<#
        }
#>
        if(v.id === '<#= ActionParamViewMode #>') {
            qp.push( '<#= VPrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            qp.push(JSON.stringify(flt));
        } else if(v.id === '<#= ActionParamUpdateMode #>') {
            qp.push( '<#= UPrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            qp.push(JSON.stringify(flt));
        } else if(v.id === '<#= ActionParamDeleteMode #>') {
            qp.push( '<#= DPrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }
            qp.push(JSON.stringify(flt));
        } else {
            let id = this.rowMenuItemsData.findIndex(e => { return e.id === v.id; })
            if(id < 0) return;
            let mnItm: IMenuItemData = this.rowMenuItemsData[id];
            if (!(typeof mnItm.data === 'undefined')) {
                if(this.<#= OutletNmPropName #> === 'primary') {
                    qp.push( this.<#= NavPrefix #> +  mnItm.data.view );
                    qp.push(JSON.stringify(this.<#= formRootService #>.get<#= HiddenFilterByRowSuffix #>(v.value, mnItm.data.nav)));
                } else {
                    this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('navigation', {message: this.<#= frasesPropName #>['<#= ActionParamNavM2mNotAllwd #>']});
                    return;
                }
            } else {
                this.onRowCommand.emit(v);
                return;
            }
        }

        this.router.navigate(qp, {relativeTo: this.route});
        // for the named router-outlet uncomment the lines above and comment the lines below. Do not forget about html-file.
/*
        if(this.<#= OutletNmPropName #> === 'primary') {
            this.router.navigate([{outlets: { '<#=  OutletNameValue #>': null}}], {relativeTo: this.route}).then(()=>{
                this.router.navigate(qp, {relativeTo: this.route})
            });
        } else {
            qp[0] = this.<#= OutletNmPropName #> + '2' + qp[0];
            this.router.navigate([{outlets: { [this.<#= OutletNmPropName #>]: null}}], {relativeTo: this.route.parent!.parent}).then(
                ()=> {
                    this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: qp }}], {relativeTo: this.route.parent!.parent});
                }
            );
        }
*/
    }
    tableCommand(v: <#= eventEmitterDataModelClassName #>) {
        let id = this.tableMenuItemsData.findIndex(e => { return e.id === v.id; });
        if(id < 0) return;
        if (!(this.tableMenuItemsData[id].enabled)) {
            this.<#= AppSettingServicePropName #>.showError(this.<#= frasesPropName #>['<#= permissionPropName #>'], this.<#= frasesPropName #>['<#= accessDeniedPropName #>']);
            return;
        }
        if(v.id === '<#= ActionParamDeleteSelMode #>') {
            this.onDeleteMultiple( v.sender );
        } else if(v.id === '<#= ActionParamAddMode #>') {
            let qp: string[] = [];
            qp.push( '<#= APrefix #>' + '<#= Model.ViewName #>' );
            if (!(typeof this.route.snapshot.params[this.<#= HiddenFilterPrefix #>] === 'undefined')) {
                qp.push(this.route.snapshot.params[this.<#= HiddenFilterPrefix #>]);
            } else {
                qp.push(JSON.stringify({}));
            }

             this.router.navigate(qp, {relativeTo: this.route});
            // for the named router-outlet comment the line above and uncomment the lines below. Do not forget about html-file.
/*
            if(this.<#= OutletNmPropName #> === 'primary') {
                this.router.navigate([{outlets: { '<#=  OutletNameValue #>': null}}], {relativeTo: this.route}).then(()=>{
                    this.router.navigate(qp, {relativeTo: this.route});
                });
            } else {
                qp[0] = this.<#= OutletNmPropName #> + '2' + qp[0];
                this.router.navigate([{outlets: { [this.<#= OutletNmPropName #>]: null}}], {relativeTo: this.route.parent!.parent}).then(
                    ()=> {
                        this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: qp }}], {relativeTo: this.route.parent!.parent});
                    }
                );
            }
*/
        } else {
            this.onTableCommand.emit(v);
            return;
        }
    }
    <#= applyFilterPropName #>(frm: <#= searchComponentClassName #> | any) {
        if(this.isPostNavApplied) {
            return;
        }
        this.isPostNavApplied = true;

        
        let act: string | any = undefined;
        if (!(typeof this.route.snapshot.queryParams['<#= ActionParamName #>'] === 'undefined')) {
            act = this.route.snapshot.queryParams['<#= ActionParamName #>'];
        }
        if(typeof act === 'undefined') return;
        if(act === null) return;

        let flt: <#= viewInterfaceName #> | any = JSON.parse(this.route.snapshot.queryParams['<#= ItemParamName #>']);
        if(typeof flt === 'undefined') return;
        if(flt === null) return;

<#
    if (Model.IsWebApiSelectOneByPrimarykey) {
#>
        if ((act === '<#= APrefix #>') ||
            (act === '<#= UPrefix #>')) {
<#
    for(int i = 0 ; i < primKeys.Count; i++) {
#>
            if(typeof flt['<#= GetTypeScriptPropertyName(primKeys[i], Model) #>'] === 'undefined') {
                return;
            }
            let <#= GetPrimKeyVarName(primKeys[i]) #>: any = flt['<#= GetTypeScriptPropertyName(primKeys[i], Model) #>'];
<#
    }
#>
            this.<#= formRootService #>.<#= GetOneMethodName #>(
<# {
            int k = 0;
            foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { 
                if (k > 0)  {
#>
                , <#= GetPrimKeyVarName(primKey) #>
<#
                } else {
                    k++;
#>
                  <#= GetPrimKeyVarName(primKey) #>
<#
                }
            }
   }
#> 
            ).subscribe({
                   next: (data: <#= viewInterfaceName #> ) => { // success path
                        if (typeof data === 'undefined') return;
                        if (data === null) return;
                        if(typeof frm.dataSource === 'undefined') return;
                        if(!Array.isArray(frm.dataSource)) return;
                        let i: number = frm.dataSource.findIndex((e:any) => {
                            return <# {int k = 0;
                                    foreach(ModelViewPropertyOfVwSerializable primKey in primKeys) { if (k > 0)  { #> && <# } 
                                    #> (e.<#= GetTypeScriptPropertyName(primKeys[k], Model) #> === data.<#= GetTypeScriptPropertyName(primKeys[k], Model) #>)<#
                                    k++;
                                }} #>
                        });
                        if(i < 0) {
                            frm.dataSource.splice(0, 0, data);
                            frm.dataSource = frm.dataSource.slice(0);
                            let isNDef = true;
                            if (!(typeof frm.currentRow === 'undefined')) {
                                if (!(frm.currentRow === null)) {
                                    isNDef = false;
                                }
                            }
                            if(isNDef) {
                                frm.<#= OnSelectRowMethodName #>(data);
                            }
                        } else { 
                            frm.<#= OnSelectRowMethodName #>(frm.dataSource[i]); 
                        }
                   },
                   error: (error) => { // error path
                        this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('http', error);
                        this.onBackBtn(); // navigation is correct: onBackBtn is correct method here
                   } 
                });
            return;
        }
<#
    } else {
#>
// IsSelectOne is not set for given view
<#
    }
#>
    }
    onBackBtn(e?: any) {
        if (this.<#= DepthParamName #> > 1) {
//            this.<#= AppSettingServicePropName #>.<#= removeStorageItemMethodName #>(this.<#= uidParamName #> as string);

            this.router.navigate(['../../'], {relativeTo: this.route});
            // for the named router-outlet comment the line above and uncomment the lines below. Do not forget about html-file.
/*
            if(this.<#= OutletNmPropName #> === 'primary') {
                this.router.navigate([{outlets: { '<#=  OutletNameValue #>': null}}], {relativeTo: this.route}).then(()=>{
                    this.router.navigate(['../../'], {relativeTo: this.route});
                });
            } else {
                // there is no parant, so do just hide detail component
                this.router.navigate([{ outlets: { [this.<#= OutletNmPropName #>]: null }}], {relativeTo: this.route.parent!.parent});
            }
*/
        }
    }

    public <#= externalFilterPropName #>: string | any;

    <#= OnBeforeSqueryMethodName #>(cf: string | any): void {
        if (this.<#= uidParamName #> === null) return;
        let cfs: string = '';
        if(!(typeof cf === 'undefined')) {
            if(!(cf === null)) {
                cfs = cf;
            }
        }
        this.<#= AppSettingServicePropName #>.<#= setStorageItemMethodName #>(this.<#= uidParamName #>, cfs);
    }

}


