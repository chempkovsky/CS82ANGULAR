<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    string toBinaryPipeFolder                       = "00062-to-binary.pipe.ts";
    string toBinaryFormatterDirectiveFolder         = "00064-to-binary-formatter.directive.ts";
    string formatterModuleFolder                    = "00070-app-formatter.module.ts";

    string toBinaryPipeClassName                    = GetPipeClassName(Model, toBinaryPipeFolder);
    string toBinaryPipeSelectorName                 = GetPipeSelectorName(Model, toBinaryPipeFolder);

    string toBinaryFormatterDirectiveClassName      = GetDirectiveClassName(Model, toBinaryFormatterDirectiveFolder);
    string toBinaryFormatterDirectiveSelectorName   = GetDirectiveSelectorName(Model, toBinaryFormatterDirectiveFolder);
    string formatterModuleClassName                 = GetModuleClassName(Model, formatterModuleFolder);
#>

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { <#= toBinaryPipeClassName #> } from '<#= GetFolderName(Model, toBinaryPipeFolder, formatterModuleFolder)#>';
import { <#= toBinaryFormatterDirectiveClassName #> } from '<#= GetFolderName(Model, toBinaryFormatterDirectiveFolder, formatterModuleFolder)#>';

@NgModule({
    declarations: [
        <#= toBinaryPipeClassName #>,
        <#= toBinaryFormatterDirectiveClassName #>,
    ],
    imports: [
        CommonModule,
    ],
    exports: [
        <#= toBinaryPipeClassName #>,
        <#= toBinaryFormatterDirectiveClassName #>,
    ],
//    entryComponents: [
//    ],
    providers: [
        <#= toBinaryPipeClassName #>,
    ]

})
export class <#= formatterModuleClassName #> { }


