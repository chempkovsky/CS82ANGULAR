<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    



    string DepthParamName               = "depth"; // there exists one copy per url: if depth > 1 
    string ActionParamName              = "mode";  // there exists one copy per url for Add/Update/Delete. it should be the last item
    string MaxHeightPropSelector        = "max-height";
    string MaxHeightPropName            = "maxHeight";
    string FilterMaxHeightPropSelector  = "filter-max-height";
    string FilterMaxHeightPropName      = "filterMaxHeight";
    string ShowFilterPropName           = "showFilter";
    string TitlePropName                = "title";


    string reLazyModuleFolder           = "01954-Re-lazy.module.ts";
//    string rlLazyModuleFolder           = "01955-Rl-lazy.module.ts";


    string rvFormModuleFolder           = "01950-Rv.module.ts";
    string raFormModuleFolder           = "01952-Ra.module.ts";
    string ruFormModuleFolder           = "01954-Ru.module.ts";
    string rdFormModuleFolder           = "01956-Rd.module.ts";
    string rlFormModuleFolder           = "01958-Rl.module.ts";
                                           
    string rvLazyModuleFolder           = "01970-Rv-lazy.routing.module.ts";
    string raLazyModuleFolder           = "01972-Ra-lazy.routing.module.ts";
    string ruLazyModuleFolder           = "01974-Ru-lazy.routing.module.ts";
    string rdLazyModuleFolder           = "01976-Rd-lazy.routing.module.ts";
    string rlLazyModuleFolder           = "01978-Rl-lazy.routing.module.ts";

    List<Tuple<ModelViewSerializable, string, int>> nodes = new List<Tuple<ModelViewSerializable, string, int>>();
    List<string> allViewNames= new List<string>();
    nodes.Add(new Tuple<ModelViewSerializable, string, int>( Model, Model.ViewName, 1));
    allViewNames.Add(Model.ViewName);

    {
        int currId= 0;
        while(currId < nodes.Count) {
            Tuple<ModelViewSerializable, string, int> masterNode = nodes[currId];
            ModelViewSerializable masterView = masterNode.Item1;
            List<ModelViewPropertyOfVwSerializable> masterPrincipals = GetModelPrimaryKeyProps(masterView);
            string CurrPath = masterNode.Item2;
            int CurrDepth = masterNode.Item3 + 1;
            if(CurrDepth == 2) {
                CurrPath = CurrPath + "/:" + DepthParamName;
            }
            List<string> viewNames = GetDetailViews(masterView, Context, null);
            foreach(string viewName in viewNames) {
                ModelViewSerializable detail = GetModelViewByName(Context, viewName);
                if(nodes.Count(p => p.Item1 == detail) > 2) {
                    continue;
                }
                string newPath = CurrPath + "/" + viewName;
                for(int i = 0; i < masterPrincipals.Count; i++) {
                    newPath = newPath + "/:p"+CurrDepth + "x" + i;
                }
                List<ModelViewForeignKeySerializable> foreignKeys = GetDetailViewForeignKeys(masterView, detail, null);
                foreach(ModelViewForeignKeySerializable foreignKey in foreignKeys) {
                    nodes.Add(new Tuple<ModelViewSerializable, string, int>(  detail, newPath + "/"+foreignKey.NavigationName, CurrDepth));
                    if (!allViewNames.Any(v => v == detail.ViewName)) {
                        allViewNames.Add(detail.ViewName);
                    }
                }
            }
            currId++;
        }
    }

#>

<# {
        Tuple<ModelViewSerializable, string, int> node = nodes[0];
#>
//
// How to use:
//
//  <li [ngbNavItem] > <a ngbNavLink [routerLink]="['<#= node.Item2 #>']" routerLinkActive="active">List of <#= Model.ViewName #></a>/li>                  
//
//  <a mat-list-item [routerLink]="['<#= node.Item2 #>']" routerLinkActive="active">List of <#= Model.ViewName #></a>
//
<#
    }
#>
//
// 2. Do not save this file.
//
// Copy generated paths and insert into "const routes: Routes = [...] "-array
// const routes: Routes = [
//  ...
/*

<#
    for(int k = nodes.Count-1; k > -1; k--) {
        Tuple<ModelViewSerializable, string, int> node = nodes[k];
        ModelViewSerializable aModel = node.Item1;
        int CurrDepth = node.Item3 + 1;
        List<ModelViewPropertyOfVwSerializable> aModelPrincipals = GetModelPrimaryKeyProps(aModel);
        string fileNm_rl = GeFileNameWithoutExt(aModel, rlLazyModuleFolder);
        string fileNm_rv = GeFileNameWithoutExt(aModel, rvLazyModuleFolder);
        string fileNm_ra = GeFileNameWithoutExt(aModel, raLazyModuleFolder);
        string fileNm_ru = GeFileNameWithoutExt(aModel, ruLazyModuleFolder);
        string fileNm_rd = GeFileNameWithoutExt(aModel, rdLazyModuleFolder);
        
        string aPath= "";
        for(int i = 0; i <  aModelPrincipals.Count; i++) {
            aPath= aPath + "/:p"+CurrDepth + "x" + i;
        }
        aPath= aPath + "/:" + ActionParamName;
        bool incEdit= true;
        if(aModel.IsWebApiSelectManyWithPagination) {
            if(!string.IsNullOrEmpty(fileNm_rl)) {
                if(aModel.IsWebApiSelectOneByPrimarykey) {
                    if(!string.IsNullOrEmpty(fileNm_rv)) {
#>
    { path: '<#= node.Item2 + aPath #>', 
        loadChildren: () => import('<#= fileNm_rv #>').then(m => m.<#= GetModuleClassName(aModel, rvFormModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'View <#= aModel.ViewName #>' }  },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rvLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectOneByPrimarykey is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }




                if(aModel.IsWebApiAdd) {
                    if(!string.IsNullOrEmpty(fileNm_ra)) {
#>
    { path: '<#= node.Item2 + aPath #>', 
        loadChildren: () => import('<#= fileNm_ra #>').then(m => m.<#= GetModuleClassName(aModel, raFormModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Add <#= aModel.ViewName #>' }  },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= raLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiAdd is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }


                if(aModel.IsWebApiUpdate) {
                    if(!string.IsNullOrEmpty(fileNm_ru)) {
#>
    { path: '<#= node.Item2 + aPath #>', 
        loadChildren: () => import('<#= fileNm_ru #>').then(m => m.<#= GetModuleClassName(aModel, ruFormModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Modify <#= aModel.ViewName #>' }  },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= ruLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiUpdate is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }


                if(aModel.IsWebApiDelete) {
                    if(!string.IsNullOrEmpty(fileNm_rd)) {
#>
    { path: '<#= node.Item2 + aPath #>', 
        loadChildren: () => import('<#= fileNm_rd #>').then(m => m.<#= GetModuleClassName(aModel, rdFormModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Delete <#= aModel.ViewName #>' }  },

<#
                    } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rdLazyModuleFolder #>] has not been generated yet
//
<#
                    } // if(!string.IsNullOrEmpty(fileNm_rv)) { ... } else { ... }
                } else { // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] WebApiDelete is set to false
//
<#
                } // if(aModel.IsWebApiSelectOneByPrimarykey) { ... } else { ... }



#>
    { path: '<#= node.Item2 + aPath #>', 
        loadChildren: () => import('<#= fileNm_rl #>').then(m => m.<#= GetModuleClassName(aModel, rlFormModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'List of <#= aModel.ViewName #>' }  },

<#


            } else {
#>
//
//warning: for the View   [<#= aModel.ViewName #>] the componen [<#= rlLazyModuleFolder #>] has not been generated yet
//
<#
            }
        } else { // if(aModel.IsWebApiSelectManyWithPagination) { ... } ...
#>
//
//warning: for the View   [<#= aModel.ViewName #>] SelectManyWithPagination is set to false
//
<#
        } // if(aModel.IsWebApiSelectManyWithPagination) { } else { ... }














        if ((aModelPrincipals.Count < 1)&&false) {
#>
//
//warning: for the View   <#= aModel.ViewName #> the Primary Key properties not included in the list of View properties
//
<#
            incEdit= false;
        } if (aModelPrincipals.Count != aModel.PrimaryKeyProperties.Count) {
#>
//
//warning: for the View   <#= aModel.ViewName #> not all Primary Key properties included in the list of View properties
//
<#
            incEdit= false;
        }
        if ((incEdit)&&false) {
#>
    { path: '<#= node.Item2 + aPath #>', 
        loadChildren: () => import('<#= GeFileNameWithoutExt(aModel, reLazyModuleFolder) #>').then(m => m.<#= GetModuleClassName(aModel, reLazyModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Modify(Delete) <#= aModel.ViewName #>' }  },

    { path: '<#= node.Item2 + "/:" + ActionParamName #>', 
        loadChildren: () => import('<#= GeFileNameWithoutExt(aModel, reLazyModuleFolder) #>').then(m => m.<#= GetModuleClassName(aModel, reLazyModuleFolder) #>),
        data: { <#= ShowFilterPropName #>: true, <#= TitlePropName #>: 'Add <#= aModel.ViewName #>'  }  },

<#
        }
#>
    { path: '<#= node.Item2 #>', 
        loadChildren: () => import('<#= GeFileNameWithoutExt(aModel, rlLazyModuleFolder) #>').then(m => m.<#= GetModuleClassName(aModel, rlLazyModuleFolder) #>),
        data: { <#= FilterMaxHeightPropName #>: 2, <#= MaxHeightPropName #>: 10, <#= ShowFilterPropName #>: true, <#= TitlePropName #>:  'List of <#= aModel.ViewName #>' }  },

<#
    }
#>


*/
//
//    ...
//];
//


<#+


    string GeFileNameWithoutExt(ModelViewSerializable model, string fileType) {
        string result= "";
        if ((model == null) || string.IsNullOrEmpty(fileType)) return result;
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileFolder)) {
            result = "./";
        } else {
            result = refItem.FileFolder.Replace("\\","/").Replace("src/","").Replace("app/","./");
        }
        if(! result.EndsWith("/")) {
            result += "/";
            
        }
        return result + refItem.FileName;
    }


    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop =
                model.ScalarProperties.Where(p => p.ViewPropertyName == modelViewKeyPropertySerializable.ViewPropertyName).FirstOrDefault();
            if(prop != null) {
                result.Add(prop);
            } else {
                if(model.ForeignKeys != null) {
                    foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in model.ForeignKeys) {
                        if ((modelViewForeignKeySerializable.PrincipalKeyProps != null) && (modelViewForeignKeySerializable.ForeignKeyProps != null)) {
                            for(int i = 0; i < modelViewForeignKeySerializable.ForeignKeyProps.Count; i++) {
                                if(modelViewForeignKeySerializable.ForeignKeyProps[i].OriginalPropertyName == modelViewKeyPropertySerializable.OriginalPropertyName ) {
                                    if(i < modelViewForeignKeySerializable.PrincipalKeyProps.Count) {
                                        prop =
                                        model.ScalarProperties.Where(p => 
                                            (p.OriginalPropertyName == modelViewForeignKeySerializable.PrincipalKeyProps[i].OriginalPropertyName)
                                            &&
                                            (p.ForeignKeyName == modelViewForeignKeySerializable.NavigationName)
                                        ).FirstOrDefault();
                                    }
                                }
                                if(prop != null) break;
                            }
                        }
                        if(prop != null) break;
                    }
                    if(prop != null) {
                        result.Add(prop);
                    }
                }
            }
        }
        return result;
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModuleClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".module","Module").Replace(".routing","Routing");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    
    List<string> GetDetailViews(ModelViewSerializable model, DbContextSerializable context, List<string> result)
        {
            if (result == null)
            {
                result = new List<string>();
            }
            if ((model == null) || (context == null))
            {
                return result;
            }
            if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null) || (context.ModelViews == null)) {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if(primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewSerializable> details =
                context.ModelViews.Where(m => m.ForeignKeys.Any(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName))).ToList();
            if(details.Count < 1)
            {
                return result;
            }
            foreach(ModelViewSerializable detail in details)
            {
                if (detail.ScalarProperties == null) continue;
                if (detail.ForeignKeys == null) continue;
                if (detail.ForeignKeys.Count < 1) continue;
                List<ModelViewForeignKeySerializable> ForeignKeys =
                    detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
                if (ForeignKeys.Count < 1) continue;
                bool canBeUsed = false;
                foreach(ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
                {
                    bool hasForeignKeyProps = true;
                    if (ForeignKey.ForeignKeyProps != null)
                    {
                        for(int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                        {
                            ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                            if (!(detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)))))
                            {
                                hasForeignKeyProps = false;
                            }
                            if(!hasForeignKeyProps)
                            {
                                ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                                if (detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName)))
                                {
                                    hasForeignKeyProps = true;
                                } else
                                {
                                    break;
                                }
                            }
                        }
                    } else
                    {
                        hasForeignKeyProps = false;
                    }
                    if (hasForeignKeyProps)
                    {
                        canBeUsed = true;
                        break;
                    }
                }
                if(canBeUsed)
                {
                    if(!result.Contains(detail.ViewName))
                    {
                        result.Add(detail.ViewName);
                    }
                }
            }
            return result;
    }
    List<ModelViewForeignKeySerializable> GetDetailViewForeignKeys(ModelViewSerializable model, ModelViewSerializable detail, List<ModelViewForeignKeySerializable> result)
    {
            if (result == null) result = new List<ModelViewForeignKeySerializable>();
            if ((model == null) || (detail == null))
            {
                return result;
            }
            if ((model.PrimaryKeyProperties == null) || (detail.ScalarProperties == null) || (detail.ForeignKeys == null))
            {
                return result;
            }
            if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1))
            {
                return result;
            }
            List<ModelViewPropertyOfVwSerializable> primKeys = GetModelPrimaryKeyProps(model);
            if (primKeys == null)
            {
                return result;
            }
            if (primKeys.Count != model.PrimaryKeyProperties.Count)
            {
                return result;
            }
            string RootEntityFullClassName = model.RootEntityFullClassName;
            string RootEntityUniqueProjectName = model.RootEntityUniqueProjectName;
            List<ModelViewForeignKeySerializable> ForeignKeys =
                detail.ForeignKeys.Where(f => (f.NavigationEntityFullName == RootEntityFullClassName) && (f.NavigationEntityUniqueProjectName == RootEntityUniqueProjectName)).ToList();
            if (ForeignKeys.Count < 1)
            {
                return result;
            }
            foreach (ModelViewForeignKeySerializable ForeignKey in ForeignKeys)
            {
                bool hasForeignKeyProps = true;
                if (ForeignKey.ForeignKeyProps != null)
                {
                    for (int i = 0; i < ForeignKey.ForeignKeyProps.Count; i++)
                    {
                        ModelViewKeyPropertySerializable ForeignKeyProp = ForeignKey.ForeignKeyProps[i];
                        hasForeignKeyProps =
                            detail.ScalarProperties.Any(s => (s.OriginalPropertyName == ForeignKeyProp.OriginalPropertyName) && (string.IsNullOrEmpty(s.ForeignKeyNameChain)));
                        if (!hasForeignKeyProps)
                        {
                            ModelViewKeyPropertySerializable PrincipalKeyProp = ForeignKey.PrincipalKeyProps[i];
                            hasForeignKeyProps = detail.ScalarProperties.Any(s => (s.OriginalPropertyName == PrincipalKeyProp.OriginalPropertyName) && (s.ForeignKeyNameChain == ForeignKey.NavigationName));
                            {
                                hasForeignKeyProps = true;
                            }
                            if(!hasForeignKeyProps)
                            {
                                break;
                            }
                        }
                    }
                }
                else
                {
                    hasForeignKeyProps = false;
                }
                if (hasForeignKeyProps)
                {
                    result.Add(ForeignKey);
                    break;
                }
            }
            return result;
    }
    ModelViewSerializable GetModelViewByName(DbContextSerializable context, string viewName) {
        if ((context == null) || (string.IsNullOrEmpty(viewName))) {
            return null;
        }
        if (context.ModelViews == null) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
    }
#>
