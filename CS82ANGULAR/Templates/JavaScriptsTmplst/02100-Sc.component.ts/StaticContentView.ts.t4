<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ViewLevel.t4" #>
<#
    bool localize = Context.Localize;


    string AppSettingServicePropName            = "appGlblSettings";
    string AppearancePropName                   = "appearance";
    string OverflowSelector                     = "ovrflw";
    string OverflowPropName                     = "ovrflw";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";


    string MaxHeightPropSelector                = "max-height";
    string MaxHeightPropName                    = "maxHeight";
    string MaxHeightExPropName                  = "maxHeightEx";

    string FilterMaxHeightPropSelector          = "filter-max-height";
    string FilterMaxHeightPropName              = "filterMaxHeight";

    string StaticContentPropName                = "StaticContent";

    string captionPropName                      = "caption";
    string captionSelector                      = "caption";

    string staticContentCssFolder               = "02100-Sc.component.css";
    string staticContentHtmlFolder              = "02100-Sc.component.html";
    string staticContentComponentFolder         = "02100-Sc.component.ts";
    string staticContentSelectorCommonPart      = GetComponentSelectorCommonPart(Model, staticContentComponentFolder);
    string staticContentClassName               = GetComponentClassName(Model, staticContentComponentFolder);

    string appSettingServiceFolder              = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName           = GetCommonServiceClassNameWithAnglr(AngularJsonFile, Model, Context, appSettingServiceFolder, staticContentComponentFolder);

    string itemHeightDataModelFolder            = "00016-item-height-data.interface.ts";
    string itemHeightDataModelClassName         = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, itemHeightDataModelFolder, staticContentComponentFolder);

    string menuItemDataModelFolder              = "00017-menu-item-data.interface.ts";
    string menuItemDataModelClassName           = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, menuItemDataModelFolder, staticContentComponentFolder);

    string eventEmitterDataModelFolder          = "00018-event-emitter-data.interface.ts";
    string eventEmitterDataModelClassName       = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterDataModelFolder, staticContentComponentFolder);

    string eventEmitterPubModelFolder           = "00019-event-emitter-pub.interface.ts";
    string eventEmitterPubModelClassName        = GetModelClassNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, staticContentComponentFolder);



    string eventEmitterPubModelClassName        = GetModelClassName(Context, eventEmitterPubModelFolder);
    string eventEmitterDataModelClassName       = GetModelClassName(Context, eventEmitterDataModelFolder);
    string menuItemDataModelClassName           = GetModelClassName(Context, menuItemDataModelFolder);

#>

import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  appSettingServiceFolder, staticContentComponentFolder)#>';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  eventEmitterDataModelFolder, staticContentComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context, eventEmitterPubModelFolder, staticContentComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderNameWithAnglr(AngularJsonFile, Model, Context,  menuItemDataModelFolder, staticContentComponentFolder)#>';



@Component({
<# if (Model.IsStandalone) { #>
  standalone: true,
<# } else { #>
  standalone: false,
<# } #>

  selector: 'app-<#= staticContentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, staticContentHtmlFolder, staticContentComponentFolder)#>.html',
  styleUrls: ['<#=  GetFolderName(Model, staticContentCssFolder, staticContentComponentFolder)#>.scss']
})
export class <#= staticContentClassName #> implements OnInit, <#= eventEmitterPubModelClassName #> {
<# 
    if(localize) {
#>
  frases: {[key:string]: string}  = {
    '<#= captionPropName #>': $localize`:<#= Model.PluralTitle #>@@<#= staticContentClassName #>.<#= captionPropName #>:<#= Model.PluralTitle #>`,
    '<#= StaticContentPropName #>': $localize`:Static Content for the view@@<#= staticContentClassName #>.<#= StaticContentPropName #>:Static Content for the view`
  }

<# 
    } else {
#>
  frases: {[key:string]: string}  = {
    '<#= captionPropName #>': '<#= Model.PluralTitle #>',
    '<#= StaticContentPropName #>': 'Static Content for the view'
  }
<# 
    }
#>
    @Input('<#= captionSelector #>') <#= captionPropName #>: string = this.frases['<#= captionPropName #>'];

    <#= StaticContentPropName #>: string =  this.frases['<#= StaticContentPropName #>'];

    @Input('<#= FilterMaxHeightPropSelector #>')  <#= FilterMaxHeightPropName #>: number | null = null;

    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= menuItemDataModelClassName #>)  {
        let e: <#= eventEmitterDataModelClassName #> = {
            id: v.id,
            sender: this,
            value: v.data
        }
        this.<#= onContainerMenuItemClickEmitter #>.emit(e);
    }

    <#= MaxHeightExPropName #>: number|null = null;
    protected _<#= MaxHeightPropName #>: number|null = null;
    @Input('<#= MaxHeightPropSelector #>')
        get <#= MaxHeightPropName #>(): number|null {
            return this._<#= MaxHeightPropName #>;
        }
      set <#= MaxHeightPropName #>(inp: number|null) {
        this._<#= MaxHeightPropName #> = inp;
        if (!(typeof inp === 'undefined')) {
          if(!(inp === null)) {
            this.<#= MaxHeightExPropName #> = inp * this.<#= AppSettingServicePropName #>.tableHeightFactor + this.<#= AppSettingServicePropName #>.tableHeightAddition;
            this.<#= OverflowPropName #> = 'auto';
            if(this.isOnInitCalled) {
              this.cd.detectChanges();
            }
            return;
          }
        }
        this.<#= MaxHeightExPropName #> = null;
        this.<#= OverflowPropName #> = null;
        if(this.isOnInitCalled) {
            this.cd.detectChanges();
        }
      }
    constructor(public <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, private cd: ChangeDetectorRef) {
    }
    isOnInitCalled: boolean = false;
    public <#= OverflowPropName #>: string | null = null;   
    ngOnInit() {
        this.isOnInitCalled = true;
    }
}

