<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    bool localize = Context.Localize;


    string AppSettingServicePropName            = "appGlblSettings";
    string AppearancePropName                   = "appearance";
    string OverflowSelector                     = "ovrflw";
    string OverflowPropName                     = "ovrflw";

    string containerMenuItemsPropName           = "contMenuItems";
    string containerMenuItemsSelector           = "cont-menu-items";
    string onContainerMenuItemClickMethodName   = "onContMenuItemClicked";
    string onContainerMenuItemClickSelector     = "on-cont-menu-item-click";
    string onContainerMenuItemClickEmitter      = "onContMenuItemEmitter";


    string MaxHeightPropSelector                = "max-height";
    string MaxHeightPropName                    = "maxHeight";
    string MaxHeightExPropName                  = "maxHeightEx";

    string FilterMaxHeightPropSelector          = "filter-max-height";
    string FilterMaxHeightPropName              = "filterMaxHeight";

    string StaticContentPropName                = "StaticContent";

    string captionPropName                      = "caption";
    string captionSelector                      = "caption";

    string appSettingServiceFolder              = "00015-app-glbl-settings.service.ts";
    string itemHeightDataModelFolder            = "00016-item-height-data.interface.ts";
    string menuItemDataModelFolder              = "00017-menu-item-data.interface.ts";
    string eventEmitterDataModelFolder          = "00018-event-emitter-data.interface.ts";
    string eventEmitterPubModelFolder           = "00019-event-emitter-pub.interface.ts";

    string staticContentCssFolder               = "02100-Sc.component.css";
    string staticContentHtmlFolder              = "02100-Sc.component.html";
    string staticContentComponentFolder         = "02100-Sc.component.ts";

    string staticContentSelectorCommonPart      = GetComponentSelectorCommonPart(Model, staticContentComponentFolder);
    string staticContentClassName               = GetComponentClassName(Model, staticContentComponentFolder);

    string eventEmitterPubModelClassName        = GetModelClassName(Context, eventEmitterPubModelFolder);
    string eventEmitterDataModelClassName       = GetModelClassName(Context, eventEmitterDataModelFolder);
    string appSettingServiceClassName           = GetCommonServiceClassName(Context, appSettingServiceFolder);
    string menuItemDataModelClassName           = GetModelClassName(Context, menuItemDataModelFolder);

#>

import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { <#= eventEmitterDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  eventEmitterDataModelFolder, staticContentComponentFolder)#>';
import { <#= eventEmitterPubModelClassName #> } from '<#= GetCommonFolderName(Model, Context, eventEmitterPubModelFolder, staticContentComponentFolder)#>';
import { <#= menuItemDataModelClassName #> } from '<#=  GetCommonFolderName(Model, Context,  menuItemDataModelFolder, staticContentComponentFolder)#>';
import { <#= appSettingServiceClassName #> } from '<#=  GetCommonFolderName(Model, Context,  appSettingServiceFolder, staticContentComponentFolder)#>';



@Component({
  selector: 'app-<#= staticContentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, staticContentHtmlFolder, staticContentComponentFolder)#>.html',
  styleUrls: ['<#=  GetFolderName(Model, staticContentCssFolder, staticContentComponentFolder)#>.css']
})
export class <#= staticContentClassName #> implements OnInit, <#= eventEmitterPubModelClassName #> {
<# 
    if(localize) {
#>
  frases: {[key:string]: string}  = {
    '<#= captionPropName #>': $localize`:<#= Model.PluralTitle #>@@<#= staticContentClassName #>.<#= captionPropName #>:<#= Model.PluralTitle #>`,
    '<#= StaticContentPropName #>': $localize`:Static Content for the view@@<#= staticContentClassName #>.<#= StaticContentPropName #>:Static Content for the view`
  }

<# 
    } else {
#>
  frases: {[key:string]: string}  = {
    '<#= captionPropName #>': '<#= Model.PluralTitle #>',
    '<#= StaticContentPropName #>': 'Static Content for the view'
  }
<# 
    }
#>
    @Input('<#= captionSelector #>') <#= captionPropName #>: string = this.frases['<#= captionPropName #>'];

    <#= StaticContentPropName #>: string =  this.frases['<#= StaticContentPropName #>'];

    @Input('<#= FilterMaxHeightPropSelector #>')  <#= FilterMaxHeightPropName #>: number | null = null;

    @Output('<#= onContainerMenuItemClickSelector #>') <#= onContainerMenuItemClickEmitter #> = new EventEmitter<<#= eventEmitterDataModelClassName #>>();
    @Input('<#= containerMenuItemsSelector #>') <#= containerMenuItemsPropName #>: Array<<#= menuItemDataModelClassName #>> = [];
    <#= onContainerMenuItemClickMethodName #>(v: <#= menuItemDataModelClassName #>)  {
        let e: <#= eventEmitterDataModelClassName #> = {
            id: v.id,
            sender: this,
            value: v.data
        }
        this.<#= onContainerMenuItemClickEmitter #>.emit(e);
    }

    <#= MaxHeightExPropName #>: number|null = null;
    protected _<#= MaxHeightPropName #>: number|null = null;
    @Input('<#= MaxHeightPropSelector #>')
        get <#= MaxHeightPropName #>(): number|null {
            return this._<#= MaxHeightPropName #>;
        }
      set <#= MaxHeightPropName #>(inp: number|null) {
        this._<#= MaxHeightPropName #> = inp;
        if (!(typeof inp === 'undefined')) {
          if(!(inp === null)) {
            this.<#= MaxHeightExPropName #> = inp * this.<#= AppSettingServicePropName #>.tableHeightFactor + this.<#= AppSettingServicePropName #>.tableHeightAddition;
            this.<#= OverflowPropName #> = 'auto';
            if(this.isOnInitCalled) {
              this.cd.detectChanges();
            }
            return;
          }
        }
        this.<#= MaxHeightExPropName #> = null;
        this.<#= OverflowPropName #> = null;
        if(this.isOnInitCalled) {
            this.cd.detectChanges();
        }
      }
    constructor(public <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>, private cd: ChangeDetectorRef) {
    }
    isOnInitCalled: boolean = false;
    public <#= OverflowPropName #>: string | null = null;   
    ngOnInit() {
        this.isOnInitCalled = true;
    }
}

<#+
    string GetDisplayAttributeValueString2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            if (sclrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if(sclrProp.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                sclrProp.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }
    string GetAllDisplayedColumns(ModelViewSerializable model) {
        string result= "";
        if (model == null) {
            return result; 
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return result; 
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if (result == "") {
                    result = "'" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                } else {
                    result += ", '" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                }
            }
        }
        return result;
    }

    string GetDisplayedColumns(ModelViewSerializable model) {
        string result= "";
        if (model == null) {
            return result; 
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return result; 
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if (result == "") {
                    result = "'" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                } else {
                    result += ", '" + GetTypeScriptPropertyNameEx2(modelViewUIListPropertySerializable, model) + "'";
                }
                if (modelViewUIListPropertySerializable.IsNewLineAfter) {
                    break;
                }
            }
        }
        return result;
    }
    bool hasMatSort(ModelViewSerializable model) {
        if (model == null) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        foreach(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable in model.UIListProperties) {
            if (modelViewUIListPropertySerializable.IsShownInView) {
                if(model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting)) {
                    return true;
                }
            }
        }
        return false;
    }
    string matSortIfNeeded(ModelViewSerializable model) {
        if(hasMatSort(model)) {
            return "matSort";
        }
        return "";
    }
    bool hasMatSortHeader(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if ((model == null) || (modelViewUIListPropertySerializable == null)) {
            return false;
        }
        if ((model.UIListProperties == null) || (model.ScalarProperties == null)) {
            return false;
        }
        return model.ScalarProperties.Any(s => s.ViewPropertyName == modelViewUIListPropertySerializable.ViewPropertyName && s.IsUsedBySorting);
    }
    string matSortHeaderIfNeeded(ModelViewUIListPropertySerializable modelViewUIListPropertySerializable, ModelViewSerializable model) {
        if(hasMatSortHeader(modelViewUIListPropertySerializable, model)) {
            return "mat-sort-header";
        }
        return "";
    }
    string GetContextComponentClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetModelClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    string GetInputTypeToEnumName(int inputType) {
        switch(inputType) {
            case 1:
                return "AddMode";
            case 2:
                return "UpdateMode";
            default:
                return "DeleteMode";
        }
    }
    InputTypeEnum GetInputTypeWhenXXX(ModelViewUIFormPropertySerializable prop, int inputType) {
        switch(inputType) {
            case 1:
                return prop.InputTypeWhenAdd;
            case 2:
                return prop.InputTypeWhenUpdate;
            default:
                return prop.InputTypeWhenDelete;
        }
    }

    string GetInterfaceEDlgName(ModelViewSerializable model) {
        return "I"+model.ViewName+"Edlg";
    }
    string GetInterfaceName(ModelViewSerializable model) {
        return "I"+model.ViewName;
    }
    string GetInterfaceNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceName(model);
    }
    string GetInterfacePageName(ModelViewSerializable model) {
        return "I"+model.PageViewName;
    }
    string GetInterfacePageNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfacePageName(model);
    }
    string GetInterfaceFilterName(ModelViewSerializable model) {
        return "I"+model.ViewName + "Filter";
    }
    string GetInterfaceFilterNameEx(DbContextSerializable context, string viewName) {
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return "I";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault();
        if (model == null) {
            return "I";
        }
        return GetInterfaceFilterName(model);
    }
    string GetPropertyTypeScriptTypeName(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.boolean": 
                result =  "boolean";
                break;
            case "system.guid":
            case "system.string":
                result =  "string";
                break;
            default:
                result =  "number";
                break;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return result + " | null";
        }
        return result;
    }
    string GetJavaScriptToStringMethod(ModelViewPropertyOfVwSerializable prop) {
        string result = "";
        switch(prop.UnderlyingTypeName.ToLower()) {
            case "system.datetime": 
                result =  ".toString()"; // .toDateString()
                break;
            case "system.guid":
            case "system.string":
                result =  "";
                break;
            default:
                result =  ".toString()";
                break;
        }
        return result;
    }
    string GetPropertyTypeName(ModelViewPropertyOfVwSerializable prop) {
        if("System.String".Equals(prop.UnderlyingTypeName, System.StringComparison.OrdinalIgnoreCase)) {
            return prop.UnderlyingTypeName;
        }
        if(prop.IsNullable || (!prop.IsRequiredInView)) {
            return prop.UnderlyingTypeName + " ?";
        }
        return prop.UnderlyingTypeName;
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }
    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    public string FirstLetterToUpper(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    public string FirstLetterToLower(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }
    string GetTypeScriptPropertyNameEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }
    string GetTypeScriptPropertyNameEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetTypeScriptPropertyName(sclrProp, model);
    }

    string GetUnNamedAtributeValue(ModelViewPropertyOfVwSerializable sclrProp, string attrName) {
        if(sclrProp != null) {
            if (sclrProp.Attributes != null) {
                ModelViewAttributeSerializable modelViewAttributeSerializable =
                    sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                if(modelViewAttributeSerializable != null) {
                    if (modelViewAttributeSerializable.VaueProperties != null) {
                    
                        ModelViewAttributePropertySerializable modelViewAttributePropertySerializable =
                            modelViewAttributeSerializable.VaueProperties.Where(p => (string.IsNullOrEmpty(p.PropName) || (p.PropName == "..."))).FirstOrDefault();
                        if (modelViewAttributePropertySerializable != null) {
                            return modelViewAttributePropertySerializable.PropValue;
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetAtributeValueByNo(ModelViewPropertyOfVwSerializable sclrProp, string attrName, int itemNo) {
        if(itemNo > -1) {
            if(sclrProp != null) {
                if (sclrProp.Attributes != null) {
                    ModelViewAttributeSerializable modelViewAttributeSerializable =
                        sclrProp.Attributes.Where(a => a.AttrName == attrName).FirstOrDefault();
                    if(modelViewAttributeSerializable != null) {
                        if (modelViewAttributeSerializable.VaueProperties != null) {
                            if(modelViewAttributeSerializable.VaueProperties.Count > itemNo) {
                                return modelViewAttributeSerializable.VaueProperties[itemNo].PropValue;
                            }
                        }
                    }
                }
            }
        }
        return null;                
    }
    string GetMaxLen(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        if( prop.UnderlyingTypeName.ToLower() == "system.string" ) {
            string propValue = GetUnNamedAtributeValue(prop, "StringLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
            propValue = GetUnNamedAtributeValue(prop, "MaxLength");
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxLenEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetMaxLenEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxLen(sclrProp, model);
    }
    string GetCCharpDatatype(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        return prop.UnderlyingTypeName.ToLower().Replace("system.", "");
    }
    string GetCCharpDatatypeEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetCCharpDatatypeEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetCCharpDatatype(sclrProp, model);
    }
    string GetMinVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 0);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date('" + propValue + "')";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 0);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMinValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMinValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxVal(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        string propValue = GetAtributeValueByNo(prop, "IntegerValidator", 1);
        if(!string.IsNullOrEmpty(propValue)) {
            propValue = propValue.Replace("\"", "");
            if(!string.IsNullOrEmpty(propValue)) {
                return propValue;
            }
        }
        if (prop.UnderlyingTypeName.ToLower() == "system.datetime") {
            propValue = GetAtributeValueByNo(prop, "Range", 2);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return "new Date('" + propValue + "')";
                }
            }
        } else {
            propValue = GetAtributeValueByNo(prop, "Range", 1);
            if(!string.IsNullOrEmpty(propValue)) {
                propValue = propValue.Replace("\"", "");
                if(!string.IsNullOrEmpty(propValue)) {
                    return propValue;
                }
            }
        }
        return "null";
    }
    string GetMaxValEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMinVal(sclrProp, model);
    }
    string GetMaxValEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model) {
        if ((prop == null) || (model == null)) return "null";
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        return GetMaxVal(sclrProp, model);
    }



    List<string> GetValidators(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, Dictionary<string, string> regExps) {
        List<string> result = new List<string>();
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if(sclrProp == null) {
            return result;
        }
        if(sclrProp.IsRequiredInView) {
            result.Add("Validators.required");
        }
        bool hasCurrencyAttr = false;
        if(sclrProp.Attributes != null) {
            hasCurrencyAttr = sclrProp.Attributes.Any(a => a.AttrName == "DataType" && a.VaueProperties.Any(p => p.PropValue == "DataType.Currency"));
        }
        string propValue = null;
        switch( sclrProp.UnderlyingTypeName.ToLower() ) {
            case "system.int16":
            case "system.int32":
            case "system.int64":
            case "system.uint16":
            case "system.uint32":
            case "system.uint64":
                if (hasCurrencyAttr) {
                    result.Add("Validators.pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add("Validators.pattern("+ regExps["RegExpInteger"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "IntegerValidator", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.guid":
                result.Add("Validators.pattern("+ regExps["RegExpGuid"] +")");
                break;
            case "system.double":
            case "system.decimal":
            case "system.single":
                if (hasCurrencyAttr) {
                    result.Add("Validators.pattern("+ regExps["RegExpCurrency"] +")");
                } else {
                    result.Add("Validators.pattern("+ regExps["RegExpFloat"] +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 0);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.min("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetAtributeValueByNo(sclrProp, "Range", 1);
                if(!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.max("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.string":
                propValue = GetUnNamedAtributeValue(sclrProp, "StringLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetUnNamedAtributeValue(sclrProp, "MaxLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.maxLength("+ propValue.Replace("\"", "") +")");
                }
                propValue = GetUnNamedAtributeValue(sclrProp, "MinLength");
                if (!string.IsNullOrEmpty(propValue)) {
                    result.Add("Validators.minLength("+ propValue.Replace("\"", "") +")");
                }
                break;
            case "system.datetime":
                // mat-datepicker has special min/max validation: [min] [max]
                break;
        }
        return result;
    }
    bool HasCombo(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  (prop.InputTypeWhenAdd == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) || 
                (prop.InputTypeWhenDelete == InputTypeEnum.Combo);
    }
    bool HasButton(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog);
    }
    bool HasTypeahead(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead) || 
            (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
            (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
    }
    bool HasInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return HasCombo(prop, model) ||  HasButton(prop, model) || HasTypeahead(prop, model);
    }
    bool HasInitMethodForInputMode(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, int inputType) {
        switch(inputType) {
            case 1:
                return
                    (prop.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead);
                break;
            case 2:
                return
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead);
                break;
            case 3:
                return
                    (prop.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) ||
                    (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead);
                break;
        }
        return false;
    }
    bool HasModelInitMethodForInputMode(ModelViewSerializable model, int inputType) {
        if (model == null) {
            return false;
        }
        if (model.UIFormProperties == null) {
            return false;
        }
        foreach(ModelViewUIFormPropertySerializable prop in model.UIFormProperties) {
            if(HasInitMethodForInputMode(prop, model, inputType)) {
                return true;
            }
        }
        return false;
    }
    string GetExpressionForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return  GetTypeScriptPropertyNameWithSufix(prop, model, sufix) + "Vals";
    }

    string GetExpressionForOnFilterTypeaheadControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string typeaheadSufix) {
        return  "OnFilter" + GetExpressionForControlList(prop, model, typeaheadSufix);
    }
    string GetExpressionForOnUpdateComboControlListMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string comboSufix) {
        return  "OnUpdate" + GetExpressionForControlList(prop, model, comboSufix);
    }
    string GetExpressionForOnValChangedMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnValChanged" + GetTypeScriptPropertyNameEx(prop, model);
    }
    string GetTypeScriptPropertyNameWithSufixBase(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyName(prop, model) + sufix;
    }
    string GetTypeScriptPropertyNameWithSufix(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string sufix) {
        return GetTypeScriptPropertyNameEx(prop, model) + sufix;
    }
    string GetExpressionForOnInitMethod(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        return  "OnInit" + GetTypeScriptPropertyNameEx(prop, model);
    }


    List<string> CollectComboListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) 
    {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Combo)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Array<" + GetInterfaceName(mv) + ">");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Combo) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Array<" + GetInterfaceName(mv) + ">";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectButtonItemInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) 
    {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add( GetInterfaceName(mv) );
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.SearchDialog)  {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.SearchDialog) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm =  GetInterfaceName(mv) ;
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    List<string> CollectTypeaheadListInterfaces(DbContextSerializable context, 
                                            ModelViewUIFormPropertySerializable prop, 
                                            ModelViewSerializable model) {
        List<string> result = new List<string>();
        ModelViewSerializable mv = null;
        string intrfsNm = null;
        string viewNameForSel = null;
        
        if (prop.InputTypeWhenAdd == InputTypeEnum.Typeahead)   {
            viewNameForSel = prop.ForeifKeyViewNameForAdd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    result.Add("Observable<Array<" + GetInterfaceName(mv) + ">>");
                }
            }
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForUpd;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Observable<Array<" + GetInterfaceName(mv) + ">>";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Typeahead) {
            viewNameForSel = prop.ForeifKeyViewNameForDel;
            if (string.IsNullOrEmpty(viewNameForSel)) {
                viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
            }
            if (!string.IsNullOrEmpty(viewNameForSel)) {
                mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                if (mv != null) {
                    intrfsNm = "Observable<Array<" + GetInterfaceName(mv) + ">>";
                    if(!result.Contains(intrfsNm)) {
                        result.Add(intrfsNm);
                    }
                }
            }
        }
        return result;
    }
    string GetFormControlHiddenCondition(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string eformModePropName) {
        if ((prop.InputTypeWhenAdd == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) &&
            (prop.InputTypeWhenDelete == InputTypeEnum.Hidden)) {
            return "";
        }
        string result= "*ngIf = \"";
        bool setOr = false;
        if (prop.InputTypeWhenAdd == InputTypeEnum.Hidden) {
            result = result + "(" + eformModePropName + "==1)";
            setOr = true;
        }
        if (prop.InputTypeWhenUpdate == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==2)";
            setOr = true;
        }
        if (prop.InputTypeWhenDelete == InputTypeEnum.Hidden) {
            if (setOr) {
                result = result + "||";
            }
            result = result + "(" + eformModePropName + "==3)";
        }
        return result + "\"";
    }
    int GetGreaterThanPercent(int currCnt, int maxCnt, int[] wdths) {
        if (currCnt < maxCnt) {
            return wdths[0];
        }
        return wdths[1];
    }
    string GetDisplayAttributeValueString(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string propName) {
            if (prop == null)
            {
                return "";
            }
            if(prop.Attributes == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributeSerializable attr =
                prop.Attributes.Where(a => a.AttrName == "Display").FirstOrDefault();
            if (attr == null)
            {
                return prop.ViewPropertyName;
            }
            if (attr.VaueProperties == null)
            {
                return prop.ViewPropertyName;
            }
            ModelViewAttributePropertySerializable attrProp = 
                attr.VaueProperties.Where(v => v.PropName == propName).FirstOrDefault();
            if (attrProp == null)
            {
                return prop.ViewPropertyName;
            }
            if (string.IsNullOrEmpty( attrProp.PropValue ) )
            {
                return prop.ViewPropertyName;
            } else
            {
                char[] charsToTrim = { '"', ' '};
                return attrProp.PropValue.Trim(charsToTrim);
            }
    }

    string GetDisplayAttributeValueStringEx(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    string GetDisplayAttributeValueStringEx2(ModelViewUIListPropertySerializable prop, ModelViewSerializable model, string propName) {
            if ((prop == null) || (model == null)) {
                return "";
            }
            if(model.ScalarProperties == null) {
                return "";
            }
            ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
            return GetDisplayAttributeValueString(sclrProp, model, propName);
    }
    bool IsDateInput(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model) {
        ModelViewPropertyOfVwSerializable sclrProp = model.ScalarProperties.Where(p => p.ViewPropertyName == prop.ViewPropertyName).FirstOrDefault();
        if (sclrProp == null)
        {
            return false;
        }
        return"System.DateTime".Equals(sclrProp.UnderlyingTypeName) || "DateTime".Equals(sclrProp.UnderlyingTypeName);
    }
    string GetCommonEnumClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".enum","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    string GetCommonFolderName(ModelViewSerializable model, DbContextSerializable context,  string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.CommonStaffs == null)) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetCrossComponentFolderName(ModelViewSerializable model, string currFolder, DbContextSerializable context, string refViewName, string refFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(currFolder) || (context == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(refViewName)) {
            return result;
        }
        if ((model.CommonStaffs == null) || (context.ModelViews == null)) {
            return result;
        }
        ModelViewSerializable refModel = context.ModelViews.Where(v => v.ViewName == refViewName).FirstOrDefault();
        if (refModel == null) {
            return result;
        }
        if (refModel.CommonStaffs == null)  {
            return result;
        }
        CommonStaffSerializable refItem= 
            refModel.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("",Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }

    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    string GetContextComponentSelectorCommonPart(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }

    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    
    string GetServiceClassNameEx(DbContextSerializable context, string ViewName, string fileType) {
        if ((context == null) || string.IsNullOrEmpty(ViewName) || string.IsNullOrEmpty(fileType)) {
            return "";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null) {
            return "";
        }
        return GetServiceClassName(model, fileType);
    }

    string GetViewByForeignNameChain(DbContextSerializable context, string ViewName, string foreignKeyNameChain) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (mv == null)
        {
            return "";
        }
        if (string.IsNullOrEmpty(foreignKeyNameChain))
        {
            return ViewName;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new char[] { '.' }, StringSplitOptions.RemoveEmptyEntries);
        if (foreignKeys.Length < 1)
        {
            return "";
        }
        ModelViewForeignKeySerializable fk = 
            mv.ForeignKeys.Where(f => f.NavigationName == foreignKeys[0]).FirstOrDefault();
        if (fk == null)
        {
            return "";
        }
        if (foreignKeys.Length == 1)
        {
            return GetViewByForeignNameChain(context, fk.ViewName, "");
        }
        return GetViewByForeignNameChain(context, fk.ViewName, string.Join(".", foreignKeys, 1, foreignKeys.Length - 1));
    }
    string GetPrimKeyFilterForFindIndexMethod(DbContextSerializable context, string ViewName, string srcPrefix, string destPrefix) {
        if ( (context == null) || (string.IsNullOrEmpty(ViewName)) ) {
            return "false";
        }
        ModelViewSerializable model = context.ModelViews.Where(v => v.ViewName == ViewName).FirstOrDefault();
        if (model == null)
        {
            return "false";
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null))
        {
            return "false";
        }
        string result = "";
        foreach(ModelViewKeyPropertySerializable keyProp in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable modelViewPropertyOfVwSerializable = GetScalarPropByOriginaPropName(keyProp.OriginalPropertyName, model);
            if (modelViewPropertyOfVwSerializable != null) {
                string proName = GetTypeScriptPropertyName(modelViewPropertyOfVwSerializable, model);
                if(result != "") {
                    result += " && ";
                }
                result += "("+ srcPrefix + "." + proName + " === " + destPrefix + "." + proName + ")";
            }
        }
        if (result == "") {
            return "false";
        }
        return result;
    }

    string GetControlListPropertyName(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return "NoName";
        }
        ModelViewSerializable mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (mv == null)
        {
            return "NoName";
        }
        ModelViewPropertyOfVwSerializable propForSel =
            mv.ScalarProperties.Where(p => (string.IsNullOrEmpty(p.ForeignKeyNameChain) && p.OriginalPropertyName == prop.OriginalPropertyName)).FirstOrDefault();
        if (propForSel == null) {
            return "NoName";
        }
        return GetTypeScriptPropertyName(propForSel, mv);
    }

    ModelViewSerializable
        GetViewForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType){
        if ((prop == null) || (model == null) || (context == null)) {
            return null;
        }
        string viewNameForSel = "";
        switch(inputType) {
            case 1: // add
                viewNameForSel = prop.ForeifKeyViewNameForAdd;
                break;
            case 2: // Upd
                viewNameForSel = prop.ForeifKeyViewNameForUpd;
                break;
            default: // Del == 3 
                viewNameForSel = prop.ForeifKeyViewNameForDel;
                break;
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, prop.ForeignKeyNameChain);
        }
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return null;
        }
        return context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
    }

    string GetViewNameForControlList(ModelViewUIFormPropertySerializable prop, ModelViewSerializable model, DbContextSerializable context, int inputType) {
        ModelViewSerializable mv =
            GetViewForControlList(prop, model, context, inputType);
        if (mv == null)
        {
            return "NoName";
        }
        return mv.ViewName;
    }

    List<ModelViewPropertyOfVwSerializable> GetModelPrimaryKeyProps(ModelViewSerializable model) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if (model == null)
        {
            return result;
        }
        if ((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable prop = GetScalarPropByOriginaPropName(modelViewKeyPropertySerializable.OriginalPropertyName, model);
            if(prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }

    List<ModelViewPropertyOfVwSerializable> GetPrimaryKeyProps(DbContextSerializable context, string viewName) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((context == null) || string.IsNullOrEmpty(viewName)) {
            return result;
        }
        return GetModelPrimaryKeyProps( context.ModelViews.Where(v => v.ViewName == viewName).FirstOrDefault() );
    }



    List<string> GetFKViewsList(ModelViewSerializable model, 
                                     DbContextSerializable context,
                                     List<string> fkViewsDict)
    {
        if ((model == null) || (context == null) || (fkViewsDict == null)) {
            return fkViewsDict;
        }
        if (model.ScalarProperties == null || model.UIFormProperties == null) {
            return fkViewsDict;
        }
        string viewNameForSel = null;
        ModelViewSerializable mv = null;
        foreach(ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable in model.UIFormProperties) {
            if ((modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenAdd == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForAdd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenUpdate == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForUpd;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
            if ((modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                (modelViewUIFormPropertySerializable.InputTypeWhenDelete == InputTypeEnum.Typeahead)) {
                viewNameForSel = modelViewUIFormPropertySerializable.ForeifKeyViewNameForDel;
                if (string.IsNullOrEmpty(viewNameForSel)) {
                    viewNameForSel = GetViewByForeignNameChain(context, model.ViewName, modelViewUIFormPropertySerializable.ForeignKeyNameChain);
                }
                if (!string.IsNullOrEmpty(viewNameForSel)) {
                    mv = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
                    if (mv != null) {
                        if( ! fkViewsDict.Contains(viewNameForSel) ) {
                            fkViewsDict.Add(viewNameForSel);
                        }
                    }
                }
            }
        }
        return fkViewsDict;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDirectMasters(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string viewNameForSel = GetViewNameForControlList(prop, model, context, inputType);
        if (string.IsNullOrEmpty(viewNameForSel)) {
            return result;
        }
        ModelViewSerializable modelViewSerializable = context.ModelViews.Where(v => v.ViewName == viewNameForSel).FirstOrDefault();
        if (modelViewSerializable == null)
        {
            return result;
        }
        if (modelViewSerializable.ForeignKeys == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            foreignKeyNameChain = "";
        } else {
            foreignKeyNameChain += ".";
        }
        foreach(ModelViewForeignKeySerializable modelViewForeignKeySerializable in modelViewSerializable.ForeignKeys) {
            if (!string.IsNullOrEmpty(modelViewForeignKeySerializable.ViewName)) {
                string fltFKNameChain = foreignKeyNameChain + modelViewForeignKeySerializable.NavigationName;
                List<ModelViewUIFormPropertySerializable> propLst = null;
                switch(inputType) {
                    case 1:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 2:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    case 3:
                        propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                                   ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                                    (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                        break;
                    default:
                        break;
                }
                if (propLst != null) {
                    result.AddRange(propLst);
                }
            }
        }
        return result;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDependentScalarProps(ModelViewUIFormPropertySerializable prop,
                                ModelViewSerializable model, 
                                DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ((prop == null) || (model == null) || (context == null)) {
            return result;
        }
        if (model.UIFormProperties == null)  {
            return result;
        }
        if(!HasInitMethodForInputMode(prop, model, inputType)) {
            return result;
        }
        string currentPropChain = string.IsNullOrEmpty(prop.ForeignKeyNameChain) ? "" : prop.ForeignKeyNameChain;
        List<ModelViewUIFormPropertySerializable> masters = GetDirectMasters(prop, model, context, inputType);
        foreach(ModelViewUIFormPropertySerializable dependentProp in model.UIFormProperties) {
            if(prop.ViewPropertyName == dependentProp.ViewPropertyName) {
                result.Add(dependentProp);
                continue;
            }
            if(HasInitMethodForInputMode(dependentProp, model, inputType)) {
                continue;
            }
            string dependentPropChain = string.IsNullOrEmpty(dependentProp.ForeignKeyNameChain) ? "" :  dependentProp.ForeignKeyNameChain;
            if(dependentPropChain == currentPropChain) {
                result.Add(dependentProp);
                continue;
            }
            string locCurrentPropChain = currentPropChain;
            if (!string.IsNullOrEmpty(locCurrentPropChain)) locCurrentPropChain += ".";
            if (!dependentPropChain.StartsWith(locCurrentPropChain)) {
                continue;
            }
            if (!masters.Where(p => dependentPropChain.StartsWith(p.ForeignKeyNameChain)).Any()) {
                result.Add(dependentProp);
            }
        }
        return result;
    }

    List<ModelViewUIFormPropertySerializable> 
        GetDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context, int inputType) {
        List<ModelViewUIFormPropertySerializable> result = new List<ModelViewUIFormPropertySerializable>();
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        string fltFKNameChain  = string.Join(".", foreignKeys, 0, foreignKeys.Length - 1);
        List<ModelViewUIFormPropertySerializable> propLst = null;
        switch(inputType) {
            case 1:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenAdd == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenAdd == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 2:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenUpdate == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenUpdate == InputTypeEnum.SearchDialog))).ToList();
                break;
            case 3:
                propLst = model.UIFormProperties.Where(p => (p.ForeignKeyNameChain == fltFKNameChain) &&
                            ((p.InputTypeWhenDelete == InputTypeEnum.Combo) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.Typeahead) ||
                            (p.InputTypeWhenDelete == InputTypeEnum.SearchDialog))).ToList();
                break;
            default:
                break;
        }
        if (propLst != null) {
            return propLst;
        }
        return result;
    }

    bool MustHaveDirectDetails(ModelViewUIFormPropertySerializable prop,
                         ModelViewSerializable model, 
                         DbContextSerializable context) {
        bool result = false;
        if ( (prop == null) || (model == null) || (context == null) ) {
            return result;
        }
        if (model.UIFormProperties == null) {
            return result;
        }
        string foreignKeyNameChain  = prop.ForeignKeyNameChain;
        if (string.IsNullOrEmpty(foreignKeyNameChain)) {
            return result;
        }
        string[] foreignKeys = foreignKeyNameChain.Split(new string[] { "." }, StringSplitOptions.None);
        if (foreignKeys.Length < 2) {
            return result;
        }
        return true;
    }

    string GetPrimKeyVarName(ModelViewPropertyOfVwSerializable pkpModelViewUIFormPropertySerializable) {
        return "pkp" + pkpModelViewUIFormPropertySerializable.ViewPropertyName;
    }

    ModelViewPropertyOfVwSerializable GetOnValChangeViewPropName(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable, ModelViewUIFormPropertySerializable dependentScalarProp, int inputType) {
        if(dependentScalarProp == null) {
            return null;
        }
        ModelViewSerializable view = GetViewForControlList(modelViewUIFormPropertySerializable, model, context, inputType);
        if(view == null) {
            return null;
        }
        string foreignKeyNameChain = 
            string.IsNullOrEmpty(modelViewUIFormPropertySerializable.ForeignKeyNameChain) ? "" : modelViewUIFormPropertySerializable.ForeignKeyNameChain;
        
        
        string dependentForeignKeyNameChain = 
            (string.IsNullOrEmpty(dependentScalarProp.ForeignKeyNameChain) ? "" : dependentScalarProp.ForeignKeyNameChain);
        if (foreignKeyNameChain == dependentForeignKeyNameChain) {
            dependentForeignKeyNameChain = "";
        } else {
            if (foreignKeyNameChain != "") {
              foreignKeyNameChain += ".";
              dependentForeignKeyNameChain = dependentForeignKeyNameChain.Replace(foreignKeyNameChain, "");
            }
        }
        if (string.IsNullOrEmpty(dependentForeignKeyNameChain)) {
            return
                view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
        }
        return
            view.ScalarProperties.Where(p => (p.OriginalPropertyName == dependentScalarProp.OriginalPropertyName) && (p.ForeignKeyNameChain == dependentForeignKeyNameChain)).FirstOrDefault();
    }
    
    bool HasOnValChangedMethod(DbContextSerializable context, ModelViewSerializable model,
                                ModelViewUIFormPropertySerializable modelViewUIFormPropertySerializable) {
        bool result = false;
        for (int inputType = 1 ; inputType < 4; inputType++) {
            result = 
                (GetDirectDetails(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0) ||
                (GetDependentScalarProps(modelViewUIFormPropertySerializable, model, context, inputType).Count > 0);
            if (result) {
                return result;
            }
        }
        return result;
    }
    string GetCommonServiceClassName(DbContextSerializable context, string fileType) {
        string result="";
        if ((context == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (context.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            context.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return sb.ToString();
    }

    List<ModelViewPropertyOfVwSerializable> GetPropsByForeignKey(ModelViewSerializable model, ModelViewForeignKeySerializable foreignKey) {
        List<ModelViewPropertyOfVwSerializable> result= new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (foreignKey == null)) {
            return result;
        }
        if (foreignKey.PrincipalKeyProps == null || foreignKey.ForeignKeyProps == null || model.ScalarProperties == null) {
            return result;
        }
        if ((foreignKey.PrincipalKeyProps.Count != foreignKey.ForeignKeyProps.Count) || (foreignKey.ForeignKeyProps.Count < 1)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.PrincipalKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && (foreignKey.NavigationName == p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        foreach(ModelViewKeyPropertySerializable fkProp in foreignKey.ForeignKeyProps) {
            ModelViewPropertyOfVwSerializable prop = 
                model.ScalarProperties.Where(p => (p.OriginalPropertyName == fkProp.OriginalPropertyName) && string.IsNullOrEmpty(p.ForeignKeyNameChain)).FirstOrDefault();
            if (prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }
    
    List<ModelViewPropertyOfVwSerializable> GetModelUniqueKeyProps(ModelViewSerializable model, ModelViewUniqueKeySerializable uk) {
        List<ModelViewPropertyOfVwSerializable> result = new List<ModelViewPropertyOfVwSerializable>();
        if ((model == null) || (uk == null))
        {
            return result;
        }
        if ((uk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) {
            return result;
        }
        foreach(ModelViewKeyPropertySerializable modelViewKeyPropertySerializable in uk.UniqueKeyProperties) {
            ModelViewPropertyOfVwSerializable prop = GetScalarPropByOriginaPropName(modelViewKeyPropertySerializable.OriginalPropertyName, model);
            if(prop != null) {
                result.Add(prop);
            }
        }
        return result;
    }

    List<ModelViewUniqueKeyOfVwSerializable> GetModelUniqueKeys(ModelViewSerializable model, List<ModelViewUniqueKeyOfVwSerializable> rsltKeys) {
        if((model == null) || (rsltKeys == null)) return rsltKeys;
        if ((model.UniqueKeys == null) || (model.ScalarProperties == null)) return rsltKeys;
        foreach(ModelViewUniqueKeySerializable uk in model.UniqueKeys) {
            if(uk.UniqueKeyProperties == null) continue;
            if(uk.UniqueKeyProperties.Count < 1) continue;
            List<ModelViewPropertyOfVwSerializable> ukprops = GetModelUniqueKeyProps(model, uk);
            if (ukprops.Count == uk.UniqueKeyProperties.Count) {
                rsltKeys.Add( new ModelViewUniqueKeyOfVwSerializable() {
                    UniqueKeyName = uk.UniqueKeyName,
                    IsPrimary = false,
                    UniqueKeyProperties = ukprops
                });
            }
        }
        return rsltKeys;
    }

    ModelViewUniqueKeyOfVwSerializable GetModelPrimaryKey(ModelViewSerializable model) {
        if (model == null)  return null;
        if (model.PrimaryKeyProperties == null) return null;
        if (model.PrimaryKeyProperties.Count < 1) return null;
        List<ModelViewPropertyOfVwSerializable> props = GetModelPrimaryKeyProps(model);
        if(props.Count != model.PrimaryKeyProperties.Count) return null;
        return new ModelViewUniqueKeyOfVwSerializable() {
            UniqueKeyName = null,
            IsPrimary = true,
            UniqueKeyProperties = props
        };
    }
    bool CheckModelIfIndexIsCorrect(ModelViewSerializable model,ModelViewUniqueKeyOfVwSerializable indx, out string error) {
        if((model == null) || (indx == null)) {
            error = "Input params is not defined";
            return false;
        }
        if(indx.UniqueKeyProperties == null) {
            error = "UniqueKeyProperties of the Index are not defined";
            return false;
        }
        if(indx.UniqueKeyProperties.Count < 1) {
            if(indx.IsPrimary)
                error = "UniqueKeyProperties.Count of the Primary Index is less than 1";
            else 
                error = "UniqueKeyProperties.Count of the Unique Index (UniqueKeyName == "+ indx.UniqueKeyName + ") is less than 1";
            return false;
        }

        if(indx.IsPrimary) {
            if(model.PrimaryKeyProperties == null) {
                error = "PrimaryKeyProperties of the model are not defined";
                return false;
            }
            if (model.PrimaryKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Index fields are included in the Model";
                return false;
            }
        } else {
            if(model.UniqueKeys == null) {
                error = "UniqueKeys of the model are not defined (UniqueKeyName == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(string.IsNullOrEmpty(indx.UniqueKeyName)) {
                error = "The Name of the Index is not defined (UniqueKeyName)";
                return false;
            }
            ModelViewUniqueKeySerializable mindx = model.UniqueKeys.Where(i => i.UniqueKeyName == indx.UniqueKeyName).FirstOrDefault();
            if(mindx == null) {
                error = "Could not find index in model by name (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(mindx.UniqueKeyProperties == null) {
                error = "UniqueKeyProperties of the Unique Index (Unique Index Name == "+ indx.UniqueKeyName + ") are not defined";
                return false;
            }
            if(mindx.UniqueKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Unique Index fields are included in the Model (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
        }
        error = "";
        return true;
    }
////////////////////////////////////////////////////////
    ModelViewPropertyOfVwSerializable GetScalarPropByOriginaPropName(string origPropName, ModelViewSerializable model) { 
        if (string.IsNullOrEmpty(origPropName) || (model == null)) return null;
        if ((model.AllProperties == null) || (model.ScalarProperties == null)) return null;
        ModelViewPropertyOfVwSerializable sprop = model.ScalarProperties.Where(p => 
                (p.OriginalPropertyName == origPropName) && 
                string.IsNullOrEmpty(p.ForeignKeyName)).FirstOrDefault();
        if(sprop != null) return sprop;
        if(model.ForeignKeys == null) return null;
        if(model.ForeignKeys.Count < 1) return null;
        foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
            if ((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) continue;
            if ((fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1)) continue;
            for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
                if(fk.ForeignKeyProps[i].OriginalPropertyName == origPropName) {
                    sprop = model.ScalarProperties.Where(p => 
                        (p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && 
                        (p.ForeignKeyName == fk.NavigationName) && 
                        (p.ForeignKeyName == p.ForeignKeyNameChain)
                    ).FirstOrDefault();
                    if(sprop != null) return sprop;
                }
            }
        }
        return null;
    }
    bool IsTableMatchesIndex(ModelViewSerializable model) {
        if (model == null)  return false;
        if ((model.ScalarProperties == null) || (model.PrimaryKeyProperties == null)) return false;
        if ((model.ScalarProperties.Count != model.PrimaryKeyProperties.Count) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable pkp in model.PrimaryKeyProperties) {
             if(GetScalarPropByOriginaPropName(pkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToTailOfPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        for(int i = 0; i < fk.ForeignKeyProps.Count; i++) {
            if (fk.ForeignKeyProps[fk.ForeignKeyProps.Count - (1 + i)].OriginalPropertyName != model.PrimaryKeyProperties[model.PrimaryKeyProperties.Count - (1 + i)].OriginalPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalars(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.ScalarProperties == null) || (fk.ForeignKeyProps == null)) return false;
        if (fk.ForeignKeyProps.Count < 1) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
             if(GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, model) == null) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsEx(ModelViewForeignKeySerializable detailFk, ModelViewSerializable detailModel, ModelViewSerializable model) {
        if ((detailModel == null) || (detailFk == null) || (model == null)) return false;
        if ((detailModel.ScalarProperties == null) || (detailFk.ForeignKeyProps == null) || (model.ScalarProperties == null) || (detailFk.PrincipalKeyProps == null) || (model.PrimaryKeyProperties == null)) return false;
        if ((detailFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1) || (model.PrimaryKeyProperties.Count != detailFk.ForeignKeyProps.Count) || (detailFk.PrincipalKeyProps.Count != detailFk.ForeignKeyProps.Count) || (model.PrimaryKeyProperties.Count != detailFk.ForeignKeyProps.Count)) return false;
        for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
             ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
             if(detailsprp == null) return false;
             ModelViewPropertyOfVwSerializable modelsprp = GetScalarPropByOriginaPropName(detailFk.PrincipalKeyProps[i].OriginalPropertyName, model);
             if(modelsprp == null) return false;
             if(modelsprp.ViewPropertyName != detailsprp.ViewPropertyName) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToScalarsExEx(ModelViewForeignKeySerializable detailFk, ModelViewSerializable detailModel, ModelViewSerializable model) {
        if ((detailModel == null) || (detailFk == null) || (model == null)) return false;
        if ((detailModel.ScalarProperties == null) || (detailFk.ForeignKeyProps == null) || (model.ScalarProperties == null) || (detailFk.PrincipalKeyProps == null) || (model.ForeignKeys == null)) return false;
        if ((detailFk.ForeignKeyProps.Count < 1) || (model.ScalarProperties.Count < 1) || (detailFk.PrincipalKeyProps.Count != detailFk.ForeignKeyProps.Count)) return false;
        List<ModelViewForeignKeySerializable> modelFks =  model.ForeignKeys.Where(f => f.ViewName == detailFk.ViewName).ToList();
        if(modelFks.Count < 1) return false;
        for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
             ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
             if(detailsprp == null) return false;
        }
        foreach(ModelViewForeignKeySerializable modelFk in modelFks) {
            if(modelFk.ForeignKeyProps == null) continue;
            if(modelFk.ForeignKeyProps.Count != detailFk.ForeignKeyProps.Count) continue;
            bool passed = false;
            for(int i = 0; i < detailFk.ForeignKeyProps.Count; i++) {
                 ModelViewPropertyOfVwSerializable detailsprp = GetScalarPropByOriginaPropName(detailFk.ForeignKeyProps[i].OriginalPropertyName, detailModel);
                 ModelViewPropertyOfVwSerializable modelsprp = GetScalarPropByOriginaPropName(modelFk.ForeignKeyProps[i].OriginalPropertyName, model);
                 passed = modelsprp != null;
                 if(!passed) break;
                 passed = modelsprp.ViewPropertyName == detailsprp.ViewPropertyName;
                 if(!passed) break;
            }
            if (passed) return true;
        }
        return false;
    }
    bool IsOnePropForeigKey(ModelViewForeignKeySerializable searchFk) {
        if(searchFk == null) return false;
        if((searchFk.PrincipalKeyProps == null) || (searchFk.ForeignKeyProps == null )) return false;
        if((searchFk.PrincipalKeyProps.Count == searchFk.ForeignKeyProps.Count) && (searchFk.ForeignKeyProps.Count == 1)) return true;
        return false;
    }
    bool IsLookUpTable(ModelViewSerializable searchMdl) {
        if (searchMdl == null) return false;
        if ((searchMdl.ScalarProperties == null) || (searchMdl.PrimaryKeyProperties == null) || (searchMdl.UniqueKeys == null)) return false;
        if ((searchMdl.ScalarProperties.Count != 2) || (searchMdl.PrimaryKeyProperties.Count != 1) || (searchMdl.UniqueKeys.Count != 1)) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties == null) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties.Count != 1) return false;
        if (searchMdl.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName == searchMdl.PrimaryKeyProperties[0].OriginalPropertyName) return false;
        if ((GetScalarPropByOriginaPropName(searchMdl.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, searchMdl) == null) ||
            (GetScalarPropByOriginaPropName(searchMdl.PrimaryKeyProperties[0].OriginalPropertyName, searchMdl) == null)) return false;
        return true;
    }
    bool IsUniqKeyMapedToScalarsEx(ModelViewUniqueKeySerializable searchUk, ModelViewSerializable searchModel, ModelViewSerializable model) {
        if ((searchModel == null) || (searchUk == null) || (model == null)) return false;
        if ((searchModel.ScalarProperties == null) || (searchUk.UniqueKeyProperties == null) || (model.ScalarProperties == null)) return false;
        if ((searchUk.UniqueKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return false;
        foreach(ModelViewKeyPropertySerializable ukp in searchUk.UniqueKeyProperties) {
             ModelViewPropertyOfVwSerializable sprp = GetScalarPropByOriginaPropName(ukp.OriginalPropertyName, searchModel);
             if(sprp == null) return false;
             if(!model.ScalarProperties.Any(p => p.ViewPropertyName == sprp.ViewPropertyName)) return false;
        }
        return true;
    }
    bool IsForeigKeyMapedToPrimKey(ModelViewForeignKeySerializable fk, ModelViewSerializable model) {
        if ((model == null) || (fk == null)) return false;
        if ((model.PrimaryKeyProperties == null) || (model.ForeignKeys == null) || (fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return false;
        if ((model.PrimaryKeyProperties.Count < 1) || (fk.PrincipalKeyProps.Count != fk.ForeignKeyProps.Count) || (fk.ForeignKeyProps.Count < 1) || (fk.ForeignKeyProps.Count >= model.PrimaryKeyProperties.Count) ) return false;
        foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
            if( !model.PrimaryKeyProperties.Any(p => p.OriginalPropertyName == fkp.OriginalPropertyName) ) return false;
        }
        return true;
    }
    bool IsForeigKeyWithCorrectPropsOrder(ModelViewForeignKeySerializable otherFk, ModelViewSerializable m2mMdl) {
        if ((m2mMdl == null) || (otherFk == null)) return false;
        if ((m2mMdl.PrimaryKeyProperties == null) || (otherFk.ForeignKeyProps == null)) return false;
        if ((m2mMdl.PrimaryKeyProperties.Count < 1) || (otherFk.ForeignKeyProps.Count < 1)) return false;
        List<int> positions = new List<int>();
        foreach(ModelViewKeyPropertySerializable fkp in otherFk.ForeignKeyProps) {
            int index = m2mMdl.PrimaryKeyProperties.FindIndex(delegate(ModelViewKeyPropertySerializable pkp) { return pkp.OriginalPropertyName == fkp.OriginalPropertyName; });
            if(index < 0) return false;
            positions.Add(index);
        }
        positions.Sort();
        for(int i = 0; i < positions.Count-1; i++) {
            if(positions[i] + 1 != positions[i+1]) return false;
        }
        return true;
    }
    int GetForeigKeyMaxPropsPosition(ModelViewForeignKeySerializable otherFk, ModelViewSerializable m2mMdl) {
        if ((m2mMdl == null) || (otherFk == null)) return -1;
        if ((m2mMdl.PrimaryKeyProperties == null) || (otherFk.ForeignKeyProps == null)) return -1;
        if ((m2mMdl.PrimaryKeyProperties.Count < 1) || (otherFk.ForeignKeyProps.Count < 1)) return -1;
        int rslt = 0;
        foreach(ModelViewKeyPropertySerializable fkp in otherFk.ForeignKeyProps) {
            int index = m2mMdl.PrimaryKeyProperties.FindIndex(delegate(ModelViewKeyPropertySerializable pkp) { return pkp.OriginalPropertyName == fkp.OriginalPropertyName; });
            if(index < 0) return -1;
            if(rslt < index) rslt = index;
        }
        return rslt;
    }
    List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> GetSearchResources(ModelViewSerializable model, DbContextSerializable context) {
        if ((context == null) || (model == null)) return null;
        if ((context.ModelViews == null) || (model.PrimaryKeyProperties == null) || (model.ScalarProperties == null) ) return null;
        if ((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return null;
        List<ModelViewSerializable> m2mMdls = context.ModelViews.Where(p => (p.ForeignKeys.Any(f => f.ViewName == model.ViewName) && (p.ForeignKeys.Count > 1))).ToList();
        if(m2mMdls.Count < 1) {
            return null;
        }
        // m2mModel, m2mForeignKey, List<Tuple< model.ForeignKey, m2mModel.additionalForeignKey >>, searchModel, searchFk, searchUk, ukpropsMpt, ukpropsToFrgn
        List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>> result = null;
        foreach(ModelViewSerializable m2mMdl in m2mMdls) {
            if (!IsTableMatchesIndex(m2mMdl)) {
                continue;
            }
            List<ModelViewForeignKeySerializable> m2mFks = m2mMdl.ForeignKeys.Where(f => f.ViewName == model.ViewName).ToList();
            foreach(ModelViewForeignKeySerializable m2mFk in m2mFks) {
                if(!IsForeigKeyMapedToTailOfPrimKey(m2mFk, m2mMdl)) continue;
                if(!IsForeigKeyMapedToScalarsEx(m2mFk, m2mMdl, model)) continue;
                // m2mMdl - m2mModel, m2mFk - m2mForeignKey,
                List<KeyValuePair<ModelViewForeignKeySerializable,int>> searchFks = null;
                List<int> searchFkPosition = null;
                foreach(ModelViewForeignKeySerializable searchFk in m2mMdl.ForeignKeys) {
                    if (m2mFk == searchFk) continue;
                    if (!IsOnePropForeigKey(searchFk)) continue;
                    ModelViewSerializable searchMdl = context.ModelViews.Where(mv => (mv.ViewName == searchFk.ViewName)).FirstOrDefault();
                    if (searchMdl == null) continue;
                    if (!IsLookUpTable(searchMdl)) continue;
                    if (!IsUniqKeyMapedToScalarsEx(searchMdl.UniqueKeys[0], searchMdl, model)) continue;
                    if (searchFks == null) searchFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    searchFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>( searchFk, GetForeigKeyMaxPropsPosition(searchFk, m2mMdl) ));
                }
                if(searchFks == null) {
                    continue;
                }
                int lastValidPosition = m2mMdl.PrimaryKeyProperties.Count - model.PrimaryKeyProperties.Count - 1;
                if(searchFks != null) {
                    if(searchFks.Any(p => p.Value < 0)) continue;
                    searchFks = searchFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < searchFks.Count-1; i++) {
                        IsCorrect = searchFks[i].Value == searchFks[i+1].Value - 1;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) {
                        continue;
                    }
                    if(searchFks[searchFks.Count-1].Value != lastValidPosition) { 
                        continue;
                    }
                    lastValidPosition = searchFks[0].Value - 1;
                }
                

                List<KeyValuePair<ModelViewForeignKeySerializable,int>> otherFks = null;
                foreach(ModelViewForeignKeySerializable otherFk in m2mMdl.ForeignKeys) {
                    if (m2mFk == otherFk) continue;
                    if (searchFks != null) {
                        if(searchFks.Any(p => p.Key == otherFk)) continue;
                    }
                    if(!IsForeigKeyMapedToPrimKey(otherFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalarsExEx(otherFk, m2mMdl, model)) continue;
                    if(!IsForeigKeyWithCorrectPropsOrder(otherFk, m2mMdl)) continue;
                    int mxPs = GetForeigKeyMaxPropsPosition(otherFk, m2mMdl);
                    if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
                    if(otherFks == null) otherFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    otherFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(otherFk, mxPs));
                }
                if(otherFks != null) {
                    otherFks = otherFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < otherFks.Count-1; i++) {
                        IsCorrect = otherFks[i].Value == otherFks[i+1].Value - otherFks[i].Key.ForeignKeyProps.Count;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) continue;
                    if(otherFks[otherFks.Count-1].Value != lastValidPosition) 
                        continue;
                    lastValidPosition = otherFks[0].Value - otherFks[0].Key.ForeignKeyProps.Count;
                }
                

                List<KeyValuePair<ModelViewForeignKeySerializable,int>> externalFks = null;
                foreach(ModelViewForeignKeySerializable externalFk in m2mMdl.ForeignKeys) {
                    if (externalFk == m2mFk) continue;
                    if (searchFks != null) {
                        if(searchFks.Any(p => p.Key == externalFk)) continue;
                    }
                    if (otherFks != null) {
                        if(otherFks.Any(p => p.Key == externalFk)) continue;
                    }
                    if(!IsForeigKeyMapedToPrimKey(externalFk, m2mMdl)) continue;
                    if(!IsForeigKeyMapedToScalars(externalFk, m2mMdl)) continue;
                    if(!IsForeigKeyWithCorrectPropsOrder(externalFk, m2mMdl)) continue;
                    int mxPs = GetForeigKeyMaxPropsPosition(externalFk, m2mMdl);
                    if((mxPs < 0) || (mxPs > lastValidPosition)) continue;
                    if(externalFks == null) externalFks = new List<KeyValuePair<ModelViewForeignKeySerializable,int>>();
                    externalFks.Add(new KeyValuePair<ModelViewForeignKeySerializable,int>(externalFk, mxPs));
                }
                if(externalFks != null) {
                    externalFks = externalFks.OrderBy(p => p.Value).ToList();
                    bool IsCorrect = true;
                    for(int i = 0; i < externalFks.Count-1; i++) {
                        IsCorrect = externalFks[i].Value == externalFks[i+1].Value - externalFks[i].Key.ForeignKeyProps.Count;
                        if(!IsCorrect) break;
                    }
                    if(!IsCorrect) continue;
                    if(externalFks[externalFks.Count-1].Value != lastValidPosition) continue;
                    lastValidPosition = externalFks[0].Value - externalFks[0].Key.ForeignKeyProps.Count;
                }
                if(lastValidPosition != -1) continue;
                int AllFkCount = (searchFks == null ? 0 : searchFks.Count) +
                                (otherFks == null ? 0 : otherFks.Count) +
                                (externalFks == null ? 0 : externalFks.Count);
                if (AllFkCount != (m2mMdl.ForeignKeys.Count - 1)) continue;
                if(result == null) {
                    result = new List<Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>>();
                }
                result.Add(new Tuple<ModelViewSerializable, ModelViewForeignKeySerializable, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>, List<KeyValuePair<ModelViewForeignKeySerializable,int>>>(
                    m2mMdl, m2mFk, searchFks, otherFks, externalFks
                ));
            }
        }
        return result;
    }
    ModelViewPropertyOfVwSerializable GetModelScalarPropByKeyProp(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable rslt = null;
        if ((model == null) || (pk == null)) return null;
        if (model.ScalarProperties == null) return null;
        if (model.AllProperties == null) return null;
        ModelViewEntityPropertySerializable aprop = model.AllProperties.Where(p => p.OriginalPropertyName == pk.OriginalPropertyName).FirstOrDefault();
        if(aprop == null) return null;
        ModelViewPropertyOfVwSerializable scProp = 
            model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
        if (scProp != null) return scProp;
        if (model.ForeignKeys != null) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                scProp = null;
                if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                    int cnt = fk.ForeignKeyProps.Count;
                    if (cnt < fk.PrincipalKeyProps.Count)
                    {
                        cnt = fk.PrincipalKeyProps.Count;
                    }
                    for(int i = 0; i < cnt; i++)
                    {
                        if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                        {
                            scProp=
                                model.ScalarProperties.Where(p =>
                                ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                        }
                        if(scProp != null) return scProp;
                    }
                }
            }
        }
        return null;
    }
    ModelViewSerializable GetViewByName(DbContextSerializable context, string viewName) {
        if(context == null) return null;
        return context.ModelViews.Where(p => p.ViewName == viewName).FirstOrDefault();
    }
    ModelViewPropertyOfVwSerializable GetFirstPropOfFirstUniqueKey(ModelViewSerializable model) {
        if(model == null) return null;
        if(model.UniqueKeys == null) return null;
        if(model.UniqueKeys.Count < 1) return null;
        if(model.UniqueKeys[0].UniqueKeyProperties == null) return null;
        if(model.UniqueKeys[0].UniqueKeyProperties.Count < 1) return null;
        return GetScalarPropByOriginaPropName(model.UniqueKeys[0].UniqueKeyProperties[0].OriginalPropertyName, model);
    }

    bool IsUsebByForeignKey(ModelViewSerializable model, ModelViewPropertyOfVwSerializable sclProp) {
        if ((model == null) || (sclProp == null)) return false;
        if (model.ForeignKeys == null) return false;
        if (!string.IsNullOrEmpty(sclProp.ForeignKeyName)) return true;
        return model.ForeignKeys.Any(f => f.ForeignKeyProps.Any(p => p.OriginalPropertyName == sclProp.OriginalPropertyName) );
    }

    string GetRequiredForeignKeyProps(ModelViewUniqueKeyOfVwSerializable ukofVm, ModelViewSerializable model) {
        if ((model == null) || (ukofVm == null)) return null;
        if (ukofVm.UniqueKeyProperties == null)    return null;
        if (model.ForeignKeys == null) return "[]";
        if(ukofVm.IsPrimary) {
            if(model.PrimaryKeyProperties == null) return null;
        } else {
            if(model.UniqueKeys.Where(u => u.UniqueKeyName == ukofVm.UniqueKeyName).FirstOrDefault() == null) return null;
        }

        int k = -1;
        List<ModelViewForeignKeySerializable>  tmpfklst = null;
        List<ModelViewForeignKeySerializable>  fklst = new List<ModelViewForeignKeySerializable>();
        for(int i = 0; i < ukofVm.UniqueKeyProperties.Count; i++) {
            ModelViewPropertyOfVwSerializable scPrp = ukofVm.UniqueKeyProperties[i];
            if(string.IsNullOrEmpty( scPrp.ForeignKeyName )) {
                tmpfklst = model.ForeignKeys.Where(f => f.ForeignKeyProps.Any(p => (p.OriginalPropertyName == scPrp.OriginalPropertyName))).ToList();
            } else {
                if(scPrp.ForeignKeyNameChain != scPrp.ForeignKeyName) return null; // this is incorrect data
                tmpfklst = model.ForeignKeys.Where(f => f.NavigationName == scPrp.ForeignKeyName).ToList();
            }
            if(tmpfklst.Count < 1) {
                if (fklst.Count < 1) k = i;
            } else {
                foreach(ModelViewForeignKeySerializable fk in tmpfklst) {
                    if(!fklst.Any(f=>f==fk)) fklst.Add(fk);
                }
            }
        }
        if(k == -1) return null;
        string result = "";
        foreach(ModelViewForeignKeySerializable fk in fklst) {
            foreach(ModelViewKeyPropertySerializable fkp in fk.ForeignKeyProps) {
                ModelViewPropertyOfVwSerializable sp = GetScalarPropByOriginaPropName(fkp.OriginalPropertyName, model);
                if(sp == null) return null;
                int ui = ukofVm.UniqueKeyProperties.IndexOf(sp);
                if(ui < 0) return null;
                if(ui > k) return null;
                if(result == "") {
                   result = sp.ViewPropertyName;
                } else {
                   result = result + "," + sp.ViewPropertyName;
                }
            }
        }
        return "["+ result + "]";
    }
#>
