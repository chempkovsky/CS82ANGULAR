<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#
    bool localize = Context.Localize;

    string appSettingServiceFolder          = "00015-app-glbl-settings.service.ts";
    string appRegisterInterfaceFolder       = "00118-app-glbl-register.interface.ts";
    string appLoginInterfaceFolder          = "00120-app-glbl-login.interface.ts";
    string appChangePasswordInterfaceFolder = "00122-app-glbl-chngpswd.interface.ts";

    string appLoginServiceFolder            = "00130-app-glbl-login.service.ts";

    string appChangePasswordHtmlComponentFolder   = "00144-app-glbl-chngpswd.component.html";
    string appChangePasswordCssComponentFolder    = "00144-app-glbl-chngpswd.component.css";
    string appChangePasswordComponentFolder       = "00144-app-glbl-chngpswd.component.ts";

    string appRegisterModelClassName        = GetModelClassName(Model, appRegisterInterfaceFolder);
    string appLoginModelClassName           = GetModelClassName(Model, appLoginInterfaceFolder);
    string appChangePasswordModelClassName  = GetModelClassName(Model, appChangePasswordInterfaceFolder);
    string appSettingServiceClassName       = GetServiceClassName(Model, appSettingServiceFolder);
    string appLoginServiceClassName         = GetServiceClassName(Model, appLoginServiceFolder);

    string appChangePasswordComponentClassName    = GetComponentClassName(Model, appChangePasswordComponentFolder);

    string appChangePasswordComponentSelectorCommonPart = GetComponentSelectorCommonPart(Model, appChangePasswordComponentFolder);

    string AppearancePropName           = "appearance";
    string ShowErrorMethodName          = "showError";
    string securityServiceName          = "scrtSvr";
    string registerMethodName           = "register";
    string changePasswordMethodName     = "changePassword";
    string AppSettingServicePropName    = "appGlblSettings";
                                
#>
import { Component } from '@angular/core';
import { FormControl, Validators, ValidatorFn, FormGroup, AbstractControl } from '@angular/forms';
import { Router } from '@angular/router';
import { MatFormFieldAppearance } from '@angular/material/form-field';

import { <#= appSettingServiceClassName #> } from '<#= GetFolderName(Model, appSettingServiceFolder, appChangePasswordComponentFolder)#>';
import { <#= appLoginServiceClassName #> } from '<#= GetFolderName(Model, appLoginServiceFolder, appChangePasswordComponentFolder)#>';
import { <#= appChangePasswordModelClassName #> } from '<#= GetFolderName(Model, appChangePasswordInterfaceFolder, appChangePasswordComponentFolder)#>';


@Component({
  selector: 'app-<#= appChangePasswordComponentSelectorCommonPart #>',
  templateUrl: '<#= GetFolderName(Model, appChangePasswordHtmlComponentFolder, appChangePasswordComponentFolder) #>.html',
  styleUrls: ['<#= GetFolderName(Model, appChangePasswordCssComponentFolder, appChangePasswordComponentFolder) #>.css']
})
export class <#= appChangePasswordComponentClassName #> {
<# 
    if(localize) {
#>
    title: string = $localize`:Change Password@@<#= appChangePasswordComponentClassName #>.Change-Password:Change Password`;
<# 
    } else {
#>
    title: string = 'Change Password';
<# 
    }
#>

    cnfPwdhide: boolean = true;
    pwdhide: boolean = true;
    oldpwdhide: boolean = true;
    public <#= AppearancePropName #>: MatFormFieldAppearance = 'outline';
    chngpswdFormGroup: FormGroup;


    constructor(private <#= securityServiceName #>: <#= appLoginServiceClassName #>, protected router: Router, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #> ) {
        this.<#= AppearancePropName #> = this.<#= AppSettingServicePropName #>.<#= AppearancePropName #>;

        this.chngpswdFormGroup =  new FormGroup({});
        let locValidators: ValidatorFn[]; 

        locValidators = [ Validators.required,Validators.minLength(6) ];
        this.chngpswdFormGroup.addControl('oldpassword', new FormControl({ value: null, disabled: false}, locValidators));

        locValidators = [ Validators.required,Validators.minLength(6) ];
        this.chngpswdFormGroup.addControl('newPassword', new FormControl({ value: null, disabled: false}, locValidators));

        locValidators = [ Validators.required,Validators.minLength(6) ];
        this.chngpswdFormGroup.addControl('confirmPassword', new FormControl({ value: null, disabled: false}, locValidators));
    } 
    getErrorMessage(fc: AbstractControl): string {
        return this.<#= AppSettingServicePropName #>.getValidationErrorMessage(fc);
    } 
    doSubmit() {
        if(typeof this.chngpswdFormGroup === 'undefined') return;
        if(this.chngpswdFormGroup === null) return;
        if (this.chngpswdFormGroup.invalid) {
            this.chngpswdFormGroup.markAllAsTouched();
            return;
        }
        if(!(this.chngpswdFormGroup.controls['newPassword'].value === this.chngpswdFormGroup.controls['confirmPassword'].value)) {
            let msg = {
<# 
    if(localize) {
#>
                message: $localize`:New Password and Confirm Password must be identical@@<#= appChangePasswordComponentClassName #>.New-Password-dentical:New Password and Confirm Password must be identical` 
<# 
    } else {
#>
                message: 'New Password and Confirm Password must be identical'
<# 
    }
#>
            };
<# 
    if(localize) {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>($localize`:Input Error@@<#= appChangePasswordComponentClassName #>.Input-Error:Input Error`, msg);
<# 
    } else {
#>
            this.<#= AppSettingServicePropName #>.<#= ShowErrorMethodName #>('Input Error', msg);
<# 
    }
#>
            return;
        }
        let chPwd: <#= appChangePasswordModelClassName #> = {
           OldPassword: this.chngpswdFormGroup.controls['oldpassword'].value,
           NewPassword: this.chngpswdFormGroup.controls['newPassword'].value,
           ConfirmPassword: this.chngpswdFormGroup.controls['confirmPassword'].value,
        }
        this.<#= securityServiceName #>.<#= changePasswordMethodName #>(chPwd)
        .subscribe({
            next: (respdata: any ) => { // success path
                this.router.navigate(['/']);
            },
            error: (error) => { // error path
                this.appGlblSettings.showError('http', error)
            }
        });
    }
    onCancel(){
        this.router.navigate(['/']);
    }
}


<#+
    string GetComponentClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".component","Component");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }
    string GetServiceClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType) ) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".service","Service");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
        }
        return sb.ToString();
    }

    string GetComponentSelectorCommonPart(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        return refItem.FileName.Replace(".component","");
    }
    string GetModelClassName(ModelViewSerializable model, string fileType) {
        string result="";
        if ((model == null) || string.IsNullOrEmpty(fileType)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == fileType).FirstOrDefault();
        if (refItem == null) {
            return result;
        }
        if(string.IsNullOrEmpty(refItem.FileName)) {
            return result;
        }
        string fn = refItem.FileName.Replace(".interface","");
        StringBuilder sb = new StringBuilder();
        bool toUpper = true;
        foreach (char c in fn)
        {
            if( c == '-' )
            {
                toUpper = true;
            } else
            {
                if (toUpper)
                {
                    sb.Append(Char.ToUpper(c));
                    toUpper = false;
                }
                else
                {
                    sb.Append(c);
                }
            }
                
        }
        return "I" + sb.ToString();
    }
    string GetFolderName(ModelViewSerializable model, string refFolder, string currFolder) {
        string result="./";
        if ((model == null) || string.IsNullOrEmpty(refFolder) || string.IsNullOrEmpty(currFolder)) {
            return result;
        }
        if (model.CommonStaffs == null) {
            return result;
        }
        CommonStaffSerializable refItem= 
            model.CommonStaffs.Where(c => c.FileType == refFolder).FirstOrDefault();
        CommonStaffSerializable curItem= 
            model.CommonStaffs.Where(c => c.FileType == currFolder).FirstOrDefault();
        if ((refItem == null) || (curItem == null)) {
            return result;
        }
        string[] refFolders  = new string[] {};
        if(!string.IsNullOrEmpty(refItem.FileFolder)) {
            refFolders  = refItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        string[] currFolders = new string[]{};
        if(!string.IsNullOrEmpty(curItem.FileFolder)) {
            currFolders  = curItem.FileFolder.Split(new string[] { "\\" }, StringSplitOptions.None);
        }
        int refLen = refFolders.Length;
        int currLen = currFolders.Length;
        int minLen = refLen < currLen ? refLen : currLen;
        int cnt= 0;
        for(int i = 0; i < minLen; i++) {
            if ( !refFolders[i].Equals(currFolders[i], StringComparison.OrdinalIgnoreCase) ) break;
            cnt++;
        }
        if(currLen > cnt) {
            result += string.Join("", Enumerable.Repeat("../", currLen - cnt));
        }
        if(refLen > cnt) {
            result += string.Join("/", refFolders, cnt, refLen - cnt) + "/";
        }
        result += refItem.FileName;
        return result;
    }


#>
