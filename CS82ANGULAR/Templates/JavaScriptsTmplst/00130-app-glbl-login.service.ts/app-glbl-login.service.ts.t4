<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    string appSettingServiceFolder          = "00015-app-glbl-settings.service.ts";
    string appRegisterInterfaceFolder       = "00118-app-glbl-register.interface.ts";
    string appLoginInterfaceFolder          = "00120-app-glbl-login.interface.ts";
    string appLoginServiceFolder            = "00130-app-glbl-login.service.ts";
    string appChangePasswordInterfaceFolder = "00122-app-glbl-chngpswd.interface.ts";

    string appRegisterModelClassName        = GetModelClassName(Model, appRegisterInterfaceFolder);
    string appLoginModelClassName           = GetModelClassName(Model, appLoginInterfaceFolder);
    string appChangePasswordModelClassName  = GetModelClassName(Model, appChangePasswordInterfaceFolder);
    string appSettingServiceClassName       = GetServiceClassName(Model, appSettingServiceFolder);
    string appLoginServiceClassName         = GetServiceClassName(Model, appLoginServiceFolder);

    string AppearancePropName           = "appearance";
    string ShowErrorMethodName          = "showError";
    string AppSettingServicePropName    = "appGlblSettings";
#>

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

import { <#= appSettingServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appSettingServiceFolder, appLoginServiceFolder)#>';
import { <#= appRegisterModelClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appRegisterInterfaceFolder, appLoginServiceFolder)#>';
import { <#= appLoginModelClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appLoginInterfaceFolder, appLoginServiceFolder)#>';
import { <#= appChangePasswordModelClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appChangePasswordInterfaceFolder, appLoginServiceFolder)#>';


@Injectable({
  providedIn: 'root'
})
export class <#= appLoginServiceClassName #> {
    serviceUrl: string;  
    constructor(private http: HttpClient, protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>) {
        this.serviceUrl = this.<#= AppSettingServicePropName #>.getSecurityWebApiPrefix();  
    }
    login(usrNm: string, pssWrd: string): Observable<any> {
        
            let rqDt: <#= appLoginModelClassName #> = {
                username: usrNm, 
                password: pssWrd,
                grant_type: 'password'
            };
            return this.http.post<<#= appLoginModelClassName #>>(this.serviceUrl+'token', rqDt); 
        /*
        let params: HttpParams  = new HttpParams();
        params = params.append('username', usrNm);
        params = params.append('password', pssWrd);
        params = params.append('grant_type', 'password');
        return this.http.post(this.serviceUrl+'token', params.toString());
        */
    }
    register(rqDt: <#= appRegisterModelClassName #>): Observable<any> {
        return this.http.post<<#= appLoginModelClassName #>>(this.serviceUrl+'api/Account/Register', rqDt); 
    }
    logout(): Observable<any> {
        return this.http.post(this.serviceUrl+'api/Account/Logout', null); 
    }
    changePassword(chPwd: <#= appChangePasswordModelClassName #>): Observable<any> {
        return this.http.post<<#= appChangePasswordModelClassName #>>(this.serviceUrl+'api/Account/ChangePassword', chPwd); 
    }
    getPermissions() {
        let str: string = this.<#= AppSettingServicePropName #>.getPermissionWebApiPrefix();  
        return this.http.get<{modelName: string, userPerms: number}[]>(str+'api/aspnetuserpermsviewwebapi/getall');
    }
}

