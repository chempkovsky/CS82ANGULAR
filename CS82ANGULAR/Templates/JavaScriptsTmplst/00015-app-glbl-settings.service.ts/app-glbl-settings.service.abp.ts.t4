<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="ts" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable.Angular" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.Angular.AngularJson" name="AngularJsonFile" #>
<#@ include file="..\..\CommonScripts\ContextLevel.t4" #>
<#

    bool localize = Context.Localize;

    string appSettingServiceFolder      = "00015-app-glbl-settings.service.ts";
    string appSettingServiceClassName   = GetServiceClassName(Model, appSettingServiceFolder);
    string appConfigServiceFolder       = "00014-app-config.service.ts";
    string appConfigServiceClassName    = GetServiceClassNameWithAnglr(AngularJsonFile,Model, appConfigServiceFolder, appSettingServiceFolder);


    string AppearancePropName           = "appearance";
    string ShowErrorMethodName          = "showError";
    string ShowMessageMethodName        = "showMsg";
    string AppSettingServicePropName    = "appGlblSettings";

    string configPropName               = "config";
    string settingsPropName             = "settings";
    string webApiUrlPropName            = "webApiUrl";
    string securityUrlPropName          = "securityUrl";
    string permissionWebApiPropName     = "permissionWebApi";


    string getStorageItemMethodName     = "getStorageItem";
    string setStorageItemMethodName     = "setStorageItem";
    string getStorageLengthMethodName   = "getStorageLength";
    string removeStorageItemMethodName  = "removeStorageItem";
    string getStorageKeyMethodName      = "getStorageKey";
    string clearStorageMethodName       = "clearStorage";
    string vwModelsPropName             = "vwModels";




#>

import { Injectable, Component, TemplateRef } from '@angular/core';
import { AbstractControl, ValidationErrors } from '@angular/forms';
<# 
    if(localize) {
#>
import { LocalizationService } from '@abp/ng.core';
<# 
    }
#>
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, Route } from '@angular/router';
import { <#= appConfigServiceClassName #> } from '<#= GetFolderNameWithAnglr(AngularJsonFile, Model, appConfigServiceFolder, appSettingServiceFolder) #>';
import { HttpParameterCodec } from '@angular/common/http';


@Injectable({
  providedIn: 'root'
})
export class <#= appSettingServiceClassName #> implements CanActivate, CanActivateChild, HttpParameterCodec {
//
// begin HttpParameterCodec: https://github.com/angular/angular/issues/20376
//
    encodeKey(key: string): string {
      return encodeURIComponent(key);
    }
    encodeValue(value: string): string {
      return encodeURIComponent(value);
    }
    decodeKey(key: string): string {
      return decodeURIComponent(key);
    }
    decodeValue(value: string): string {
      return decodeURIComponent(value);
    }
//
// end HttpParameterCodec: https://github.com/angular/angular/issues/20376
//
    public filterHeightAddition: number = 0.5;
    public filterHeightFactor: number = 5;
    public tableHeightAddition: number = 0;
    public tableHeightFactor: number = 31;

    public toasts: any[] = [];
    // Push new Toasts to array with content and options
    public showToast(textOrTpl: string | TemplateRef<any>, options: any = {}) {
        this.toasts.push({ textOrTpl, ...options });
    }
    // Callback method to remove Toast DOM element from view
    public removeToast(toast: any) {
        this.toasts = this.toasts.filter(t => t !== toast);
    }


<# 
    if(localize) {
#>
    ErrorTxt: string | null = null;
    ErrorTp: string | null = null;
    SttsTxt: string | null = null;
    SttsText: string | null = null;
    ErrorCd: string | null = null;
    ErrorDscr: string | null = null;
    ValidError: string | null = null;
    ReqMxLn: string | null = null;
    ReqMinLn: string | null = null;
    ReqFld: string | null = null;
    VlMstLssTn: string | null = null;
    VlMstGtTn: string | null = null;
    IncrctFt: string | null = null;
    IncrctDtFt: string | null = null;
    AccDen: string | null = null;
<# 
    }
#>


    constructor(
<# 
    if(localize) {
#>
        private L: LocalizationService, 
<# 
    }
#>
        private _<#= settingsPropName #>: <#= appConfigServiceClassName #>) {
<# 
    if(localize) {
#>
        this.ErrorTxt = this.L.instant({
            key: 'CmSt::ErrorTxt',
            defaultValue: "Error :"
        });
        this.ErrorTp = this.L.instant({
            key: 'CmSt::ErrorTp',
            defaultValue: "Error of type"
        });
        this.SttsTxt = this.L.instant({
            key: 'CmSt::SttsTxt',
            defaultValue: "status:"
        });
        this.SttsText = this.L.instant({
            key: 'CmSt::SttsText',
            defaultValue: "Status Text:"
        });
        this.ErrorCd = this.L.instant({
            key: 'CmSt::ErrorCd',
            defaultValue: "error code:"
        });
        this.ErrorDscr = this.L.instant({
            key: 'CmSt::ErrorDscr',
            defaultValue: "error descr:"
        });
        this.ValidError = this.L.instant({
            key: 'CmSt::ValidError',
            defaultValue: "Validation Error."
        });
        this.ReqMxLn = this.L.instant({
            key: 'CmSt::ReqMxLn',
            defaultValue: "Required max length"
        });
        this.ReqMinLn = this.L.instant({
            key: 'CmSt::ReqMinLn',
            defaultValue: "Required min length"
        });
        this.ReqFld = this.L.instant({
            key: 'CmSt::ReqFld',
            defaultValue: "Required field"
        });
        this.VlMstLssTn = this.L.instant({
            key: 'CmSt::VlMstLssTn',
            defaultValue: "The value must be less than"
        });
        this.VlMstGtTn = this.L.instant({
            key: 'CmSt::VlMstGtTn',
            defaultValue: "The value must be greater than"
        });
        this.IncrctFt = this.L.instant({
            key: 'CmSt::IncrctFt',
            defaultValue: "Icorrect format"
        });
        this.IncrctDtFt = this.L.instant({
            key: 'CmSt::IncrctDtFt',
            defaultValue: "Icorrect date format"
        });
        this.AccDen = this.L.instant({
            key: 'CmSt::AccDen',
            defaultValue: "Access denied"
        });
        
<# 
    }
#>

    }
    public <#= ShowMessageMethodName #>(msg: string) {
      this.showToast(msg, {
        classname: 'bg-info text-light',
        delay: 4000 ,
        autohide: true,
        headertext: 'Info'
      });      
    }
    public <#= ShowErrorMethodName #>(errTp: string, errorStruct: any) {
<# 
    if(localize) {
#>
        let text: string = this.ErrorTxt;
<# 
    } else {
#>
        let text: string = 'Error :';
<# 
    }
#>
        if(!(typeof errTp === 'undefined')) {
            if(!(errTp === null)) {
<# 
    if(localize) {
#>
                text = this.ErrorTp + ' ' + errTp + ' : ';
<# 
    } else {
#>
                text = 'Error of type ' + errTp + ': ';
<# 
    }
#>
            }
        }
        if(!(typeof errorStruct === 'undefined')) {
            if(!(errorStruct === null)) {
                if(!(typeof errorStruct.message === 'undefined')) {
                    if(!(errorStruct.message === null)) {
                        text = text + ' ' +  errorStruct.message;
                    }
                }
                if(!(typeof errorStruct.status === 'undefined')) {
                  if(!(errorStruct.status === null)) {
<# 
    if(localize) {
#>
                      text = text + ' ' + this.SttsTxt + ' ' + errorStruct.status;
<# 
    } else {
#>
                      text = text + ' status: ' +  errorStruct.status;
<# 
    }
#>
                  }
              }
              if(!(typeof errorStruct.statusText === 'undefined')) {
                    if(!(errorStruct.statusText === null)) {
<# 
    if(localize) {
#>
                        text = text + ' ' + this.SttsText + ' ' + errorStruct.statusText;
<# 
    } else {
#>
                        text = text + ' Status Text:' +  errorStruct.statusText;
<# 
    }
#>
                    }
                }
                if(!(typeof errorStruct.error === 'undefined')) {
                  if(!(errorStruct.error === null)) {
                    if(!(typeof errorStruct.error.errors === 'undefined')) {
                      if(Array.isArray( errorStruct.error.errors )) {
                        errorStruct.error.errors.forEach((e: any) => {
<# 
    if(localize) {
#>
                          if(e.code) text = text + ' ' + this.ErrorCd + ' ' + e.code;
                          if(e.description) text = text + ' ' + this.ErrorDscr + ' ' + e.description;
<# 
    } else {
#>
                          if(e.code) text = text + ' error code:' + e.code;
                          if(e.description) text = text + ' error descr: ' + e.description;
<# 
    }
#>
                        });
                      }
                    }
                  }
                }
            }
        }
        this.showToast(text, {
          classname: 'bg-danger text-light',
          delay: 4000 ,
          autohide: true,
          headertext: 'Error'
        });
    }
    public getWebApiPrefix(vwNm: string): string {
        let reslt: string = '';
        if(!(vwNm === null)) {
            if(!(vwNm === null)) {
                //
                // here: defining url by ViewName
                //
                reslt =  this._<#= settingsPropName #>.<#= configPropName #>.<#= webApiUrlPropName #>; // 'https://localhost:7148/';
            }
        }
        return reslt;
    } 
    public getSecurityWebApiPrefix(): string {
        return this._<#= settingsPropName #>.<#= configPropName #>.<#= securityUrlPropName #>; //'https://localhost:7148/';
    } 
    public getPermissionWebApiPrefix(): string {
        return this._<#= settingsPropName #>.<#= configPropName #>.<#= permissionWebApiPropName #>; // 'https://localhost:7148/';
    }

    getValidationErrorMessage(fc: AbstractControl): string {
<# 
    if(localize) {
#>
        let rslt: string = this.ValidError + '. ';
<# 
    } else {
#>
        let rslt: string = 'Validation Error. ';
<# 
    }
#>

        if (typeof fc === 'undefined') {
          return rslt;
        }
        if (fc === null) {
          return rslt;
        }
        if (fc.errors === null) return rslt;
        const errs: ValidationErrors = fc.errors as ValidationErrors;
        Object.keys(errs).forEach(k => {
          switch(k) {
            case 'maxlength':
<# 
    if(localize) {
#>
              rslt += ' ' + this.ReqMxLn + ': ' + errs[k].requiredLength;
<# 
    } else {
#>
              rslt +=' Required max length: ' + errs[k].requiredLength;
<# 
    }
#>
              break;
            case 'minlength':
<# 
    if(localize) {
#>
              rslt += ' ' + this.ReqMinLn + ': ' + errs[k].requiredLength;
<# 
    } else {
#>
              rslt +=' Required min length: ' + errs[k].requiredLength;
<# 
    }
#>
              break;
            case 'required':
<# 
    if(localize) {
#>
              rslt += ' ' + this.ReqFld + ': ' + errs[k].requiredLength;
<# 
    } else {
#>
              rslt +=' Required field: ' ;
<# 
    }
#>
              break;
            case 'max':
<# 
    if(localize) {
#>
              rslt += ' ' + this.VlMstLssTn + ': ' + errs[k].max;
<# 
    } else {
#>
              rslt +=' The value must be less than ' + errs[k].max;
<# 
    }
#>
              break;
            case 'min':
<# 
    if(localize) {
#>
              rslt += ' ' + this.VlMstGtTn + ': ' + errs[k].max;
<# 
    } else {
#>
              rslt +=' Value must be greater than ' + errs[k].min;
<# 
    }
#>
              break;
            case 'pattern':
<# 
    if(localize) {
#>
              rslt += ' ' + this.IncrctFt + ': ' + errs[k].max;
<# 
    } else {
#>
              rslt +=' Icorrect format.' ;
<# 
    }
#>
              break;
            case 'matDatepickerMin':
<# 
    if(localize) {
#>
              rslt += ' ' + this.VlMstGtTn + ': ' + errs[k].max;
<# 
    } else {
#>
              rslt +=' Value must be greater than ' + errs[k].min;
<# 
    }
#>
              break;
            case 'matDatepickerMax':
<# 
    if(localize) {
#>
              rslt += ' ' + this.VlMstLssTn + ': ' + errs[k].max;
<# 
    } else {
#>
              rslt +=' The value must be less than ' + errs[k].max;
<# 
    }
#>
              break;
            case 'matDatepickerParse':
<# 
    if(localize) {
#>
              rslt += ' ' + this.IncrctDtFt + '.';
<# 
    } else {
#>
              rslt +=' Icorrect date format.' ;
<# 
    }
#>
              break;
            default:
<# 
    if(localize) {
#>
              rslt += ' ' + this.IncrctFt + '.';
<# 
    } else {
#>
              rslt +=' Icorrect format.' ;
<# 
    }
#>
              break;
          }
        });
        return rslt;
    } // end of getErrorMessage
    public getDialogWidth(vwNm: string): string {
        let rslt: string = 'xl';
        if(!(vwNm === null)) {
            if(!(vwNm === null)) {
                //
                // here: set dialog width for the given ViewName
                //
                return 'xl';
            }
        }
        return rslt;
    }
    public getDialogMaxWidth(vwNm: string): string {
        let rslt: string = 'xl';
        if(!(vwNm === null)) {
            if(!(vwNm === null)) {
                //
                // here: set dialog max width for the given ViewName
                //
                return 'xl';
            }
        }
        return rslt;
    }
    
    protected authInto: any = null;
    public getAuthInto(): any {
        return this.authInto;
    }
    public setAuthInto(info: any): any {
        if(typeof info === 'undefined') {
            this.authInto = null;
        } else {
            this.authInto = info;
        }
    }

    public perms: number[] = [0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,  1,0,0];
    public <#= vwModelsPropName #>:  { [key: string]: number } = {
/*        
        'LitAuthorView': 0,
        'LitBookView': 1,
        'LitCountryView':2,
        'LitDialectView':3,
        'LitEditionView':4,
        'LitGenreView':5,
        'LitLanguageView':6,
        'LitManuscriptView':7,
        'LitPublisherView':8,
*/
    };
    public dshBrds:  { [key: string]: number } = {
/*
      'FirstFtrComponent': 0
*/
    };
    getViewModelMask(vwModel: string): number {
      return 31; // delete this line when <#= vwModelsPropName #> is ready
      let pk = this.<#= vwModelsPropName #>[vwModel];
      if(typeof pk === 'undefined') { return 0; } else { return pk; }
/*

deprecated

      let pk = this.vwModels[vwModel];
      if(typeof pk === 'undefined') return 0;
      let rid: number = Math.floor(pk/7);
      if(rid >= (this.perms.length-3))  return 0; 
      let sft: number = (pk - rid * 7) * 4;
      let rslt = this.perms[rid];
      if(sft > 0) {
        rslt = this.perms[rid] >> sft;
      }
      return rslt; 
*/
    }
    getDashBrdMask(dshBrd: string): number {
      return 1; // delete this line when dshBrds is ready
      let pk = this.<#= vwModelsPropName #>[dshBrd];
      if(typeof pk === 'undefined') { return 0; } else { return pk; }
/* 

deprecated

      let pk = this.dshBrds[dshBrd];
      if(typeof pk === 'undefined') return 0;
      let rid: number = Math.floor(pk/31);
      if(rid >= (this.perms.length-14))  return 0; 
      let sft: number = (pk - rid * 31);
      let rslt = (this.perms[rid+14])
      if(sft > 0) {
        rslt = (this.perms[rid+14]) >> sft;
      }
      return rslt; 
*/
    }
    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean  {
      if((typeof childRoute.data['vn'] === 'undefined') || (typeof childRoute.data['va'] === 'undefined')) return false;
      if((childRoute.data['vn'] === null) || (childRoute.data['va'] === null)) return false;
      let msk = this.getViewModelMask(childRoute.data['vn']);
      let rslt: boolean = false;

      switch( childRoute.data['va'] ) {
        case 'a':
          rslt = ((msk & 8) === 8);
          break;
        case 'u':
          rslt = ((msk & 4) === 4);
          break;
        case 'd':
          rslt = ((msk & 2) === 2);
          break;
        case 'l':
          rslt = ((msk & 1) === 1);
          break;
        case 'v':
          rslt = ((msk & 1) === 1);
          break;
      };

<# 
    if(localize) {
#>
      if(!rslt) this.<#= ShowErrorMethodName #>('navigation', {message: this.AccDen});
<# 
    } else {
#>
      if(!rslt) this.<#= ShowErrorMethodName #>('navigation', {message: 'Access denied'});
<# 
    }
#>


      return rslt;
/*

deprecated

      if (childRoute.routeConfig === null) return false;
      if ( typeof ((childRoute.routeConfig as Route).path) === 'undefined') return false;
      let pth: string[] = ((childRoute.routeConfig as Route).path as string).split('/');
      let vnm: string = '';
      let act: number = 1;
      let vid: number = -1;
      let cnt = 0;
      for(let i = pth.length-1; i > -1; i-- ) {
        if(!pth[i].startsWith(':')) {
          if(cnt > 0) {
            vnm = pth[i];
            vid = i;
            break;
          } else cnt++;
        }
      }
      if (vid < 0) {
        if(pth.length>0) {
          vnm = pth[0];
          vid = 0;
        } else return false;
      }
      if ( pth[pth.length-1].startsWith(':') ) {
        switch( childRoute.url[childRoute.url.length-1].path ) {
          case 'add':
            act = 8;
            break;
          case 'update':
            act = 4;
            break;
          case 'delete':
            act = 2;
            break;
        };
      } 
      return (this.getViewModelMask(vnm) & act) === act;
*/
    }
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean  {
      if(route.routeConfig === null) return false;
      if( typeof ((route.routeConfig as Route).component) === 'undefined') return false;
      return ( this.getDashBrdMask(((route.routeConfig as Route).component as any)['name']) & 1) === 1;

    }
    
    public userName: string|null=null;

    public useLocalStorage: boolean = false;
    public useSessionStorage: boolean = false;
    protected serviceStorage: {[key: string]: any} = {};

    public <#= getStorageItemMethodName #>(key: string): any {
        if(typeof key === 'undefined') return null;
        if (this.useLocalStorage) {
            return null;
        } else if (this.useSessionStorage) {
            return null;
        } else {
            return this.serviceStorage[key];
        }
    }
    public <#= setStorageItemMethodName #>(key: string, val: any): void {
        if(!(typeof key === 'undefined')) {
            if (this.useLocalStorage) {
                
            } else if (this.useSessionStorage) {
            
            } else {
                this.serviceStorage[key] = val;
            }
        }
    }
    public <#= getStorageLengthMethodName #>(): number {
        if (this.useLocalStorage) {
            return 0;
        } else if (this.useSessionStorage) {
            return 0;
        } else {
            return Object.keys(this.serviceStorage).length;
        }
    }
    public <#= removeStorageItemMethodName #>(key: string): void {
        delete this.serviceStorage[key];
    }
    public <#= getStorageKeyMethodName #>(index: number): string | null {
        if (this.useLocalStorage) {
            return null;
        } else if (this.useSessionStorage) {
            return null;
        } else {
            const ks = Object.keys(this.serviceStorage);
            return index >= 0 && ks.length < index ? ks[index] : null;
        }

    }
    public <#= clearStorageMethodName #>(): void {
        if (this.useLocalStorage) {
            
        } else if (this.useSessionStorage) {
            
        } else {
            this.serviceStorage = {};
        }
    }
}

@Injectable({
  providedIn: 'root'
})
export class <#= appSettingServiceClassName + "Activator" #> implements CanActivate {
    constructor(protected <#= AppSettingServicePropName #>: <#= appSettingServiceClassName #>) {}
    
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
        return this.<#= AppSettingServicePropName #>.canActivateChild(route, state);
    }
}

