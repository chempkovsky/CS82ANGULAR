<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CS82ANGULAR" #>
<#@ import namespace="CS82ANGULAR.Model" #>
<#@ import namespace="CS82ANGULAR.Model.Serializable" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.ModelViewSerializable" name="Model" #>
<#@ parameter type="CS82ANGULAR.Model.Serializable.DbContextSerializable" name="Context" #>
#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LinqKit;

<#

    string GetAllMethodName             = "getall";
    string GetWithFilterMethodName      = "getwithfilter";
    string GetOneMethodName             = "getone";
    string UpdateOneMethodName          = "updateone";
    string AddOneMethodName             = "addone";
    string DeleteOneMethodName          = "deleteone";
    string GetOneByMethodNamePrefix         = "getoneby";
    string GetManyByRepPrimMethodNamePrefix = "getmanybyrepprim";
    string GetManyByRepUnqMethodNamePrefix  = "getmanybyrepunq";

    string OperatorSufix = "Oprtr";
    string webApiServiceNameSpace = GetDestinationNameSpace(Model);
    string rootEntityNameSpace = GetRootEntityNameSpace(Model);
    string dbContextNameSpace = GetDbContextNameSpace(Context);
    string viewModelNameSpace = GetViewModelNameSpace(Model);
    string webApiServicePrefix = GetWebApiServicePrefix(Model);
    List<String> locNavigationPaths = GetNavigationPaths(Model);

    List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys = new List<ModelViewUniqueKeyOfVwSerializable>();
    {
        ModelViewUniqueKeyOfVwSerializable pk = GetModelPrimaryKey(Model);
        if (pk != null) uniqueKeys.Add(pk);
        
        GetModelUniqueKeys(Model, uniqueKeys);
    }

#>
<# if (!string.IsNullOrEmpty(dbContextNameSpace)) {
 if (!string.Equals(dbContextNameSpace, webApiServiceNameSpace)) { #>
using <#= dbContextNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(viewModelNameSpace)) {
 if (!string.Equals(viewModelNameSpace, webApiServiceNameSpace)) {#>
using <#= viewModelNameSpace #>;
<# }} #>
<# if (!string.IsNullOrEmpty(rootEntityNameSpace)) {
 if (!string.Equals(rootEntityNameSpace, webApiServiceNameSpace)) {#>
using <#= rootEntityNameSpace #>;
<# }} #>

namespace <#= webApiServiceNameSpace #> {

//    [RoutePrefix("<#= webApiServicePrefix #>")]
    [ApiController]
    public class <#= Model.WebApiServiceName #>: ControllerBase
    {
        private int defaultPageSize = 50;
        private int minPageSize = 5;
        private int maxPageSize = 150;
        private readonly <#= Context.DbContextClassName #> db;

        public <#= Model.WebApiServiceName #>(<#= Context.DbContextClassName #> context)
        {
            db = context;
        }

<# 
    if (Model.IsWebApiSelectAll) { 
#>
        [HttpGet]
        [Route("[controller]/<#= GetAllMethodName #>")]
        
        public async Task<ActionResult<IEnumerable<<#= Model.ViewName #>>>> <#= GetAllMethodName #>()
        {
            return await db.<#= Model.RootEntityDbContextPropertyName #>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
                
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model) #> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
                }
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model) #> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>

                            }).ToListAsync();;

        } // the end of Get()-method
<#
    }
#>


<# 
    if (Model.IsWebApiSelectManyWithPagination) { 
#>
        [HttpGet]
        [Route("[controller]/<#= GetWithFilterMethodName #>")]
        public async Task<ActionResult<<#= Model.PageViewName #>>> <#= GetWithFilterMethodName #>(<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if (prop.IsUsedByfilter) { 
#>                
            [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>, 
            [FromQuery] string[] <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>,
<#
            }
        } 
#>                 
            [FromQuery] string[] orderby = null, 
            [FromQuery] int? page =null, 
            [FromQuery] int? pagesize = null)
        {

            string[] EqualOperators = { "eq", "lk" };
            string[] ExpectedOperators = { "eq", "lk", "gt", "lt", "ne" };

            int currentPageSize = this.defaultPageSize;
            int currentPage = 1;
            if (pagesize.HasValue) {
                currentPageSize = pagesize.Value;
                if ((currentPageSize < this.minPageSize) || (currentPageSize > this.maxPageSize)) {
                    currentPageSize = defaultPageSize;
                }
            }
            if (page.HasValue) {
                currentPage = page.Value+1;
                if (currentPage < 1) {
                    currentPage = 1;
                }
            }
            IQueryable<<#= Model.RootEntityClassName #>> query = db.<#= Model.RootEntityDbContextPropertyName #>;
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(!prop.IsUsedByfilter) continue;
            if (!IsEntityTypeString(prop)) {
#>
            if(<#=  GetFilterPropertyName(prop, Model) #> != null) {
                if(<#=  GetFilterPropertyName(prop, Model) #>.Length > 0) {
                    int filterCnt = <#=  GetFilterPropertyName(prop, Model) #>.Length;
                    int operatorCnt = 0;
                    if(<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> != null) {
                        operatorCnt = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>.Length;
                    }
                    List<KeyValuePair<String, int >> filterOprtLst = new List<KeyValuePair<String, int>>();
<#
                if (prop.IsNullable) {
#>
                    List<<#= prop.UnderlyingTypeName#> ?> filterLst = new List<<#=  prop.UnderlyingTypeName#> ?>();
                    for(int i = 0; i < filterCnt; i++) {
                        if( !(<#=  GetFilterPropertyName(prop, Model) #>[i].HasValue) ) continue;
                        string currOprtr = EqualOperators[0];
                        if (i < operatorCnt) {
                            if( ! string.IsNullOrEmpty( <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i] ) ) {
                                if (ExpectedOperators.Contains(<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i])) {
                                    currOprtr = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i];
                                }
                            }
                        }
                        if (EqualOperators.Contains(currOprtr)) {
                            filterLst.Add(<#=  GetFilterPropertyName(prop, Model) #>[i]);
                        } else {
                            filterOprtLst.Add( new KeyValuePair<String, int>(currOprtr, i) );
                        }
                    }
                    //
                    // <#= prop.UnderlyingTypeName#> ?[] filter = <#= GetFilterPropertyName(prop, Model)#>.Where(i => i.HasValue).Select(i => i).ToArray();
                    //
                    <#= prop.UnderlyingTypeName#> ?[] filter = filterLst.ToArray();
<#              
                } else { 
#>
                    List<<#= prop.UnderlyingTypeName#> > filterLst = new List<<#= prop.UnderlyingTypeName#> >();
                    for(int i = 0; i < filterCnt; i++) {
                        if( !(<#=  GetFilterPropertyName(prop, Model) #>[i].HasValue) ) continue;
                        string currOprtr = EqualOperators[0];
                        if (i < operatorCnt) {
                            if( ! string.IsNullOrEmpty( <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i] ) ) {
                                if (ExpectedOperators.Contains(<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i])) {
                                    currOprtr = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i];
                                }
                            }
                        }
                        if (EqualOperators.Contains(currOprtr)) {
                            filterLst.Add(<#=  GetFilterPropertyName(prop, Model) #>[i].Value);
                        } else {
                            filterOprtLst.Add( new KeyValuePair<String, int>(currOprtr, i) );
                        }
                    }

                   // 
                   // <#= prop.UnderlyingTypeName#>[] filter = <#=  GetFilterPropertyName(prop, Model)#>.Where(i => i.HasValue).Select(i => i.Value).ToArray();
                   //
                   <#= prop.UnderlyingTypeName#>[] filter = filterLst.ToArray();
<#
                }
#>
<#
                if (prop.IsNullable) {
#>
                    if ( (filter.Length + filterOprtLst.Count) != filterCnt) {
                        if (filter.Length > 0) {
                            query = query.Where(p => (filter.Contains(p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>)) || (p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> == null));
                        } else {
                            query = query.Where(p => (p.<#= GetForeignKeyNameChainAndProp(prop, Model)#> == null) );
                        }
                    } else if (filter.Length > 0) {
                        query = query.Where(p => filter.Contains(p.<#= GetForeignKeyNameChainAndProp(prop, Model)#>));
                    }
                    foreach(var fltItm in filterOprtLst) {
                        <#= prop.TypeFullName #> aflt = <#=  GetFilterPropertyName(prop, Model) #>[ fltItm.Value ];
                        switch(fltItm.Key) {
<# 
                        if(! IsEntityTypeBoolean(prop) ) {
#>
                            case "gt":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> >= aflt );
                                break;
                            case "lt":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> <= aflt );
                                break;
<#
                        }
#>
                            case "ne":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> != aflt );
                                break;
                        }
                    }
<#
                } else {
#>
                    if (filter.Length > 0) {
                        query = query.Where(p => filter.Contains(p.<#= GetForeignKeyNameChainAndProp(prop, Model)#>));
                    }
                    foreach(var fltItm in filterOprtLst) {
                        <#= prop.TypeFullName #> aflt = <#=  GetFilterPropertyName(prop, Model) #>[ fltItm.Value ].Value;
                        switch(fltItm.Key) {
<# 
                        if(! IsEntityTypeBoolean(prop) ) {
#>
                            case "gt":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> >= aflt );
                                break;
                            case "lt":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> <= aflt );
                                break;
<#
                        }
#>
                            case "ne":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#> != aflt );
                                break;
                        }
                    }
<#
                }  /////////// if (prop.IsNullable)
#>

                }
            }
<#
            } else { /////////////// if (!IsEntityTypeString(prop))
#>
            if(<#=                    GetFilterPropertyName(prop, Model)#> != null) {
                if(<#=                    GetFilterPropertyName(prop, Model)#>.Length > 0) {
                    int filterCnt = <#=                    GetFilterPropertyName(prop, Model) #>.Length;
                    int operatorCnt = 0;
                    if(<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #> != null) {
                        operatorCnt = <#=                    GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>.Length;
                    }
                    List<KeyValuePair<String, int >> filterOprtLst = new List<KeyValuePair<String, int>>();
                    List<<#= prop.UnderlyingTypeName#>> filterLst = new List<<#=  prop.UnderlyingTypeName#>>();
                    for(int i = 0; i < filterCnt; i++) {
                        if(  string.IsNullOrEmpty(<#=  GetFilterPropertyName(prop, Model) #>[i]) ) continue;
                        string currOprtr = EqualOperators[0];
                        if (i < operatorCnt) {
                            if( ! string.IsNullOrEmpty( <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i] ) ) {
                                if (ExpectedOperators.Contains(<#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i])) {
                                    currOprtr = <#= GetFilterPropertyOperatorName(prop, Model, OperatorSufix) #>[i];
                                }
                            }
                        }
                        if (EqualOperators.Contains(currOprtr)) {
                            filterLst.Add(<#=  GetFilterPropertyName(prop, Model) #>[i]);
                        } else {
                            filterOprtLst.Add( new KeyValuePair<String, int>(currOprtr, i) );
                        }
                    }

                    // 
                    // <#= prop.UnderlyingTypeName#>[] filter = <#=  GetFilterPropertyName(prop, Model)#>.Where(i => (!string.IsNullOrEmpty(i)) ).ToArray();
                    //
                    <#= prop.UnderlyingTypeName#>[] filter = filterLst.ToArray();
                    bool hasNUllFilter = <#= GetFilterPropertyName(prop, Model)#>.Length > (filterLst.Count + filterOprtLst.Count);
                    switch(filter.Length)
                    {
                        case 0:
                            if (hasNUllFilter) {
                                query = query.Where(p => p.<#=    GetForeignKeyNameChainAndProp(prop, Model)#> == null);
                            }
                            break;
                        case 1:
                            {
                                string aflt0 = filter[0].Trim();
                                if (hasNUllFilter) {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#> == null) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0))
                                            ));
                                } else {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0))
                                            ));
                                }
                            }
                            break;
                        case 2:
                            {
                                string aflt0 = filter[0].Trim();
                                string aflt1 = filter[1].Trim();
                                if (hasNUllFilter) {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#> == null) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1))
                                            ));
                                } else {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1))
                                            ));
                                }
                            }
                            break;
                        case 3:
                            {
                                string aflt0 = filter[0].Trim();
                                string aflt1 = filter[1].Trim();
                                string aflt2 = filter[2].Trim();
                                if (hasNUllFilter) {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#> == null) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt2))
                                            ));
                                } else {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt2))
                                            ));
                                }
                            }
                            break;
                        case 4:
                            {
                                string aflt0 = filter[0].Trim();
                                string aflt1 = filter[1].Trim();
                                string aflt2 = filter[2].Trim();
                                string aflt3 = filter[3].Trim();
                                if (hasNUllFilter) {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#> == null) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt2)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt3))
                                            ));
                                } else {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt2)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt3))
                                            ));
                                }
                            }
                            break;
                        default:
                            {
                                string aflt0 = filter[0].Trim();
                                string aflt1 = filter[1].Trim();
                                string aflt2 = filter[2].Trim();
                                string aflt3 = filter[3].Trim();
                                string aflt4 = filter[4].Trim();
                                if (hasNUllFilter) {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#> == null) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt2)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt3)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt4))
                                            ));
                                } else {
                                    query = query.Where(p => (
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt0)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt1)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt2)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt3)) ||
                                            (p.<#=                    GetForeignKeyNameChainAndProp(prop, Model)#>.Contains(aflt4))
                                            ));
                                }

                            }
                            break;
                    }
                    foreach(var fltItm in filterOprtLst) {
                        string aflt = <#=  GetFilterPropertyName(prop, Model) #>[ fltItm.Value ];
                        switch(fltItm.Key) {
<# 
                        if(! IsEntityTypeBoolean(prop) ) {
#>
                            case "gt":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.CompareTo(aflt) >= 0 );
                                break;
                            case "lt":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.CompareTo(aflt) <= 0 );
                                break;
<#
                        }
#>
                            case "ne":
                                query = query.Where(p => p.<#=  GetForeignKeyNameChainAndProp(prop, Model)#>.CompareTo(aflt) != 0 );
                                break;
                        }
                    }
                }
            }
<#
            }
        }
#>
                int totals = await query.CountAsync();
                int pageCount = ((totals > 0) ? ((int)Math.Ceiling((double)totals / (double)currentPageSize)) : 0);
                List<string> currentOrderBy = null;
                if (orderby != null) {
                    if (orderby.Length > 0) {
                        currentOrderBy = orderby.Where(s => (!string.IsNullOrEmpty(s))).ToList();
                    }
                }   
                bool isFirstTime = true; 
                IOrderedQueryable<<#= Model.RootEntityClassName #>> orderedQuery = null;
                if(currentOrderBy != null) {
                    List<string> wasInUseOrderBy = new List<string>();
                    foreach(string propName in currentOrderBy) {
                        string lowerCaseStr = propName.ToLower();
                        if (wasInUseOrderBy.Contains(lowerCaseStr)) {
                            continue;
                        }
                        switch(lowerCaseStr) {
<#  
        foreach(ModelViewPropertyOfVwSerializable currProp in Model.ScalarProperties) {
            if (!currProp.IsUsedBySorting) continue;
#>
                            case "<#= GetLowerCasePropertyName(currProp, Model)#>" :
                                if(isFirstTime) { 
                                    orderedQuery = query.OrderBy(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                    isFirstTime = false;
                                } else {
                                    orderedQuery = orderedQuery.ThenBy(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                }
                                wasInUseOrderBy.Add("<#= GetLowerCasePropertyName(currProp, Model)#>");
                                wasInUseOrderBy.Add("-<#= GetLowerCasePropertyName(currProp, Model)#>");
                                break;
                            case "-<#= GetLowerCasePropertyName(currProp, Model)#>" :
                                if(isFirstTime) {
                                    orderedQuery = query.OrderByDescending(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                    isFirstTime = false;
                                } else {
                                    orderedQuery = orderedQuery.ThenByDescending(p => p.<#= GetForeignKeyNameChainAndProp(currProp, Model)#>);
                                }
                                wasInUseOrderBy.Add("<#= GetLowerCasePropertyName(currProp, Model)#>");
                                wasInUseOrderBy.Add("-<#= GetLowerCasePropertyName(currProp, Model)#>");
                                break;
<#
        }
#>
                                default:
                                    break;
                        }
                    }
                }
                if(isFirstTime) {                
                    orderedQuery = query.OrderBy(p => p.<#= GetFirstPrimKeyProperty(Model)#>);
                } // totals pageCount currentPageSize
                <#= Model.PageViewName #> resultObject = new <#= Model.PageViewName #>() {
                    page = (currentPage > 0) ? (currentPage-1) : currentPage,
                    pagesize = currentPageSize,
                    pagecount = pageCount,
                    total = totals
                };
                resultObject.items = await orderedQuery.Skip((currentPage - 1) * currentPageSize).Take(currentPageSize).Select(itm => new <#= Model.ViewName #>() {
<#
        int cnt = Model.ScalarProperties.Count-1;
        for(int i = 0; i < cnt; i++) {
#>
                            <#=            GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#=  GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        }
#>
                            <#=            GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                            }).ToListAsync();
                return Ok(resultObject);
        } // the end of GetWithFilter()-method
<#
    }
#>

<# 
    if (Model.IsWebApiSelectOneByPrimarykey) { 
        foreach(ModelViewUniqueKeyOfVwSerializable pk in uniqueKeys) {
            List<ModelViewPropertyOfVwSerializable> primKeys = null;
            string indErrrorText = "";
            bool indIsCorrect = CheckModelIfIndexIsCorrect(Model, pk, out indErrrorText);
            string localRouteName = GetOneMethodName;
            string localRouteManyName = GetManyByRepPrimMethodNamePrefix;
            if (!pk.IsPrimary) {
                    
                localRouteName = GetOneByMethodNamePrefix + pk.UniqueKeyName;
                localRouteManyName = GetManyByRepUnqMethodNamePrefix + pk.UniqueKeyName;
            }
            if (!indIsCorrect) {

#>
//
// Could not generate <#= localRouteName #>
// Primary/Unique Index Is not correct:
// <#= indErrrorText #>
//
<#
            } else {
                primKeys = pk.UniqueKeyProperties;
#>
        [HttpGet]
        [Route("[controller]/<#= localRouteName #>")]
        public async Task<ActionResult<<#= Model.ViewName #>>> <#= localRouteName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
            } else { 
#>                
             [FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model) #>
<#
                counter++;
            }
        } #>                
             )
        {
            <#= Model.ViewName #> result = await db.<#= Model.RootEntityDbContextPropertyName #>
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(primKeys[pkId], Model);
            
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == <#= GetFilterPropertyName(primKeys[pkId], Model) #>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
        int cnt = Model.ScalarProperties.Count-1;
        for(int i = 0; i < cnt; i++) {
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        } 
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                    }).FirstOrDefaultAsync();
            if (result == null)
            {
                return NotFound();
            }
            return Ok(result);
        } // the end of public GetOne()-method


        [HttpGet]
        [Route("[controller]/<#= localRouteManyName #>")]
        public async Task<ActionResult<<#= Model.PageViewName #>>> <#= localRouteManyName #>(
<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
             [FromQuery] <#= GetNullableType(prop)#>[] <#= GetFilterPropertyName(prop, Model) #>,
<#
        } 
#>            
            [FromQuery] string[] orderby = null, 
            [FromQuery] int? page =null, 
            [FromQuery] int? pagesize = null)
        {
            int currentPageSize = this.defaultPageSize;
            int currentPage = 1;
            if (pagesize.HasValue) {
                currentPageSize = pagesize.Value;
                if ((currentPageSize < this.minPageSize) || (currentPageSize > this.maxPageSize)) {
                    currentPageSize = defaultPageSize;
                }
            }
            if (page.HasValue) {
                currentPage = page.Value+1;
                if (currentPage < 1) {
                    currentPage = 1;
                }
            }

<#
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
#>                
            int _<#= GetFilterPropertyName(prop, Model) #> = <#= GetFilterPropertyName(prop, Model) #> == null ? 0 : <#= GetFilterPropertyName(prop, Model) #>.Length;
<#
        } 
#>                
            IQueryable<<#= Model.RootEntityClassName #>> query = db.<#= Model.RootEntityDbContextPropertyName #>;
            if ( _<#= GetFilterPropertyName(primKeys[0], Model) #> > 0 ) {
                var _outer = PredicateBuilder.New<<#= Model.RootEntityClassName #>>();
                bool isOuterModified = false;
                for(int i = 0; i < _<#= GetFilterPropertyName(primKeys[0], Model) #>; i++) {
                    var _inner = PredicateBuilder.New<<#= Model.RootEntityClassName #>>();
<#
        int cnt02 = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(cnt02 > 0) {
#>                
                    if (_<#= GetFilterPropertyName(prop, Model) #> >= i) {
                        _outer = _outer.Or(_inner);
                        isOuterModified = true;
                        continue;
                    }
<#
            }
            cnt02++;
            if (prop.IsRequired) {
#>                
                    if (<#= GetFilterPropertyName(prop, Model) #>[i] == null) continue; // (required prop == null) returns false
                    _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == <#= GetFilterPropertyName(prop, Model) #>[i]);
<#
            } else {
#>                
                    if (<#= GetFilterPropertyName(prop, Model) #>[i] == null) {
                        _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == null);
                    } else {
                        _inner = _inner.And(p => p.<#= prop.OriginalPropertyName #> == <#= GetFilterPropertyName(prop, Model) #>[i]);
                    }
<#
            }
        } 
#>                
                    _outer = _outer.Or(_inner);
                    isOuterModified = true;
                }
                if(isOuterModified) {
                    query = query.AsExpandable().Where(_outer); 
                }
            }
            int totals = await query.CountAsync();
            int pageCount = ((totals > 0) ? ((int)Math.Ceiling((double)totals / (double)currentPageSize)) : 0);
            List<string> currentOrderBy = null;
            if (orderby != null) {
                if (orderby.Length > 0) {
                    currentOrderBy = orderby.Where(s => (!string.IsNullOrEmpty(s))).ToList();
                }
            }   

                IOrderedQueryable<<#= Model.RootEntityClassName #>> orderedQuery = query.OrderBy(p => p.<#= primKeys[0].OriginalPropertyName #>);
<#
        for(int i = 1; i < primKeys.Count; i++) {
#>                
                orderedQuery = orderedQuery.ThenBy(p => p.<#= primKeys[i].OriginalPropertyName #>);
<#
        } 
#>            
                <#= Model.PageViewName #> resultObject = new <#= Model.PageViewName #>() {
                    page = (currentPage > 0) ? (currentPage-1) : currentPage,
                    pagesize = currentPageSize,
                    pagecount = pageCount,
                    total = totals
                };
                resultObject.items = await orderedQuery.Skip((currentPage - 1) * currentPageSize).Take(currentPageSize).Select(itm => new <#= Model.ViewName #>() {
<#
        int cnt01 = Model.ScalarProperties.Count-1;
        for(int i = 0; i < cnt01; i++) {
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#=  GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        }
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt01], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt01], Model) #>
                            }).ToListAsync();
                return Ok(resultObject);
        }
<#
            } // the end of: if (!indIsCorrect) {...} else {}
        } // the end of: foreach(ModelViewUniqueKeyOfVwSerializable pk uniqueKeys) {}
    } // the end of: if (Model.IsWebApiSelectOneByPrimarykey)
#>

<# 
    if (Model.IsWebApiUpdate) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= UpdateOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties; 

#>
        [HttpPut]
        [Route("[controller]/<#= UpdateOneMethodName #>")]
        public async Task<ActionResult<<#= Model.ViewName #>>> <#= UpdateOneMethodName #>([FromBody] <#= Model.ViewName#> viewToUpdate)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            <#= Model.RootEntityClassName #> resultEntity = await db.<#= Model.RootEntityDbContextPropertyName #>
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(primKeys[pkId], Model);
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == viewToUpdate.<#= GetTypeScriptPropertyName(primKeys[pkId], Model)#>)
<#
        }
#>
                    .FirstOrDefaultAsync();
            if(resultEntity == null) {
                return NotFound();
            }

<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            if(primKeys.Contains(prop)) {
                continue;
            }
            ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(prop, Model);
            if( entityProp == null ) continue;
#>
            resultEntity.<#= entityProp.OriginalPropertyName #> =  viewToUpdate.<#= GetTypeScriptPropertyName(prop, Model)#>;
<#
        }
#>
            db.Entry(resultEntity).State = EntityState.Modified;
            await db.SaveChangesAsync();
            <#= Model.ViewName#> result = await db.<#= Model.RootEntityDbContextPropertyName #>
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(primKeys[pkId], Model);
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == viewToUpdate.<#= GetTypeScriptPropertyName(primKeys[pkId], Model)#>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        } 
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                    }).FirstOrDefaultAsync();
            if (result == null)
            {
                return NotFound();
            }
            return Ok(result);
        }
<#
        } // the end of: if(indIsCorrect) {} else {}
    } // the end of: if (Model.IsWebApiAdd)

#>

<# 
    if (Model.IsWebApiAdd) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= AddOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;
#>
        [HttpPost]
        [Route("[controller]/<#= AddOneMethodName #>")]
        public async Task<ActionResult<<#= Model.ViewName #>>> <#= AddOneMethodName #>([FromBody] <#= Model.ViewName#> viewToAdd)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            <#= Model.RootEntityClassName#> entityToAdd = new <#= Model.RootEntityClassName#>();
<#
        foreach(ModelViewPropertyOfVwSerializable prop in Model.ScalarProperties) {
            ModelViewEntityPropertySerializable entityProp =  GetRootEntityProperty(prop, Model);
            if(entityProp != null) {
#>
            entityToAdd.<#=  entityProp.OriginalPropertyName #> =  viewToAdd.<#=  GetTypeScriptPropertyName(prop, Model) #>;
<#
            }
        }
#>
            db.<#= Model.RootEntityDbContextPropertyName #>.Add(entityToAdd);
            await db.SaveChangesAsync();

            <#= Model.ViewName #> result = await db.<#= Model.RootEntityDbContextPropertyName #>
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp = GetRootEntityProperty(primKeys[pkId], Model);
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == entityToAdd.<#= entityProp.OriginalPropertyName #>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        } 
#>
                            <#=GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                    }).FirstOrDefaultAsync();
            if (result == null)
            {
                return NotFound();
            }
            return Ok(result);
        }
<#
        } // the end of: if(indIsCorrect) {}
    } // the end of if (Model.IsWebApiAdd)
#>


<# 
    if (Model.IsWebApiDelete) { 
        List<ModelViewPropertyOfVwSerializable> primKeys = null;
        ModelViewUniqueKeyOfVwSerializable locPrimKey = GetModelPrimKeyFromList(uniqueKeys);
        string indErrrorText = "";
        bool indIsCorrect = locPrimKey != null;
        if (!indIsCorrect) {
            indErrrorText = "Could not find primary key";
        }
        if (indIsCorrect) {
            indIsCorrect = CheckModelIfIndexIsCorrect(Model, locPrimKey, out indErrrorText);
        }
        if(!indIsCorrect) {
#>
//
// Could not generate <#= DeleteOneMethodName #>
// Primary Index Is not correct:
// <#= indErrrorText #>
//
<#

        } else {
            primKeys = locPrimKey.UniqueKeyProperties;

#>
        [HttpDelete]
        [Route("[controller]/<#= DeleteOneMethodName #>")]
        public async Task<ActionResult<<#= Model.ViewName #>>> <#= DeleteOneMethodName #>(<#
        int counter = 0;
        foreach(ModelViewPropertyOfVwSerializable prop in primKeys) {
            if(counter > 0) { 
#>                
            ,[FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
            } else { 
#>                
             [FromQuery] <#= prop.UnderlyingTypeName #> <#= GetFilterPropertyName(prop, Model)#>
<#
                counter++;
            } 
        } #>                
           )
        {

                <#= Model.ViewName#> result = await db.<#= Model.RootEntityDbContextPropertyName #>
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp = GetRootEntityProperty(primKeys[pkId], Model);
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == <#= GetFilterPropertyName(primKeys[pkId], Model)#>)
<#
        }
#>
                    .Select(itm => new <#= Model.ViewName #>() {
<#
                int cnt = Model.ScalarProperties.Count-1;
                for(int i = 0; i < cnt; i++) {
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[i], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[i], Model) #>,
<#
        } 
#>
                            <#= GetTypeScriptPropertyName(Model.ScalarProperties[cnt], Model)#> = itm.<#= GetForeignKeyNameChainAndProp(Model.ScalarProperties[cnt], Model) #>
                    }).FirstOrDefaultAsync();
                if (result == null)
                {
                    return NotFound();
                }

                <#= Model.RootEntityClassName#> entityToDelete = await db.<#= Model.RootEntityDbContextPropertyName #>
<#
        for(int pkId= 0; pkId < primKeys.Count; pkId++) {
            ModelViewEntityPropertySerializable entityProp = GetRootEntityProperty(primKeys[pkId], Model);
#>
                    .Where(p => p.<#= entityProp.OriginalPropertyName #> == result.<#= GetTypeScriptPropertyName(primKeys[pkId], Model)#>)
<#
        }
#>
                    .FirstOrDefaultAsync();
                if (entityToDelete == null) {
                    return Ok(result);
                }
                db.<#= Model.RootEntityDbContextPropertyName #>.Remove(entityToDelete);
                await db.SaveChangesAsync();
                return Ok(result);
        }
<#
        } // the end of: if(!indIsCorrect) {} else {}
    } // the end of if: (Model.IsWebApiDelete)
#>

    }
}

<#+
    String GetDestinationNameSpace(ModelViewSerializable model) {
        string result = "";
        if( !string.IsNullOrEmpty( model.WebApiServiceFolder ) ) {
            result = model.WebApiServiceFolder.Replace("\\", ".");
        }
        if ( !string.IsNullOrEmpty(model.WebApiServiceDefaultProjectNameSpace) ) {
            if (string.IsNullOrEmpty(result)) {
                result = model.WebApiServiceDefaultProjectNameSpace;
            } else {
                result = model.WebApiServiceDefaultProjectNameSpace + "." + result;
            }
        }
        return result;
    }
    String GetDbContextNameSpace(DbContextSerializable context) {
        string result = context.DbContextFullClassName;
        
        if( !string.IsNullOrEmpty( result ) ) {
            if( !string.IsNullOrEmpty(context.DbContextClassName) ) {
                if(result.EndsWith("."+context.DbContextClassName)) {
                    result = result.Substring(0, result.LastIndexOf("."+context.DbContextClassName));
                }
            }
        }
        return result;
    }
    String GetViewModelNameSpace(ModelViewSerializable model) {
        string result = "";
        if( !string.IsNullOrEmpty( model.ViewFolder ) ) {
            result = model.ViewFolder.Replace("\\", ".");
        }
        if ( !string.IsNullOrEmpty(model.ViewDefaultProjectNameSpace) ) {
            if (string.IsNullOrEmpty(result)) {
                result = model.ViewDefaultProjectNameSpace;
            } else {
                result = model.ViewDefaultProjectNameSpace + "." + result;
            }
        }
        return result;
    }
    String GetRootEntityNameSpace(ModelViewSerializable model) {
        return model.RootEntityFullClassName.Substring(0, model.RootEntityFullClassName.LastIndexOf("." + model.RootEntityClassName));
    }
    List<String> GetNavigationPaths(ModelViewSerializable model) {
        List<String> locPaths = new List<String>();
        if(model.ScalarProperties == null) return locPaths;
        foreach (ModelViewPropertyOfVwSerializable prop in model.ScalarProperties)
        {
            if (string.IsNullOrEmpty(prop.ForeignKeyNameChain)) continue;
            if (locPaths.Exists(itm => (itm.StartsWith(prop.ForeignKeyNameChain + ".") || (itm.Equals(prop.ForeignKeyNameChain))))) continue;
            string s = locPaths.Where(itm => (prop.ForeignKeyNameChain.StartsWith(itm + ".") || (itm.Equals(prop.ForeignKeyNameChain)))).FirstOrDefault();
            if (!string.IsNullOrEmpty(s))
            {
                locPaths.Remove(s);
            }
            locPaths.Add(prop.ForeignKeyNameChain);
        }
        return locPaths;
    }
    String GenerateIncludePaths(String src) {
        if (String.IsNullOrEmpty(src)) return "";
        string[] sa = src.Split(new char[] { '.' });
        StringBuilder sb = new StringBuilder(".Include(p => p." + sa[0] + ")");
        for (int i = 1; i < sa.Length; i++)
        {
            sb.Append(".ThenInclude(p => p." + sa[i] + ")");
        }
        return sb.ToString();
    }
    String GetForeignKeyNameChain(String foreignKeyNameChain) {
        if (String.IsNullOrEmpty(foreignKeyNameChain)) {
            return "";
        } else {
            return foreignKeyNameChain + ".";
        }
    }
    String GetForeignKeyNameChainAndProp(ModelViewPropertyOfVwSerializable sProp, ModelViewSerializable model) {
        if (String.IsNullOrEmpty(sProp.ForeignKeyNameChain)) {
            return sProp.OriginalPropertyName;
        } else {
            if((sProp.ForeignKeyNameChain == sProp.ForeignKeyName) && (model.ForeignKeys != null)) {
                ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == sProp.ForeignKeyName).FirstOrDefault();
                if(fk != null) {
                    if((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                        for(int i = 0; i < fk.PrincipalKeyProps.Count; i++) {
                            if(i < fk.ForeignKeyProps.Count) {
                                if(fk.PrincipalKeyProps[i].OriginalPropertyName == sProp.OriginalPropertyName) {
                                    return fk.ForeignKeyProps[i].OriginalPropertyName;
                                }
                            }
                        }
                    }
                }
            }
            return sProp.ForeignKeyNameChain + "." + sProp.OriginalPropertyName;
        }
    }



    String GetWebApiServicePrefix(ModelViewSerializable model) {
        string result = model.WebApiServiceName;
        if( !string.IsNullOrEmpty( result ) ) {
            if(result.EndsWith("Controller")) {
                result = result.Substring(0, result.LastIndexOf("Controller"));
            }
            result = result.ToLower();
        }
        return result;
    }
    String GetNullableType(ModelViewPropertySerializable prop) {
        if (prop.UnderlyingTypeName.Equals("System.String")) {
            return prop.UnderlyingTypeName;
        } else {
			return prop.UnderlyingTypeName +"?";
        }
    }
    String GetChainedPropertyName(ModelViewPropertySerializable prop) {
        if (String.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            return prop.OriginalPropertyName;
        } else {
            return prop.ForeignKeyNameChain + "." + prop.OriginalPropertyName;
        }
    }
    bool IsEntityTypeString(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.String");
    }
    bool IsEntityTypeBoolean(ModelViewPropertySerializable prop) {
        return prop.UnderlyingTypeName.Equals("System.Boolean");
    }
    String GetFirstPrimKeyProperty(ModelViewSerializable model) {
        return model.PrimaryKeyProperties.FirstOrDefault().OriginalPropertyName;
    }
    String GetLowerCasePropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        string result = GetTypeScriptPropertyName(prop, model);
        if (!string.IsNullOrEmpty(result)) {
            result = result.ToLower();
        }
        return result;
    }
    bool IsRootEntityProperty(ModelViewPropertySerializable prop, ModelViewSerializable model) {
        return string.IsNullOrEmpty(prop.ForeignKeyNameChain);
    }
    ModelViewEntityPropertySerializable  GetRootEntityProperty(ModelViewPropertySerializable prop, ModelViewSerializable model) {
        if (string.IsNullOrEmpty(prop.ForeignKeyNameChain)) {
            if (model.AllProperties != null) {
                return model.AllProperties.Where(p => p.OriginalPropertyName == prop.OriginalPropertyName).FirstOrDefault();
            }
            return null;
        }
        if(model.ForeignKeys == null) return null;
        ModelViewForeignKeySerializable fk = model.ForeignKeys.Where(f => f.NavigationName == prop.ForeignKeyNameChain).FirstOrDefault();
        if(fk == null) return null;
        if((fk.PrincipalKeyProps == null) || (fk.ForeignKeyProps == null)) return null;
        int cnt = fk.PrincipalKeyProps.Count;
        if (cnt > fk.ForeignKeyProps.Count) cnt = fk.ForeignKeyProps.Count;
        for(int i = 0; i < cnt; i++) {
            if(fk.PrincipalKeyProps[i].OriginalPropertyName == prop.OriginalPropertyName) {
                return model.AllProperties.Where(p => p.OriginalPropertyName == fk.ForeignKeyProps[i].OriginalPropertyName).FirstOrDefault();
            }
        }
        return null;
    }

    string FirstLetterToUpper(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToUpper(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string FirstLetterToLower(string str) {
        if (str == null)
            return null;
        if (str.Length > 1)
            return char.ToLower(str[0]) + str.Substring(1);
        return str.ToUpper();
    }
    string GetTypeScriptPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.ViewPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName);
        }
    }
    string GetFilterPropertyOperatorName(ModelViewPropertyOfVwSerializable prop, ModelViewSerializable model, string operatorSufix) {
        if (model.GenerateJSonAttribute) {
            return prop.JsonPropertyName + operatorSufix;
        } else {
            return FirstLetterToLower(prop.ViewPropertyName) + operatorSufix;
        }
    }

    ModelViewPropertyOfVwSerializable GetModelScalarPropByKeyProp(ModelViewSerializable model, ModelViewKeyPropertySerializable pk) {
        ModelViewPropertyOfVwSerializable rslt = null;
        if ((model == null) || (pk == null)) return null;
        if (model.ScalarProperties == null) return null;
        ModelViewPropertyOfVwSerializable scProp = 
            model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
        if (scProp != null) return scProp;
        if (model.ForeignKeys != null) {
            foreach(ModelViewForeignKeySerializable fk in model.ForeignKeys) {
                scProp = null;
                if ((fk.ForeignKeyProps != null) && (fk.PrincipalKeyProps != null)) {
                    int cnt = fk.ForeignKeyProps.Count;
                    if (cnt < fk.PrincipalKeyProps.Count)
                    {
                        cnt = fk.PrincipalKeyProps.Count;
                    }
                    for(int i = 0; i < cnt; i++)
                    {
                        if(fk.ForeignKeyProps[i].OriginalPropertyName == pk.OriginalPropertyName)
                        {
                            scProp=
                                model.ScalarProperties.Where(p =>
                                ((p.OriginalPropertyName == fk.PrincipalKeyProps[i].OriginalPropertyName) && (p.ForeignKeyNameChain == fk.NavigationName))).FirstOrDefault();
                        }
                        if(scProp != null) return scProp;
                    }
                }
            }
        }
        return null;
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimaryKey(ModelViewSerializable model) {
        ModelViewUniqueKeyOfVwSerializable rslt = null;    
        if(model == null) return rslt;
        if((model.PrimaryKeyProperties == null) || (model.ScalarProperties == null)) return rslt;
        if((model.PrimaryKeyProperties.Count < 1) || (model.ScalarProperties.Count < 1)) return rslt;
        foreach(ModelViewKeyPropertySerializable pk in model.PrimaryKeyProperties) {
            ModelViewPropertyOfVwSerializable scProp = 
                model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
            if(scProp == null) {
                scProp = GetModelScalarPropByKeyProp(model, pk);
            }
            if(scProp != null) {
                if(rslt == null) rslt = new ModelViewUniqueKeyOfVwSerializable() {
                    UniqueKeyName = null,
                    IsPrimary = true,
                    UniqueKeyProperties = new List<ModelViewPropertyOfVwSerializable>()
                };
                rslt.UniqueKeyProperties.Add(scProp);
            }
        }
        return rslt;
    }
    List<ModelViewUniqueKeyOfVwSerializable> GetModelUniqueKeys(ModelViewSerializable model, List<ModelViewUniqueKeyOfVwSerializable> rsltKeys) {
        if((model == null) || (rsltKeys == null)) return rsltKeys;
        if ((model.UniqueKeys == null) || (model.ScalarProperties == null)) return rsltKeys;
        foreach(ModelViewUniqueKeySerializable uk in model.UniqueKeys) {
            if(uk.UniqueKeyProperties == null) continue;
            if(uk.UniqueKeyProperties.Count < 1) continue;
            ModelViewUniqueKeyOfVwSerializable rslt = null; 
            foreach(ModelViewKeyPropertySerializable pk in uk.UniqueKeyProperties) {
                ModelViewPropertyOfVwSerializable scProp = 
                    model.ScalarProperties.Where(p => ((p.OriginalPropertyName == pk.OriginalPropertyName) && (string.IsNullOrEmpty(p.ForeignKeyNameChain)))).FirstOrDefault();
                if(scProp == null) {
                    scProp = GetModelScalarPropByKeyProp(model, pk);
                }
                if(scProp != null) {
                    if(rslt == null) rslt = new ModelViewUniqueKeyOfVwSerializable() {
                        UniqueKeyName = uk.UniqueKeyName,
                        IsPrimary = false,
                        UniqueKeyProperties = new List<ModelViewPropertyOfVwSerializable>()
                    };
                    rslt.UniqueKeyProperties.Add(scProp);
                }
            }
            if(rslt != null) {
                rsltKeys.Add(rslt);
            }
        }
        return rsltKeys;
    }
    ModelViewUniqueKeyOfVwSerializable GetModelPrimKeyFromList(List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys) {
        if(uniqueKeys == null) return null;
        return uniqueKeys.Where(u => u.IsPrimary).FirstOrDefault();
    }
    ModelViewUniqueKeyOfVwSerializable GetModelUniqueKeyByNameFromList(List<ModelViewUniqueKeyOfVwSerializable> uniqueKeys, string name) {
        if (uniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return uniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return uniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    ModelViewUniqueKeySerializable GetModelUniqueKeyByNameFromModel(ModelViewSerializable model, string name) {
        if (model == null) return null;
        if (model.UniqueKeys == null) return null;
        if(string.IsNullOrEmpty(name)) {
            return model.UniqueKeys.Where(u => string.IsNullOrEmpty(u.UniqueKeyName)).FirstOrDefault();
        } else {
            return model.UniqueKeys.Where(u => u.UniqueKeyName == name).FirstOrDefault();
        }
    }
    bool CheckModelIfIndexIsCorrect(ModelViewSerializable model,ModelViewUniqueKeyOfVwSerializable indx, out string error) {
        if((model == null) || (indx == null)) {
            error = "Input params is not defined";
            return false;
        }
        if(indx.UniqueKeyProperties == null) {
            error = "UniqueKeyProperties of the Index are not defined";
            return false;
        }
        if(indx.UniqueKeyProperties.Count < 1) {
            if(indx.IsPrimary)
                error = "UniqueKeyProperties.Count of the Primary Index is less than 1";
            else 
                error = "UniqueKeyProperties.Count of the Unique Index (UniqueKeyName == "+ indx.UniqueKeyName + ") is less than 1";
            return false;
        }

        if(indx.IsPrimary) {
            if(model.PrimaryKeyProperties == null) {
                error = "PrimaryKeyProperties of the model are not defined";
                return false;
            }
            if (model.PrimaryKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Index fields are included in the Model";
                return false;
            }
        } else {
            if(model.UniqueKeys == null) {
                error = "UniqueKeys of the model are not defined (UniqueKeyName == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(string.IsNullOrEmpty(indx.UniqueKeyName)) {
                error = "The Name of the Index is not defined (UniqueKeyName)";
                return false;
            }
            ModelViewUniqueKeySerializable mindx = model.UniqueKeys.Where(i => i.UniqueKeyName == indx.UniqueKeyName).FirstOrDefault();
            if(mindx == null) {
                error = "Could not find index in model by name (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
            if(mindx.UniqueKeyProperties == null) {
                error = "UniqueKeyProperties of the Unique Index (Unique Index Name == "+ indx.UniqueKeyName + ") are not defined";
                return false;
            }
            if(mindx.UniqueKeyProperties.Count != indx.UniqueKeyProperties.Count) {
                error = "Not all Unique Index fields are included in the Model (Unique Index Name == "+ indx.UniqueKeyName + ")";
                return false;
            }
        }
        error = "";
        return true;
    }

#>